
Rover_Test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001eba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00001eba  00001f4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000462  008000ba  008000ba  00001fa8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005e8  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005914  00000000  00000000  000025fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001663  00000000  00000000  00007f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000326c  00000000  00000000  00009573  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001098  00000000  00000000  0000c7e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019c3  00000000  00000000  0000d878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000448e  00000000  00000000  0000f23b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000538  00000000  00000000  000136c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_1>
       8:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_2>
       c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_3>
      10:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__vector_4>
      14:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__vector_10>
      2c:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	25 e0       	ldi	r18, 0x05	; 5
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 31       	cpi	r26, 0x1C	; 28
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 09 	call	0x1358	; 0x1358 <main>
      8a:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDir>:
      92:	41 30       	cpi	r20, 0x01	; 1
      94:	a1 f5       	brne	.+104    	; 0xfe <DIO_voidSetPinDir+0x6c>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	89 f0       	breq	.+34     	; 0xbc <DIO_voidSetPinDir+0x2a>
      9a:	28 f0       	brcs	.+10     	; 0xa6 <DIO_voidSetPinDir+0x14>
      9c:	82 30       	cpi	r24, 0x02	; 2
      9e:	c9 f0       	breq	.+50     	; 0xd2 <DIO_voidSetPinDir+0x40>
      a0:	83 30       	cpi	r24, 0x03	; 3
      a2:	11 f1       	breq	.+68     	; 0xe8 <DIO_voidSetPinDir+0x56>
      a4:	08 95       	ret
      a6:	2a b3       	in	r18, 0x1a	; 26
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_voidSetPinDir+0x20>
      ae:	88 0f       	add	r24, r24
      b0:	99 1f       	adc	r25, r25
      b2:	6a 95       	dec	r22
      b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_voidSetPinDir+0x1c>
      b6:	82 2b       	or	r24, r18
      b8:	8a bb       	out	0x1a, r24	; 26
      ba:	08 95       	ret
      bc:	27 b3       	in	r18, 0x17	; 23
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_voidSetPinDir+0x36>
      c4:	88 0f       	add	r24, r24
      c6:	99 1f       	adc	r25, r25
      c8:	6a 95       	dec	r22
      ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_voidSetPinDir+0x32>
      cc:	82 2b       	or	r24, r18
      ce:	87 bb       	out	0x17, r24	; 23
      d0:	08 95       	ret
      d2:	24 b3       	in	r18, 0x14	; 20
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_voidSetPinDir+0x4c>
      da:	88 0f       	add	r24, r24
      dc:	99 1f       	adc	r25, r25
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_voidSetPinDir+0x48>
      e2:	82 2b       	or	r24, r18
      e4:	84 bb       	out	0x14, r24	; 20
      e6:	08 95       	ret
      e8:	21 b3       	in	r18, 0x11	; 17
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPinDir+0x62>
      f0:	88 0f       	add	r24, r24
      f2:	99 1f       	adc	r25, r25
      f4:	6a 95       	dec	r22
      f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPinDir+0x5e>
      f8:	82 2b       	or	r24, r18
      fa:	81 bb       	out	0x11, r24	; 17
      fc:	08 95       	ret
      fe:	41 11       	cpse	r20, r1
     100:	37 c0       	rjmp	.+110    	; 0x170 <DIO_voidSetPinDir+0xde>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	91 f0       	breq	.+36     	; 0x12a <DIO_voidSetPinDir+0x98>
     106:	28 f0       	brcs	.+10     	; 0x112 <DIO_voidSetPinDir+0x80>
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	d9 f0       	breq	.+54     	; 0x142 <DIO_voidSetPinDir+0xb0>
     10c:	83 30       	cpi	r24, 0x03	; 3
     10e:	29 f1       	breq	.+74     	; 0x15a <DIO_voidSetPinDir+0xc8>
     110:	08 95       	ret
     112:	2a b3       	in	r18, 0x1a	; 26
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinDir+0x8c>
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	6a 95       	dec	r22
     120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinDir+0x88>
     122:	80 95       	com	r24
     124:	82 23       	and	r24, r18
     126:	8a bb       	out	0x1a, r24	; 26
     128:	08 95       	ret
     12a:	27 b3       	in	r18, 0x17	; 23
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_voidSetPinDir+0xa4>
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_voidSetPinDir+0xa0>
     13a:	80 95       	com	r24
     13c:	82 23       	and	r24, r18
     13e:	87 bb       	out	0x17, r24	; 23
     140:	08 95       	ret
     142:	24 b3       	in	r18, 0x14	; 20
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_voidSetPinDir+0xbc>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	6a 95       	dec	r22
     150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_voidSetPinDir+0xb8>
     152:	80 95       	com	r24
     154:	82 23       	and	r24, r18
     156:	84 bb       	out	0x14, r24	; 20
     158:	08 95       	ret
     15a:	21 b3       	in	r18, 0x11	; 17
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_voidSetPinDir+0xd4>
     162:	88 0f       	add	r24, r24
     164:	99 1f       	adc	r25, r25
     166:	6a 95       	dec	r22
     168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_voidSetPinDir+0xd0>
     16a:	80 95       	com	r24
     16c:	82 23       	and	r24, r18
     16e:	81 bb       	out	0x11, r24	; 17
     170:	08 95       	ret

00000172 <DIO_voidSetPinVal>:
     172:	41 30       	cpi	r20, 0x01	; 1
     174:	a1 f5       	brne	.+104    	; 0x1de <DIO_voidSetPinVal+0x6c>
     176:	81 30       	cpi	r24, 0x01	; 1
     178:	89 f0       	breq	.+34     	; 0x19c <DIO_voidSetPinVal+0x2a>
     17a:	28 f0       	brcs	.+10     	; 0x186 <DIO_voidSetPinVal+0x14>
     17c:	82 30       	cpi	r24, 0x02	; 2
     17e:	c9 f0       	breq	.+50     	; 0x1b2 <DIO_voidSetPinVal+0x40>
     180:	83 30       	cpi	r24, 0x03	; 3
     182:	11 f1       	breq	.+68     	; 0x1c8 <DIO_voidSetPinVal+0x56>
     184:	08 95       	ret
     186:	2b b3       	in	r18, 0x1b	; 27
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_voidSetPinVal+0x20>
     18e:	88 0f       	add	r24, r24
     190:	99 1f       	adc	r25, r25
     192:	6a 95       	dec	r22
     194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_voidSetPinVal+0x1c>
     196:	82 2b       	or	r24, r18
     198:	8b bb       	out	0x1b, r24	; 27
     19a:	08 95       	ret
     19c:	28 b3       	in	r18, 0x18	; 24
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_voidSetPinVal+0x36>
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	6a 95       	dec	r22
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_voidSetPinVal+0x32>
     1ac:	82 2b       	or	r24, r18
     1ae:	88 bb       	out	0x18, r24	; 24
     1b0:	08 95       	ret
     1b2:	25 b3       	in	r18, 0x15	; 21
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_voidSetPinVal+0x4c>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	6a 95       	dec	r22
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_voidSetPinVal+0x48>
     1c2:	82 2b       	or	r24, r18
     1c4:	85 bb       	out	0x15, r24	; 21
     1c6:	08 95       	ret
     1c8:	22 b3       	in	r18, 0x12	; 18
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_voidSetPinVal+0x62>
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	6a 95       	dec	r22
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_voidSetPinVal+0x5e>
     1d8:	82 2b       	or	r24, r18
     1da:	82 bb       	out	0x12, r24	; 18
     1dc:	08 95       	ret
     1de:	41 11       	cpse	r20, r1
     1e0:	37 c0       	rjmp	.+110    	; 0x250 <DIO_voidSetPinVal+0xde>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	91 f0       	breq	.+36     	; 0x20a <DIO_voidSetPinVal+0x98>
     1e6:	28 f0       	brcs	.+10     	; 0x1f2 <DIO_voidSetPinVal+0x80>
     1e8:	82 30       	cpi	r24, 0x02	; 2
     1ea:	d9 f0       	breq	.+54     	; 0x222 <DIO_voidSetPinVal+0xb0>
     1ec:	83 30       	cpi	r24, 0x03	; 3
     1ee:	29 f1       	breq	.+74     	; 0x23a <DIO_voidSetPinVal+0xc8>
     1f0:	08 95       	ret
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_voidSetPinVal+0x8c>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	6a 95       	dec	r22
     200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_voidSetPinVal+0x88>
     202:	80 95       	com	r24
     204:	82 23       	and	r24, r18
     206:	8b bb       	out	0x1b, r24	; 27
     208:	08 95       	ret
     20a:	28 b3       	in	r18, 0x18	; 24
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_voidSetPinVal+0xa4>
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	6a 95       	dec	r22
     218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_voidSetPinVal+0xa0>
     21a:	80 95       	com	r24
     21c:	82 23       	and	r24, r18
     21e:	88 bb       	out	0x18, r24	; 24
     220:	08 95       	ret
     222:	25 b3       	in	r18, 0x15	; 21
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinVal+0xbc>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinVal+0xb8>
     232:	80 95       	com	r24
     234:	82 23       	and	r24, r18
     236:	85 bb       	out	0x15, r24	; 21
     238:	08 95       	ret
     23a:	22 b3       	in	r18, 0x12	; 18
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_voidSetPinVal+0xd4>
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	6a 95       	dec	r22
     248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_voidSetPinVal+0xd0>
     24a:	80 95       	com	r24
     24c:	82 23       	and	r24, r18
     24e:	82 bb       	out	0x12, r24	; 18
     250:	08 95       	ret

00000252 <DIO_u8GetPinVal>:
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	79 f0       	breq	.+30     	; 0x274 <DIO_u8GetPinVal+0x22>
     256:	28 f0       	brcs	.+10     	; 0x262 <DIO_u8GetPinVal+0x10>
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	a9 f0       	breq	.+42     	; 0x286 <DIO_u8GetPinVal+0x34>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	e1 f0       	breq	.+56     	; 0x298 <DIO_u8GetPinVal+0x46>
     260:	24 c0       	rjmp	.+72     	; 0x2aa <DIO_u8GetPinVal+0x58>
     262:	89 b3       	in	r24, 0x19	; 25
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_u8GetPinVal+0x1a>
     268:	95 95       	asr	r25
     26a:	87 95       	ror	r24
     26c:	6a 95       	dec	r22
     26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_u8GetPinVal+0x16>
     270:	81 70       	andi	r24, 0x01	; 1
     272:	08 95       	ret
     274:	86 b3       	in	r24, 0x16	; 22
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_u8GetPinVal+0x2c>
     27a:	95 95       	asr	r25
     27c:	87 95       	ror	r24
     27e:	6a 95       	dec	r22
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_u8GetPinVal+0x28>
     282:	81 70       	andi	r24, 0x01	; 1
     284:	08 95       	ret
     286:	83 b3       	in	r24, 0x13	; 19
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_u8GetPinVal+0x3e>
     28c:	95 95       	asr	r25
     28e:	87 95       	ror	r24
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_u8GetPinVal+0x3a>
     294:	81 70       	andi	r24, 0x01	; 1
     296:	08 95       	ret
     298:	80 b3       	in	r24, 0x10	; 16
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8GetPinVal+0x50>
     29e:	95 95       	asr	r25
     2a0:	87 95       	ror	r24
     2a2:	6a 95       	dec	r22
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_u8GetPinVal+0x4c>
     2a6:	81 70       	andi	r24, 0x01	; 1
     2a8:	08 95       	ret
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	08 95       	ret

000002ae <__vector_1>:
     2ae:	1f 92       	push	r1
     2b0:	0f 92       	push	r0
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	0f 92       	push	r0
     2b6:	11 24       	eor	r1, r1
     2b8:	2f 93       	push	r18
     2ba:	3f 93       	push	r19
     2bc:	4f 93       	push	r20
     2be:	5f 93       	push	r21
     2c0:	6f 93       	push	r22
     2c2:	7f 93       	push	r23
     2c4:	8f 93       	push	r24
     2c6:	9f 93       	push	r25
     2c8:	af 93       	push	r26
     2ca:	bf 93       	push	r27
     2cc:	ef 93       	push	r30
     2ce:	ff 93       	push	r31
     2d0:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <INT_0_PTR>
     2d4:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <INT_0_PTR+0x1>
     2d8:	09 95       	icall
     2da:	ff 91       	pop	r31
     2dc:	ef 91       	pop	r30
     2de:	bf 91       	pop	r27
     2e0:	af 91       	pop	r26
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	7f 91       	pop	r23
     2e8:	6f 91       	pop	r22
     2ea:	5f 91       	pop	r21
     2ec:	4f 91       	pop	r20
     2ee:	3f 91       	pop	r19
     2f0:	2f 91       	pop	r18
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <__vector_2>:
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	2f 93       	push	r18
     308:	3f 93       	push	r19
     30a:	4f 93       	push	r20
     30c:	5f 93       	push	r21
     30e:	6f 93       	push	r22
     310:	7f 93       	push	r23
     312:	8f 93       	push	r24
     314:	9f 93       	push	r25
     316:	af 93       	push	r26
     318:	bf 93       	push	r27
     31a:	ef 93       	push	r30
     31c:	ff 93       	push	r31
     31e:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <INT_1_PTR>
     322:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <INT_1_PTR+0x1>
     326:	09 95       	icall
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	7f 91       	pop	r23
     336:	6f 91       	pop	r22
     338:	5f 91       	pop	r21
     33a:	4f 91       	pop	r20
     33c:	3f 91       	pop	r19
     33e:	2f 91       	pop	r18
     340:	0f 90       	pop	r0
     342:	0f be       	out	0x3f, r0	; 63
     344:	0f 90       	pop	r0
     346:	1f 90       	pop	r1
     348:	18 95       	reti

0000034a <__vector_3>:
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	2f 93       	push	r18
     356:	3f 93       	push	r19
     358:	4f 93       	push	r20
     35a:	5f 93       	push	r21
     35c:	6f 93       	push	r22
     35e:	7f 93       	push	r23
     360:	8f 93       	push	r24
     362:	9f 93       	push	r25
     364:	af 93       	push	r26
     366:	bf 93       	push	r27
     368:	ef 93       	push	r30
     36a:	ff 93       	push	r31
     36c:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <__data_end>
     370:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <__data_end+0x1>
     374:	09 95       	icall
     376:	ff 91       	pop	r31
     378:	ef 91       	pop	r30
     37a:	bf 91       	pop	r27
     37c:	af 91       	pop	r26
     37e:	9f 91       	pop	r25
     380:	8f 91       	pop	r24
     382:	7f 91       	pop	r23
     384:	6f 91       	pop	r22
     386:	5f 91       	pop	r21
     388:	4f 91       	pop	r20
     38a:	3f 91       	pop	r19
     38c:	2f 91       	pop	r18
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
     392:	0f 90       	pop	r0
     394:	1f 90       	pop	r1
     396:	18 95       	reti

00000398 <prvHeapInit>:
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     398:	e5 ec       	ldi	r30, 0xC5	; 197
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	8a ec       	ldi	r24, 0xCA	; 202
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
	xStart.xBlockSize = ( size_t ) 0;
     3a4:	13 82       	std	Z+3, r1	; 0x03
     3a6:	12 82       	std	Z+2, r1	; 0x02

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     3a8:	e1 ec       	ldi	r30, 0xC1	; 193
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	87 ee       	ldi	r24, 0xE7	; 231
     3ae:	93 e0       	ldi	r25, 0x03	; 3
     3b0:	93 83       	std	Z+3, r25	; 0x03
     3b2:	82 83       	std	Z+2, r24	; 0x02
	xEnd.pxNextFreeBlock = NULL;
     3b4:	11 82       	std	Z+1, r1	; 0x01
     3b6:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     3b8:	a9 ec       	ldi	r26, 0xC9	; 201
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	14 96       	adiw	r26, 0x04	; 4
     3be:	9c 93       	st	X, r25
     3c0:	8e 93       	st	-X, r24
     3c2:	13 97       	sbiw	r26, 0x03	; 3
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     3c4:	12 96       	adiw	r26, 0x02	; 2
     3c6:	fc 93       	st	X, r31
     3c8:	ee 93       	st	-X, r30
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	08 95       	ret

000003ce <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     3d8:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     3dc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <xHeapHasBeenInitialised.2079>
     3e0:	81 11       	cpse	r24, r1
     3e2:	05 c0       	rjmp	.+10     	; 0x3ee <pvPortMalloc+0x20>
		{
			prvHeapInit();
     3e4:	0e 94 cc 01 	call	0x398	; 0x398 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <xHeapHasBeenInitialised.2079>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     3ee:	20 97       	sbiw	r28, 0x00	; 0
     3f0:	09 f0       	breq	.+2      	; 0x3f4 <pvPortMalloc+0x26>
		{
			xWantedSize += heapSTRUCT_SIZE;
     3f2:	24 96       	adiw	r28, 0x04	; 4
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     3f4:	ce 01       	movw	r24, r28
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	86 3e       	cpi	r24, 0xE6	; 230
     3fa:	93 40       	sbci	r25, 0x03	; 3
     3fc:	08 f0       	brcs	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	56 c0       	rjmp	.+172    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     400:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <xStart>
     404:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     408:	a5 ec       	ldi	r26, 0xC5	; 197
     40a:	b0 e0       	ldi	r27, 0x00	; 0
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
			{
				pxPreviousBlock = pxBlock;
     40e:	df 01       	movw	r26, r30
				pxBlock = pxBlock->pxNextFreeBlock;
     410:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     412:	82 81       	ldd	r24, Z+2	; 0x02
     414:	93 81       	ldd	r25, Z+3	; 0x03
     416:	8c 17       	cp	r24, r28
     418:	9d 07       	cpc	r25, r29
     41a:	20 f4       	brcc	.+8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     41c:	80 81       	ld	r24, Z
     41e:	91 81       	ldd	r25, Z+1	; 0x01
     420:	00 97       	sbiw	r24, 0x00	; 0
     422:	a9 f7       	brne	.-22     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	e1 3c       	cpi	r30, 0xC1	; 193
     428:	f8 07       	cpc	r31, r24
     42a:	09 f4       	brne	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42c:	42 c0       	rjmp	.+132    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     42e:	0d 91       	ld	r16, X+
     430:	1c 91       	ld	r17, X
     432:	11 97       	sbiw	r26, 0x01	; 1
     434:	0c 5f       	subi	r16, 0xFC	; 252
     436:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     438:	80 81       	ld	r24, Z
     43a:	91 81       	ldd	r25, Z+1	; 0x01
     43c:	8d 93       	st	X+, r24
     43e:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     440:	82 81       	ldd	r24, Z+2	; 0x02
     442:	93 81       	ldd	r25, Z+3	; 0x03
     444:	8c 1b       	sub	r24, r28
     446:	9d 0b       	sbc	r25, r29
     448:	89 30       	cpi	r24, 0x09	; 9
     44a:	91 05       	cpc	r25, r1
     44c:	10 f1       	brcs	.+68     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     44e:	af 01       	movw	r20, r30
     450:	4c 0f       	add	r20, r28
     452:	5d 1f       	adc	r21, r29

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     454:	da 01       	movw	r26, r20
     456:	13 96       	adiw	r26, 0x03	; 3
     458:	9c 93       	st	X, r25
     45a:	8e 93       	st	-X, r24
     45c:	12 97       	sbiw	r26, 0x02	; 2
					pxBlock->xBlockSize = xWantedSize;
     45e:	d3 83       	std	Z+3, r29	; 0x03
     460:	c2 83       	std	Z+2, r28	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     462:	12 96       	adiw	r26, 0x02	; 2
     464:	2d 91       	ld	r18, X+
     466:	3c 91       	ld	r19, X
     468:	13 97       	sbiw	r26, 0x03	; 3
     46a:	65 ec       	ldi	r22, 0xC5	; 197
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	01 c0       	rjmp	.+2      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     470:	bd 01       	movw	r22, r26
     472:	eb 01       	movw	r28, r22
     474:	a8 81       	ld	r26, Y
     476:	b9 81       	ldd	r27, Y+1	; 0x01
     478:	12 96       	adiw	r26, 0x02	; 2
     47a:	8d 91       	ld	r24, X+
     47c:	9c 91       	ld	r25, X
     47e:	13 97       	sbiw	r26, 0x03	; 3
     480:	82 17       	cp	r24, r18
     482:	93 07       	cpc	r25, r19
     484:	a8 f3       	brcs	.-22     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     486:	ea 01       	movw	r28, r20
     488:	b9 83       	std	Y+1, r27	; 0x01
     48a:	a8 83       	st	Y, r26
     48c:	db 01       	movw	r26, r22
     48e:	4d 93       	st	X+, r20
     490:	5c 93       	st	X, r21
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     492:	22 81       	ldd	r18, Z+2	; 0x02
     494:	33 81       	ldd	r19, Z+3	; 0x03
     496:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     49a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     49e:	82 1b       	sub	r24, r18
     4a0:	93 0b       	sbc	r25, r19
     4a2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	10 e0       	ldi	r17, 0x00	; 0
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b2:	00 e0       	ldi	r16, 0x00	; 0
     4b4:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     4b6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     4ba:	c8 01       	movw	r24, r16
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	08 95       	ret

000004c6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     4ce:	00 97       	sbiw	r24, 0x00	; 0
     4d0:	41 f1       	breq	.+80     	; 0x522 <vPortFree+0x5c>
     4d2:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     4d4:	8c 01       	movw	r16, r24
     4d6:	04 50       	subi	r16, 0x04	; 4
     4d8:	11 09       	sbc	r17, r1

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     4da:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     4de:	f8 01       	movw	r30, r16
     4e0:	42 81       	ldd	r20, Z+2	; 0x02
     4e2:	53 81       	ldd	r21, Z+3	; 0x03
     4e4:	a5 ec       	ldi	r26, 0xC5	; 197
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <vPortFree+0x26>
     4ea:	df 01       	movw	r26, r30
     4ec:	ed 91       	ld	r30, X+
     4ee:	fc 91       	ld	r31, X
     4f0:	11 97       	sbiw	r26, 0x01	; 1
     4f2:	22 81       	ldd	r18, Z+2	; 0x02
     4f4:	33 81       	ldd	r19, Z+3	; 0x03
     4f6:	24 17       	cp	r18, r20
     4f8:	35 07       	cpc	r19, r21
     4fa:	b8 f3       	brcs	.-18     	; 0x4ea <vPortFree+0x24>
     4fc:	24 97       	sbiw	r28, 0x04	; 4
     4fe:	f9 83       	std	Y+1, r31	; 0x01
     500:	e8 83       	st	Y, r30
     502:	0d 93       	st	X+, r16
     504:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
     506:	8a 81       	ldd	r24, Y+2	; 0x02
     508:	9b 81       	ldd	r25, Y+3	; 0x03
     50a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     50e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     512:	82 0f       	add	r24, r18
     514:	93 1f       	adc	r25, r19
     516:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     51a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     51e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <xTaskResumeAll>
	}
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     52c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     52e:	03 96       	adiw	r24, 0x03	; 3
     530:	92 83       	std	Z+2, r25	; 0x02
     532:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     534:	2f ef       	ldi	r18, 0xFF	; 255
     536:	3f ef       	ldi	r19, 0xFF	; 255
     538:	34 83       	std	Z+4, r19	; 0x04
     53a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     53c:	96 83       	std	Z+6, r25	; 0x06
     53e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     540:	90 87       	std	Z+8, r25	; 0x08
     542:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     544:	10 82       	st	Z, r1
     546:	08 95       	ret

00000548 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     548:	fc 01       	movw	r30, r24
     54a:	11 86       	std	Z+9, r1	; 0x09
     54c:	10 86       	std	Z+8, r1	; 0x08
     54e:	08 95       	ret

00000550 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	9c 01       	movw	r18, r24
     556:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     558:	dc 01       	movw	r26, r24
     55a:	11 96       	adiw	r26, 0x01	; 1
     55c:	cd 91       	ld	r28, X+
     55e:	dc 91       	ld	r29, X
     560:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     562:	d3 83       	std	Z+3, r29	; 0x03
     564:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     566:	8c 81       	ldd	r24, Y+4	; 0x04
     568:	9d 81       	ldd	r25, Y+5	; 0x05
     56a:	95 83       	std	Z+5, r25	; 0x05
     56c:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     56e:	8c 81       	ldd	r24, Y+4	; 0x04
     570:	9d 81       	ldd	r25, Y+5	; 0x05
     572:	dc 01       	movw	r26, r24
     574:	13 96       	adiw	r26, 0x03	; 3
     576:	7c 93       	st	X, r23
     578:	6e 93       	st	-X, r22
     57a:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     57c:	7d 83       	std	Y+5, r23	; 0x05
     57e:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     580:	31 87       	std	Z+9, r19	; 0x09
     582:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     584:	f9 01       	movw	r30, r18
     586:	80 81       	ld	r24, Z
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	80 83       	st	Z, r24
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     598:	48 81       	ld	r20, Y
     59a:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     59c:	4f 3f       	cpi	r20, 0xFF	; 255
     59e:	2f ef       	ldi	r18, 0xFF	; 255
     5a0:	52 07       	cpc	r21, r18
     5a2:	21 f4       	brne	.+8      	; 0x5ac <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     5a4:	fc 01       	movw	r30, r24
     5a6:	a7 81       	ldd	r26, Z+7	; 0x07
     5a8:	b0 85       	ldd	r27, Z+8	; 0x08
     5aa:	0d c0       	rjmp	.+26     	; 0x5c6 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5ac:	dc 01       	movw	r26, r24
     5ae:	13 96       	adiw	r26, 0x03	; 3
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <vListInsert+0x22>
     5b2:	df 01       	movw	r26, r30
     5b4:	12 96       	adiw	r26, 0x02	; 2
     5b6:	ed 91       	ld	r30, X+
     5b8:	fc 91       	ld	r31, X
     5ba:	13 97       	sbiw	r26, 0x03	; 3
     5bc:	20 81       	ld	r18, Z
     5be:	31 81       	ldd	r19, Z+1	; 0x01
     5c0:	42 17       	cp	r20, r18
     5c2:	53 07       	cpc	r21, r19
     5c4:	b0 f7       	brcc	.-20     	; 0x5b2 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     5c6:	12 96       	adiw	r26, 0x02	; 2
     5c8:	ed 91       	ld	r30, X+
     5ca:	fc 91       	ld	r31, X
     5cc:	13 97       	sbiw	r26, 0x03	; 3
     5ce:	fb 83       	std	Y+3, r31	; 0x03
     5d0:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5d2:	d5 83       	std	Z+5, r29	; 0x05
     5d4:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     5d6:	bd 83       	std	Y+5, r27	; 0x05
     5d8:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     5da:	13 96       	adiw	r26, 0x03	; 3
     5dc:	dc 93       	st	X, r29
     5de:	ce 93       	st	-X, r28
     5e0:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     5e2:	99 87       	std	Y+9, r25	; 0x09
     5e4:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 81       	ld	r18, Z
     5ea:	2f 5f       	subi	r18, 0xFF	; 255
     5ec:	20 83       	st	Z, r18
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     5fa:	a0 85       	ldd	r26, Z+8	; 0x08
     5fc:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5fe:	c2 81       	ldd	r28, Z+2	; 0x02
     600:	d3 81       	ldd	r29, Z+3	; 0x03
     602:	84 81       	ldd	r24, Z+4	; 0x04
     604:	95 81       	ldd	r25, Z+5	; 0x05
     606:	9d 83       	std	Y+5, r25	; 0x05
     608:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     60a:	c4 81       	ldd	r28, Z+4	; 0x04
     60c:	d5 81       	ldd	r29, Z+5	; 0x05
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	9b 83       	std	Y+3, r25	; 0x03
     614:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     616:	11 96       	adiw	r26, 0x01	; 1
     618:	8d 91       	ld	r24, X+
     61a:	9c 91       	ld	r25, X
     61c:	12 97       	sbiw	r26, 0x02	; 2
     61e:	e8 17       	cp	r30, r24
     620:	f9 07       	cpc	r31, r25
     622:	31 f4       	brne	.+12     	; 0x630 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     624:	84 81       	ldd	r24, Z+4	; 0x04
     626:	95 81       	ldd	r25, Z+5	; 0x05
     628:	12 96       	adiw	r26, 0x02	; 2
     62a:	9c 93       	st	X, r25
     62c:	8e 93       	st	-X, r24
     62e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     630:	11 86       	std	Z+9, r1	; 0x09
     632:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     634:	8c 91       	ld	r24, X
     636:	81 50       	subi	r24, 0x01	; 1
     638:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     640:	1b bc       	out	0x2b, r1	; 43
     642:	89 ef       	ldi	r24, 0xF9	; 249
     644:	8a bd       	out	0x2a, r24	; 42
     646:	8b e0       	ldi	r24, 0x0B	; 11
     648:	8e bd       	out	0x2e, r24	; 46
     64a:	89 b7       	in	r24, 0x39	; 57
     64c:	80 61       	ori	r24, 0x10	; 16
     64e:	89 bf       	out	0x39, r24	; 57
     650:	08 95       	ret

00000652 <pxPortInitialiseStack>:
     652:	31 e1       	ldi	r19, 0x11	; 17
     654:	fc 01       	movw	r30, r24
     656:	30 83       	st	Z, r19
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	22 e2       	ldi	r18, 0x22	; 34
     65c:	20 83       	st	Z, r18
     65e:	31 97       	sbiw	r30, 0x01	; 1
     660:	a3 e3       	ldi	r26, 0x33	; 51
     662:	a0 83       	st	Z, r26
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	60 83       	st	Z, r22
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	70 83       	st	Z, r23
     66c:	31 97       	sbiw	r30, 0x01	; 1
     66e:	10 82       	st	Z, r1
     670:	31 97       	sbiw	r30, 0x01	; 1
     672:	60 e8       	ldi	r22, 0x80	; 128
     674:	60 83       	st	Z, r22
     676:	31 97       	sbiw	r30, 0x01	; 1
     678:	10 82       	st	Z, r1
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	62 e0       	ldi	r22, 0x02	; 2
     67e:	60 83       	st	Z, r22
     680:	31 97       	sbiw	r30, 0x01	; 1
     682:	63 e0       	ldi	r22, 0x03	; 3
     684:	60 83       	st	Z, r22
     686:	31 97       	sbiw	r30, 0x01	; 1
     688:	64 e0       	ldi	r22, 0x04	; 4
     68a:	60 83       	st	Z, r22
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	65 e0       	ldi	r22, 0x05	; 5
     690:	60 83       	st	Z, r22
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	66 e0       	ldi	r22, 0x06	; 6
     696:	60 83       	st	Z, r22
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	60 83       	st	Z, r22
     69e:	31 97       	sbiw	r30, 0x01	; 1
     6a0:	68 e0       	ldi	r22, 0x08	; 8
     6a2:	60 83       	st	Z, r22
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	69 e0       	ldi	r22, 0x09	; 9
     6a8:	60 83       	st	Z, r22
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	60 e1       	ldi	r22, 0x10	; 16
     6ae:	60 83       	st	Z, r22
     6b0:	31 97       	sbiw	r30, 0x01	; 1
     6b2:	30 83       	st	Z, r19
     6b4:	31 97       	sbiw	r30, 0x01	; 1
     6b6:	32 e1       	ldi	r19, 0x12	; 18
     6b8:	30 83       	st	Z, r19
     6ba:	31 97       	sbiw	r30, 0x01	; 1
     6bc:	33 e1       	ldi	r19, 0x13	; 19
     6be:	30 83       	st	Z, r19
     6c0:	31 97       	sbiw	r30, 0x01	; 1
     6c2:	34 e1       	ldi	r19, 0x14	; 20
     6c4:	30 83       	st	Z, r19
     6c6:	31 97       	sbiw	r30, 0x01	; 1
     6c8:	35 e1       	ldi	r19, 0x15	; 21
     6ca:	30 83       	st	Z, r19
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	36 e1       	ldi	r19, 0x16	; 22
     6d0:	30 83       	st	Z, r19
     6d2:	31 97       	sbiw	r30, 0x01	; 1
     6d4:	37 e1       	ldi	r19, 0x17	; 23
     6d6:	30 83       	st	Z, r19
     6d8:	31 97       	sbiw	r30, 0x01	; 1
     6da:	38 e1       	ldi	r19, 0x18	; 24
     6dc:	30 83       	st	Z, r19
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	39 e1       	ldi	r19, 0x19	; 25
     6e2:	30 83       	st	Z, r19
     6e4:	31 97       	sbiw	r30, 0x01	; 1
     6e6:	30 e2       	ldi	r19, 0x20	; 32
     6e8:	30 83       	st	Z, r19
     6ea:	31 97       	sbiw	r30, 0x01	; 1
     6ec:	31 e2       	ldi	r19, 0x21	; 33
     6ee:	30 83       	st	Z, r19
     6f0:	31 97       	sbiw	r30, 0x01	; 1
     6f2:	20 83       	st	Z, r18
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	23 e2       	ldi	r18, 0x23	; 35
     6f8:	20 83       	st	Z, r18
     6fa:	31 97       	sbiw	r30, 0x01	; 1
     6fc:	40 83       	st	Z, r20
     6fe:	31 97       	sbiw	r30, 0x01	; 1
     700:	50 83       	st	Z, r21
     702:	31 97       	sbiw	r30, 0x01	; 1
     704:	26 e2       	ldi	r18, 0x26	; 38
     706:	20 83       	st	Z, r18
     708:	31 97       	sbiw	r30, 0x01	; 1
     70a:	27 e2       	ldi	r18, 0x27	; 39
     70c:	20 83       	st	Z, r18
     70e:	31 97       	sbiw	r30, 0x01	; 1
     710:	28 e2       	ldi	r18, 0x28	; 40
     712:	20 83       	st	Z, r18
     714:	31 97       	sbiw	r30, 0x01	; 1
     716:	29 e2       	ldi	r18, 0x29	; 41
     718:	20 83       	st	Z, r18
     71a:	31 97       	sbiw	r30, 0x01	; 1
     71c:	20 e3       	ldi	r18, 0x30	; 48
     71e:	20 83       	st	Z, r18
     720:	31 97       	sbiw	r30, 0x01	; 1
     722:	21 e3       	ldi	r18, 0x31	; 49
     724:	20 83       	st	Z, r18
     726:	86 97       	sbiw	r24, 0x26	; 38
     728:	08 95       	ret

0000072a <xPortStartScheduler>:
     72a:	0e 94 20 03 	call	0x640	; 0x640 <prvSetupTimerInterrupt>
     72e:	a0 91 0c 05 	lds	r26, 0x050C	; 0x80050c <pxCurrentTCB>
     732:	b0 91 0d 05 	lds	r27, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     736:	cd 91       	ld	r28, X+
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	dd 91       	ld	r29, X+
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	bf 91       	pop	r27
     748:	af 91       	pop	r26
     74a:	9f 91       	pop	r25
     74c:	8f 91       	pop	r24
     74e:	7f 91       	pop	r23
     750:	6f 91       	pop	r22
     752:	5f 91       	pop	r21
     754:	4f 91       	pop	r20
     756:	3f 91       	pop	r19
     758:	2f 91       	pop	r18
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	bf 90       	pop	r11
     768:	af 90       	pop	r10
     76a:	9f 90       	pop	r9
     76c:	8f 90       	pop	r8
     76e:	7f 90       	pop	r7
     770:	6f 90       	pop	r6
     772:	5f 90       	pop	r5
     774:	4f 90       	pop	r4
     776:	3f 90       	pop	r3
     778:	2f 90       	pop	r2
     77a:	1f 90       	pop	r1
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	0f 90       	pop	r0
     782:	08 95       	ret
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	08 95       	ret

00000788 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	0f 92       	push	r0
     790:	1f 92       	push	r1
     792:	11 24       	eor	r1, r1
     794:	2f 92       	push	r2
     796:	3f 92       	push	r3
     798:	4f 92       	push	r4
     79a:	5f 92       	push	r5
     79c:	6f 92       	push	r6
     79e:	7f 92       	push	r7
     7a0:	8f 92       	push	r8
     7a2:	9f 92       	push	r9
     7a4:	af 92       	push	r10
     7a6:	bf 92       	push	r11
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	2f 93       	push	r18
     7b6:	3f 93       	push	r19
     7b8:	4f 93       	push	r20
     7ba:	5f 93       	push	r21
     7bc:	6f 93       	push	r22
     7be:	7f 93       	push	r23
     7c0:	8f 93       	push	r24
     7c2:	9f 93       	push	r25
     7c4:	af 93       	push	r26
     7c6:	bf 93       	push	r27
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	ef 93       	push	r30
     7ce:	ff 93       	push	r31
     7d0:	a0 91 0c 05 	lds	r26, 0x050C	; 0x80050c <pxCurrentTCB>
     7d4:	b0 91 0d 05 	lds	r27, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     7d8:	0d b6       	in	r0, 0x3d	; 61
     7da:	0d 92       	st	X+, r0
     7dc:	0e b6       	in	r0, 0x3e	; 62
     7de:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     7e0:	0e 94 46 08 	call	0x108c	; 0x108c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     7e4:	a0 91 0c 05 	lds	r26, 0x050C	; 0x80050c <pxCurrentTCB>
     7e8:	b0 91 0d 05 	lds	r27, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     7ec:	cd 91       	ld	r28, X+
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	dd 91       	ld	r29, X+
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	ff 91       	pop	r31
     7f6:	ef 91       	pop	r30
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	bf 91       	pop	r27
     7fe:	af 91       	pop	r26
     800:	9f 91       	pop	r25
     802:	8f 91       	pop	r24
     804:	7f 91       	pop	r23
     806:	6f 91       	pop	r22
     808:	5f 91       	pop	r21
     80a:	4f 91       	pop	r20
     80c:	3f 91       	pop	r19
     80e:	2f 91       	pop	r18
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	bf 90       	pop	r11
     81e:	af 90       	pop	r10
     820:	9f 90       	pop	r9
     822:	8f 90       	pop	r8
     824:	7f 90       	pop	r7
     826:	6f 90       	pop	r6
     828:	5f 90       	pop	r5
     82a:	4f 90       	pop	r4
     82c:	3f 90       	pop	r3
     82e:	2f 90       	pop	r2
     830:	1f 90       	pop	r1
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0

	asm volatile ( "ret" );
     838:	08 95       	ret

0000083a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     83a:	0f 92       	push	r0
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	0f 92       	push	r0
     842:	1f 92       	push	r1
     844:	11 24       	eor	r1, r1
     846:	2f 92       	push	r2
     848:	3f 92       	push	r3
     84a:	4f 92       	push	r4
     84c:	5f 92       	push	r5
     84e:	6f 92       	push	r6
     850:	7f 92       	push	r7
     852:	8f 92       	push	r8
     854:	9f 92       	push	r9
     856:	af 92       	push	r10
     858:	bf 92       	push	r11
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	2f 93       	push	r18
     868:	3f 93       	push	r19
     86a:	4f 93       	push	r20
     86c:	5f 93       	push	r21
     86e:	6f 93       	push	r22
     870:	7f 93       	push	r23
     872:	8f 93       	push	r24
     874:	9f 93       	push	r25
     876:	af 93       	push	r26
     878:	bf 93       	push	r27
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	ef 93       	push	r30
     880:	ff 93       	push	r31
     882:	a0 91 0c 05 	lds	r26, 0x050C	; 0x80050c <pxCurrentTCB>
     886:	b0 91 0d 05 	lds	r27, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     88a:	0d b6       	in	r0, 0x3d	; 61
     88c:	0d 92       	st	X+, r0
     88e:	0e b6       	in	r0, 0x3e	; 62
     890:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     892:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskIncrementTick>
     896:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     898:	0e 94 46 08 	call	0x108c	; 0x108c <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     89c:	a0 91 0c 05 	lds	r26, 0x050C	; 0x80050c <pxCurrentTCB>
     8a0:	b0 91 0d 05 	lds	r27, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     8a4:	cd 91       	ld	r28, X+
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	dd 91       	ld	r29, X+
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	ff 91       	pop	r31
     8ae:	ef 91       	pop	r30
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	bf 91       	pop	r27
     8b6:	af 91       	pop	r26
     8b8:	9f 91       	pop	r25
     8ba:	8f 91       	pop	r24
     8bc:	7f 91       	pop	r23
     8be:	6f 91       	pop	r22
     8c0:	5f 91       	pop	r21
     8c2:	4f 91       	pop	r20
     8c4:	3f 91       	pop	r19
     8c6:	2f 91       	pop	r18
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	df 90       	pop	r13
     8d2:	cf 90       	pop	r12
     8d4:	bf 90       	pop	r11
     8d6:	af 90       	pop	r10
     8d8:	9f 90       	pop	r9
     8da:	8f 90       	pop	r8
     8dc:	7f 90       	pop	r7
     8de:	6f 90       	pop	r6
     8e0:	5f 90       	pop	r5
     8e2:	4f 90       	pop	r4
     8e4:	3f 90       	pop	r3
     8e6:	2f 90       	pop	r2
     8e8:	1f 90       	pop	r1
     8ea:	0f 90       	pop	r0
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	0f 90       	pop	r0

	asm volatile ( "ret" );
     8f0:	08 95       	ret

000008f2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     8f2:	0e 94 1d 04 	call	0x83a	; 0x83a <vPortYieldFromTick>
		asm volatile ( "reti" );
     8f6:	18 95       	reti

000008f8 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     8f8:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <pxDelayedTaskList>
     8fc:	f0 91 de 04 	lds	r31, 0x04DE	; 0x8004de <pxDelayedTaskList+0x1>
     900:	80 81       	ld	r24, Z
     902:	81 11       	cpse	r24, r1
     904:	07 c0       	rjmp	.+14     	; 0x914 <prvResetNextTaskUnblockTime+0x1c>
     906:	8f ef       	ldi	r24, 0xFF	; 255
     908:	9f ef       	ldi	r25, 0xFF	; 255
     90a:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     90e:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <xNextTaskUnblockTime>
     912:	08 95       	ret
     914:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <pxDelayedTaskList>
     918:	f0 91 de 04 	lds	r31, 0x04DE	; 0x8004de <pxDelayedTaskList+0x1>
     91c:	05 80       	ldd	r0, Z+5	; 0x05
     91e:	f6 81       	ldd	r31, Z+6	; 0x06
     920:	e0 2d       	mov	r30, r0
     922:	06 80       	ldd	r0, Z+6	; 0x06
     924:	f7 81       	ldd	r31, Z+7	; 0x07
     926:	e0 2d       	mov	r30, r0
     928:	82 81       	ldd	r24, Z+2	; 0x02
     92a:	93 81       	ldd	r25, Z+3	; 0x03
     92c:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     930:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <xNextTaskUnblockTime>
     934:	08 95       	ret

00000936 <prvDeleteTCB>:
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vPortFree>
     944:	ce 01       	movw	r24, r28
     946:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vPortFree>
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <prvInitialiseNewTask>:
     950:	6f 92       	push	r6
     952:	7f 92       	push	r7
     954:	8f 92       	push	r8
     956:	9f 92       	push	r9
     958:	af 92       	push	r10
     95a:	bf 92       	push	r11
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
     96e:	4c 01       	movw	r8, r24
     970:	f5 01       	movw	r30, r10
     972:	87 89       	ldd	r24, Z+23	; 0x17
     974:	90 8d       	ldd	r25, Z+24	; 0x18
     976:	21 50       	subi	r18, 0x01	; 1
     978:	31 09       	sbc	r19, r1
     97a:	3c 01       	movw	r6, r24
     97c:	62 0e       	add	r6, r18
     97e:	73 1e       	adc	r7, r19
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	0f c0       	rjmp	.+30     	; 0x9a2 <prvInitialiseNewTask+0x52>
     984:	82 2f       	mov	r24, r18
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	fb 01       	movw	r30, r22
     98a:	e8 0f       	add	r30, r24
     98c:	f9 1f       	adc	r31, r25
     98e:	30 81       	ld	r19, Z
     990:	d5 01       	movw	r26, r10
     992:	a8 0f       	add	r26, r24
     994:	b9 1f       	adc	r27, r25
     996:	59 96       	adiw	r26, 0x19	; 25
     998:	3c 93       	st	X, r19
     99a:	80 81       	ld	r24, Z
     99c:	88 23       	and	r24, r24
     99e:	19 f0       	breq	.+6      	; 0x9a6 <prvInitialiseNewTask+0x56>
     9a0:	2f 5f       	subi	r18, 0xFF	; 255
     9a2:	28 30       	cpi	r18, 0x08	; 8
     9a4:	78 f3       	brcs	.-34     	; 0x984 <prvInitialiseNewTask+0x34>
     9a6:	f5 01       	movw	r30, r10
     9a8:	10 a2       	std	Z+32, r1	; 0x20
     9aa:	f2 e0       	ldi	r31, 0x02	; 2
     9ac:	fe 15       	cp	r31, r14
     9ae:	18 f4       	brcc	.+6      	; 0x9b6 <prvInitialiseNewTask+0x66>
     9b0:	68 94       	set
     9b2:	ee 24       	eor	r14, r14
     9b4:	e1 f8       	bld	r14, 1
     9b6:	f5 01       	movw	r30, r10
     9b8:	e6 8a       	std	Z+22, r14	; 0x16
     9ba:	e1 a2       	std	Z+33, r14	; 0x21
     9bc:	12 a2       	std	Z+34, r1	; 0x22
     9be:	c5 01       	movw	r24, r10
     9c0:	02 96       	adiw	r24, 0x02	; 2
     9c2:	0e 94 a4 02 	call	0x548	; 0x548 <vListInitialiseItem>
     9c6:	c5 01       	movw	r24, r10
     9c8:	0c 96       	adiw	r24, 0x0c	; 12
     9ca:	0e 94 a4 02 	call	0x548	; 0x548 <vListInitialiseItem>
     9ce:	f5 01       	movw	r30, r10
     9d0:	b1 86       	std	Z+9, r11	; 0x09
     9d2:	a0 86       	std	Z+8, r10	; 0x08
     9d4:	83 e0       	ldi	r24, 0x03	; 3
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	8e 19       	sub	r24, r14
     9da:	91 09       	sbc	r25, r1
     9dc:	95 87       	std	Z+13, r25	; 0x0d
     9de:	84 87       	std	Z+12, r24	; 0x0c
     9e0:	b3 8a       	std	Z+19, r11	; 0x13
     9e2:	a2 8a       	std	Z+18, r10	; 0x12
     9e4:	13 a2       	std	Z+35, r1	; 0x23
     9e6:	14 a2       	std	Z+36, r1	; 0x24
     9e8:	15 a2       	std	Z+37, r1	; 0x25
     9ea:	16 a2       	std	Z+38, r1	; 0x26
     9ec:	17 a2       	std	Z+39, r1	; 0x27
     9ee:	a8 01       	movw	r20, r16
     9f0:	b4 01       	movw	r22, r8
     9f2:	c3 01       	movw	r24, r6
     9f4:	0e 94 29 03 	call	0x652	; 0x652 <pxPortInitialiseStack>
     9f8:	f5 01       	movw	r30, r10
     9fa:	91 83       	std	Z+1, r25	; 0x01
     9fc:	80 83       	st	Z, r24
     9fe:	c1 14       	cp	r12, r1
     a00:	d1 04       	cpc	r13, r1
     a02:	19 f0       	breq	.+6      	; 0xa0a <prvInitialiseNewTask+0xba>
     a04:	f6 01       	movw	r30, r12
     a06:	b1 82       	std	Z+1, r11	; 0x01
     a08:	a0 82       	st	Z, r10
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	bf 90       	pop	r11
     a1a:	af 90       	pop	r10
     a1c:	9f 90       	pop	r9
     a1e:	8f 90       	pop	r8
     a20:	7f 90       	pop	r7
     a22:	6f 90       	pop	r6
     a24:	08 95       	ret

00000a26 <prvInitialiseTaskLists>:
     a26:	cf 93       	push	r28
     a28:	c0 e0       	ldi	r28, 0x00	; 0
     a2a:	10 c0       	rjmp	.+32     	; 0xa4c <prvInitialiseTaskLists+0x26>
     a2c:	8c 2f       	mov	r24, r28
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	9c 01       	movw	r18, r24
     a32:	22 0f       	add	r18, r18
     a34:	33 1f       	adc	r19, r19
     a36:	22 0f       	add	r18, r18
     a38:	33 1f       	adc	r19, r19
     a3a:	22 0f       	add	r18, r18
     a3c:	33 1f       	adc	r19, r19
     a3e:	82 0f       	add	r24, r18
     a40:	93 1f       	adc	r25, r19
     a42:	8f 50       	subi	r24, 0x0F	; 15
     a44:	9b 4f       	sbci	r25, 0xFB	; 251
     a46:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a4a:	cf 5f       	subi	r28, 0xFF	; 255
     a4c:	c3 30       	cpi	r28, 0x03	; 3
     a4e:	70 f3       	brcs	.-36     	; 0xa2c <prvInitialiseTaskLists+0x6>
     a50:	88 ee       	ldi	r24, 0xE8	; 232
     a52:	94 e0       	ldi	r25, 0x04	; 4
     a54:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a58:	8f ed       	ldi	r24, 0xDF	; 223
     a5a:	94 e0       	ldi	r25, 0x04	; 4
     a5c:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a60:	82 ed       	ldi	r24, 0xD2	; 210
     a62:	94 e0       	ldi	r25, 0x04	; 4
     a64:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a68:	89 ec       	ldi	r24, 0xC9	; 201
     a6a:	94 e0       	ldi	r25, 0x04	; 4
     a6c:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a70:	8f eb       	ldi	r24, 0xBF	; 191
     a72:	94 e0       	ldi	r25, 0x04	; 4
     a74:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a78:	88 ee       	ldi	r24, 0xE8	; 232
     a7a:	94 e0       	ldi	r25, 0x04	; 4
     a7c:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <pxDelayedTaskList+0x1>
     a80:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <pxDelayedTaskList>
     a84:	8f ed       	ldi	r24, 0xDF	; 223
     a86:	94 e0       	ldi	r25, 0x04	; 4
     a88:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <pxOverflowDelayedTaskList+0x1>
     a8c:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <pxOverflowDelayedTaskList>
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <prvAddNewTaskToReadyList>:
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	0f 92       	push	r0
     aa0:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <uxCurrentNumberOfTasks>
     aa4:	8f 5f       	subi	r24, 0xFF	; 255
     aa6:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <uxCurrentNumberOfTasks>
     aaa:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <pxCurrentTCB>
     aae:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     ab2:	89 2b       	or	r24, r25
     ab4:	59 f4       	brne	.+22     	; 0xacc <prvAddNewTaskToReadyList+0x38>
     ab6:	d0 93 0d 05 	sts	0x050D, r29	; 0x80050d <pxCurrentTCB+0x1>
     aba:	c0 93 0c 05 	sts	0x050C, r28	; 0x80050c <pxCurrentTCB>
     abe:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <uxCurrentNumberOfTasks>
     ac2:	81 30       	cpi	r24, 0x01	; 1
     ac4:	99 f4       	brne	.+38     	; 0xaec <prvAddNewTaskToReadyList+0x58>
     ac6:	0e 94 13 05 	call	0xa26	; 0xa26 <prvInitialiseTaskLists>
     aca:	10 c0       	rjmp	.+32     	; 0xaec <prvAddNewTaskToReadyList+0x58>
     acc:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <xSchedulerRunning>
     ad0:	81 11       	cpse	r24, r1
     ad2:	0c c0       	rjmp	.+24     	; 0xaec <prvAddNewTaskToReadyList+0x58>
     ad4:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <pxCurrentTCB>
     ad8:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     adc:	96 89       	ldd	r25, Z+22	; 0x16
     ade:	8e 89       	ldd	r24, Y+22	; 0x16
     ae0:	89 17       	cp	r24, r25
     ae2:	20 f0       	brcs	.+8      	; 0xaec <prvAddNewTaskToReadyList+0x58>
     ae4:	d0 93 0d 05 	sts	0x050D, r29	; 0x80050d <pxCurrentTCB+0x1>
     ae8:	c0 93 0c 05 	sts	0x050C, r28	; 0x80050c <pxCurrentTCB>
     aec:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <uxTaskNumber>
     af0:	8f 5f       	subi	r24, 0xFF	; 255
     af2:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <uxTaskNumber>
     af6:	8e 89       	ldd	r24, Y+22	; 0x16
     af8:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <uxTopReadyPriority>
     afc:	98 17       	cp	r25, r24
     afe:	10 f4       	brcc	.+4      	; 0xb04 <prvAddNewTaskToReadyList+0x70>
     b00:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <uxTopReadyPriority>
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	9c 01       	movw	r18, r24
     b08:	22 0f       	add	r18, r18
     b0a:	33 1f       	adc	r19, r19
     b0c:	22 0f       	add	r18, r18
     b0e:	33 1f       	adc	r19, r19
     b10:	22 0f       	add	r18, r18
     b12:	33 1f       	adc	r19, r19
     b14:	82 0f       	add	r24, r18
     b16:	93 1f       	adc	r25, r19
     b18:	be 01       	movw	r22, r28
     b1a:	6e 5f       	subi	r22, 0xFE	; 254
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	8f 50       	subi	r24, 0x0F	; 15
     b20:	9b 4f       	sbci	r25, 0xFB	; 251
     b22:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <xSchedulerRunning>
     b2e:	88 23       	and	r24, r24
     b30:	51 f0       	breq	.+20     	; 0xb46 <prvAddNewTaskToReadyList+0xb2>
     b32:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <pxCurrentTCB>
     b36:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     b3a:	96 89       	ldd	r25, Z+22	; 0x16
     b3c:	8e 89       	ldd	r24, Y+22	; 0x16
     b3e:	98 17       	cp	r25, r24
     b40:	10 f4       	brcc	.+4      	; 0xb46 <prvAddNewTaskToReadyList+0xb2>
     b42:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <prvAddCurrentTaskToDelayedList>:
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	ec 01       	movw	r28, r24
     b58:	f6 2e       	mov	r15, r22
     b5a:	00 91 bc 04 	lds	r16, 0x04BC	; 0x8004bc <xTickCount>
     b5e:	10 91 bd 04 	lds	r17, 0x04BD	; 0x8004bd <xTickCount+0x1>
     b62:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <pxCurrentTCB>
     b66:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     b6a:	02 96       	adiw	r24, 0x02	; 2
     b6c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     b70:	cf 3f       	cpi	r28, 0xFF	; 255
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	d8 07       	cpc	r29, r24
     b76:	69 f4       	brne	.+26     	; 0xb92 <prvAddCurrentTaskToDelayedList+0x46>
     b78:	ff 20       	and	r15, r15
     b7a:	59 f0       	breq	.+22     	; 0xb92 <prvAddCurrentTaskToDelayedList+0x46>
     b7c:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <pxCurrentTCB>
     b80:	70 91 0d 05 	lds	r23, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     b84:	6e 5f       	subi	r22, 0xFE	; 254
     b86:	7f 4f       	sbci	r23, 0xFF	; 255
     b88:	8f eb       	ldi	r24, 0xBF	; 191
     b8a:	94 e0       	ldi	r25, 0x04	; 4
     b8c:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     b90:	2f c0       	rjmp	.+94     	; 0xbf0 <prvAddCurrentTaskToDelayedList+0xa4>
     b92:	c0 0f       	add	r28, r16
     b94:	d1 1f       	adc	r29, r17
     b96:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <pxCurrentTCB>
     b9a:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     b9e:	d3 83       	std	Z+3, r29	; 0x03
     ba0:	c2 83       	std	Z+2, r28	; 0x02
     ba2:	c0 17       	cp	r28, r16
     ba4:	d1 07       	cpc	r29, r17
     ba6:	68 f4       	brcc	.+26     	; 0xbc2 <prvAddCurrentTaskToDelayedList+0x76>
     ba8:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <pxCurrentTCB>
     bac:	70 91 0d 05 	lds	r23, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     bb0:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <pxOverflowDelayedTaskList>
     bb4:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <pxOverflowDelayedTaskList+0x1>
     bb8:	6e 5f       	subi	r22, 0xFE	; 254
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 c9 02 	call	0x592	; 0x592 <vListInsert>
     bc0:	17 c0       	rjmp	.+46     	; 0xbf0 <prvAddCurrentTaskToDelayedList+0xa4>
     bc2:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <pxCurrentTCB>
     bc6:	70 91 0d 05 	lds	r23, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     bca:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <pxDelayedTaskList>
     bce:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <pxDelayedTaskList+0x1>
     bd2:	6e 5f       	subi	r22, 0xFE	; 254
     bd4:	7f 4f       	sbci	r23, 0xFF	; 255
     bd6:	0e 94 c9 02 	call	0x592	; 0x592 <vListInsert>
     bda:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <xNextTaskUnblockTime>
     bde:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     be2:	c8 17       	cp	r28, r24
     be4:	d9 07       	cpc	r29, r25
     be6:	20 f4       	brcc	.+8      	; 0xbf0 <prvAddCurrentTaskToDelayedList+0xa4>
     be8:	d0 93 b5 04 	sts	0x04B5, r29	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     bec:	c0 93 b4 04 	sts	0x04B4, r28	; 0x8004b4 <xNextTaskUnblockTime>
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	08 95       	ret

00000bfc <xTaskCreate>:
     bfc:	2f 92       	push	r2
     bfe:	3f 92       	push	r3
     c00:	4f 92       	push	r4
     c02:	5f 92       	push	r5
     c04:	6f 92       	push	r6
     c06:	7f 92       	push	r7
     c08:	8f 92       	push	r8
     c0a:	9f 92       	push	r9
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	3c 01       	movw	r6, r24
     c22:	1b 01       	movw	r2, r22
     c24:	5a 01       	movw	r10, r20
     c26:	29 01       	movw	r4, r18
     c28:	ca 01       	movw	r24, r20
     c2a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <pvPortMalloc>
     c2e:	6c 01       	movw	r12, r24
     c30:	89 2b       	or	r24, r25
     c32:	71 f0       	breq	.+28     	; 0xc50 <xTaskCreate+0x54>
     c34:	88 e2       	ldi	r24, 0x28	; 40
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 e7 01 	call	0x3ce	; 0x3ce <pvPortMalloc>
     c3c:	ec 01       	movw	r28, r24
     c3e:	89 2b       	or	r24, r25
     c40:	19 f0       	breq	.+6      	; 0xc48 <xTaskCreate+0x4c>
     c42:	d8 8e       	std	Y+24, r13	; 0x18
     c44:	cf 8a       	std	Y+23, r12	; 0x17
     c46:	06 c0       	rjmp	.+12     	; 0xc54 <xTaskCreate+0x58>
     c48:	c6 01       	movw	r24, r12
     c4a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vPortFree>
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <xTaskCreate+0x58>
     c50:	c0 e0       	ldi	r28, 0x00	; 0
     c52:	d0 e0       	ldi	r29, 0x00	; 0
     c54:	20 97       	sbiw	r28, 0x00	; 0
     c56:	91 f0       	breq	.+36     	; 0xc7c <xTaskCreate+0x80>
     c58:	95 01       	movw	r18, r10
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	81 2c       	mov	r8, r1
     c60:	91 2c       	mov	r9, r1
     c62:	5e 01       	movw	r10, r28
     c64:	67 01       	movw	r12, r14
     c66:	e0 2e       	mov	r14, r16
     c68:	82 01       	movw	r16, r4
     c6a:	b1 01       	movw	r22, r2
     c6c:	c3 01       	movw	r24, r6
     c6e:	0e 94 a8 04 	call	0x950	; 0x950 <prvInitialiseNewTask>
     c72:	ce 01       	movw	r24, r28
     c74:	0e 94 4a 05 	call	0xa94	; 0xa94 <prvAddNewTaskToReadyList>
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <xTaskCreate+0x82>
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	df 90       	pop	r13
     c8c:	cf 90       	pop	r12
     c8e:	bf 90       	pop	r11
     c90:	af 90       	pop	r10
     c92:	9f 90       	pop	r9
     c94:	8f 90       	pop	r8
     c96:	7f 90       	pop	r7
     c98:	6f 90       	pop	r6
     c9a:	5f 90       	pop	r5
     c9c:	4f 90       	pop	r4
     c9e:	3f 90       	pop	r3
     ca0:	2f 90       	pop	r2
     ca2:	08 95       	ret

00000ca4 <vTaskDelete>:
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	ec 01       	movw	r28, r24
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	0f 92       	push	r0
     cb4:	89 2b       	or	r24, r25
     cb6:	21 f4       	brne	.+8      	; 0xcc0 <vTaskDelete+0x1c>
     cb8:	c0 91 0c 05 	lds	r28, 0x050C	; 0x80050c <pxCurrentTCB>
     cbc:	d0 91 0d 05 	lds	r29, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     cc0:	8e 01       	movw	r16, r28
     cc2:	0e 5f       	subi	r16, 0xFE	; 254
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
     cc6:	c8 01       	movw	r24, r16
     cc8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     ccc:	8c 89       	ldd	r24, Y+20	; 0x14
     cce:	9d 89       	ldd	r25, Y+21	; 0x15
     cd0:	89 2b       	or	r24, r25
     cd2:	21 f0       	breq	.+8      	; 0xcdc <vTaskDelete+0x38>
     cd4:	ce 01       	movw	r24, r28
     cd6:	0c 96       	adiw	r24, 0x0c	; 12
     cd8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     cdc:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <uxTaskNumber>
     ce0:	8f 5f       	subi	r24, 0xFF	; 255
     ce2:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <uxTaskNumber>
     ce6:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <pxCurrentTCB>
     cea:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     cee:	c8 17       	cp	r28, r24
     cf0:	d9 07       	cpc	r29, r25
     cf2:	59 f4       	brne	.+22     	; 0xd0a <vTaskDelete+0x66>
     cf4:	b8 01       	movw	r22, r16
     cf6:	89 ec       	ldi	r24, 0xC9	; 201
     cf8:	94 e0       	ldi	r25, 0x04	; 4
     cfa:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     cfe:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <uxDeletedTasksWaitingCleanUp>
     d02:	8f 5f       	subi	r24, 0xFF	; 255
     d04:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <uxDeletedTasksWaitingCleanUp>
     d08:	0a c0       	rjmp	.+20     	; 0xd1e <vTaskDelete+0x7a>
     d0a:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <uxCurrentNumberOfTasks>
     d0e:	81 50       	subi	r24, 0x01	; 1
     d10:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <uxCurrentNumberOfTasks>
     d14:	ce 01       	movw	r24, r28
     d16:	0e 94 9b 04 	call	0x936	; 0x936 <prvDeleteTCB>
     d1a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <prvResetNextTaskUnblockTime>
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <xSchedulerRunning>
     d26:	88 23       	and	r24, r24
     d28:	49 f0       	breq	.+18     	; 0xd3c <vTaskDelete+0x98>
     d2a:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <pxCurrentTCB>
     d2e:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     d32:	c8 17       	cp	r28, r24
     d34:	d9 07       	cpc	r29, r25
     d36:	11 f4       	brne	.+4      	; 0xd3c <vTaskDelete+0x98>
     d38:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	08 95       	ret

00000d46 <vTaskStartScheduler>:
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	0f 2e       	mov	r0, r31
     d4e:	f2 eb       	ldi	r31, 0xB2	; 178
     d50:	ef 2e       	mov	r14, r31
     d52:	f4 e0       	ldi	r31, 0x04	; 4
     d54:	ff 2e       	mov	r15, r31
     d56:	f0 2d       	mov	r31, r0
     d58:	00 e0       	ldi	r16, 0x00	; 0
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	40 e5       	ldi	r20, 0x50	; 80
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	62 e6       	ldi	r22, 0x62	; 98
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	83 e4       	ldi	r24, 0x43	; 67
     d68:	98 e0       	ldi	r25, 0x08	; 8
     d6a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <xTaskCreate>
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	81 f4       	brne	.+32     	; 0xd92 <vTaskStartScheduler+0x4c>
     d72:	f8 94       	cli
     d74:	8f ef       	ldi	r24, 0xFF	; 255
     d76:	9f ef       	ldi	r25, 0xFF	; 255
     d78:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     d7c:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <xNextTaskUnblockTime>
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <xSchedulerRunning>
     d86:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <xTickCount+0x1>
     d8a:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <xTickCount>
     d8e:	0e 94 95 03 	call	0x72a	; 0x72a <xPortStartScheduler>
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	08 95       	ret

00000d9a <vTaskSuspendAll>:
     d9a:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <uxSchedulerSuspended>
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <uxSchedulerSuspended>
     da4:	08 95       	ret

00000da6 <xTaskIncrementTick>:
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <uxSchedulerSuspended>
     db8:	81 11       	cpse	r24, r1
     dba:	97 c0       	rjmp	.+302    	; 0xeea <xTaskIncrementTick+0x144>
     dbc:	e0 90 bc 04 	lds	r14, 0x04BC	; 0x8004bc <xTickCount>
     dc0:	f0 90 bd 04 	lds	r15, 0x04BD	; 0x8004bd <xTickCount+0x1>
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	e8 1a       	sub	r14, r24
     dc8:	f8 0a       	sbc	r15, r24
     dca:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <xTickCount+0x1>
     dce:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <xTickCount>
     dd2:	e1 14       	cp	r14, r1
     dd4:	f1 04       	cpc	r15, r1
     dd6:	b9 f4       	brne	.+46     	; 0xe06 <xTaskIncrementTick+0x60>
     dd8:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <pxDelayedTaskList>
     ddc:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <pxDelayedTaskList+0x1>
     de0:	20 91 db 04 	lds	r18, 0x04DB	; 0x8004db <pxOverflowDelayedTaskList>
     de4:	30 91 dc 04 	lds	r19, 0x04DC	; 0x8004dc <pxOverflowDelayedTaskList+0x1>
     de8:	30 93 de 04 	sts	0x04DE, r19	; 0x8004de <pxDelayedTaskList+0x1>
     dec:	20 93 dd 04 	sts	0x04DD, r18	; 0x8004dd <pxDelayedTaskList>
     df0:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <pxOverflowDelayedTaskList+0x1>
     df4:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <pxOverflowDelayedTaskList>
     df8:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <xNumOfOverflows>
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <xNumOfOverflows>
     e02:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <prvResetNextTaskUnblockTime>
     e06:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <xNextTaskUnblockTime>
     e0a:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     e0e:	e8 16       	cp	r14, r24
     e10:	f9 06       	cpc	r15, r25
     e12:	28 f4       	brcc	.+10     	; 0xe1e <xTaskIncrementTick+0x78>
     e14:	d1 2c       	mov	r13, r1
     e16:	53 c0       	rjmp	.+166    	; 0xebe <xTaskIncrementTick+0x118>
     e18:	dd 24       	eor	r13, r13
     e1a:	d3 94       	inc	r13
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <xTaskIncrementTick+0x7a>
     e1e:	d1 2c       	mov	r13, r1
     e20:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <pxDelayedTaskList>
     e24:	f0 91 de 04 	lds	r31, 0x04DE	; 0x8004de <pxDelayedTaskList+0x1>
     e28:	80 81       	ld	r24, Z
     e2a:	81 11       	cpse	r24, r1
     e2c:	07 c0       	rjmp	.+14     	; 0xe3c <xTaskIncrementTick+0x96>
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	9f ef       	ldi	r25, 0xFF	; 255
     e32:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     e36:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <xNextTaskUnblockTime>
     e3a:	41 c0       	rjmp	.+130    	; 0xebe <xTaskIncrementTick+0x118>
     e3c:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <pxDelayedTaskList>
     e40:	f0 91 de 04 	lds	r31, 0x04DE	; 0x8004de <pxDelayedTaskList+0x1>
     e44:	05 80       	ldd	r0, Z+5	; 0x05
     e46:	f6 81       	ldd	r31, Z+6	; 0x06
     e48:	e0 2d       	mov	r30, r0
     e4a:	c6 81       	ldd	r28, Z+6	; 0x06
     e4c:	d7 81       	ldd	r29, Z+7	; 0x07
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	9b 81       	ldd	r25, Y+3	; 0x03
     e52:	e8 16       	cp	r14, r24
     e54:	f9 06       	cpc	r15, r25
     e56:	28 f4       	brcc	.+10     	; 0xe62 <xTaskIncrementTick+0xbc>
     e58:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     e5c:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <xNextTaskUnblockTime>
     e60:	2e c0       	rjmp	.+92     	; 0xebe <xTaskIncrementTick+0x118>
     e62:	8e 01       	movw	r16, r28
     e64:	0e 5f       	subi	r16, 0xFE	; 254
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	c8 01       	movw	r24, r16
     e6a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     e6e:	8c 89       	ldd	r24, Y+20	; 0x14
     e70:	9d 89       	ldd	r25, Y+21	; 0x15
     e72:	89 2b       	or	r24, r25
     e74:	21 f0       	breq	.+8      	; 0xe7e <xTaskIncrementTick+0xd8>
     e76:	ce 01       	movw	r24, r28
     e78:	0c 96       	adiw	r24, 0x0c	; 12
     e7a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     e7e:	8e 89       	ldd	r24, Y+22	; 0x16
     e80:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <uxTopReadyPriority>
     e84:	98 17       	cp	r25, r24
     e86:	10 f4       	brcc	.+4      	; 0xe8c <xTaskIncrementTick+0xe6>
     e88:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <uxTopReadyPriority>
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	9c 01       	movw	r18, r24
     e90:	22 0f       	add	r18, r18
     e92:	33 1f       	adc	r19, r19
     e94:	22 0f       	add	r18, r18
     e96:	33 1f       	adc	r19, r19
     e98:	22 0f       	add	r18, r18
     e9a:	33 1f       	adc	r19, r19
     e9c:	82 0f       	add	r24, r18
     e9e:	93 1f       	adc	r25, r19
     ea0:	b8 01       	movw	r22, r16
     ea2:	8f 50       	subi	r24, 0x0F	; 15
     ea4:	9b 4f       	sbci	r25, 0xFB	; 251
     ea6:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     eaa:	9e 89       	ldd	r25, Y+22	; 0x16
     eac:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <pxCurrentTCB>
     eb0:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     eb4:	86 89       	ldd	r24, Z+22	; 0x16
     eb6:	98 17       	cp	r25, r24
     eb8:	08 f0       	brcs	.+2      	; 0xebc <xTaskIncrementTick+0x116>
     eba:	ae cf       	rjmp	.-164    	; 0xe18 <xTaskIncrementTick+0x72>
     ebc:	b1 cf       	rjmp	.-158    	; 0xe20 <xTaskIncrementTick+0x7a>
     ebe:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <pxCurrentTCB>
     ec2:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     ec6:	86 89       	ldd	r24, Z+22	; 0x16
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	fc 01       	movw	r30, r24
     ecc:	ee 0f       	add	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	ee 0f       	add	r30, r30
     ed6:	ff 1f       	adc	r31, r31
     ed8:	8e 0f       	add	r24, r30
     eda:	9f 1f       	adc	r25, r31
     edc:	fc 01       	movw	r30, r24
     ede:	ef 50       	subi	r30, 0x0F	; 15
     ee0:	fb 4f       	sbci	r31, 0xFB	; 251
     ee2:	80 81       	ld	r24, Z
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	40 f4       	brcc	.+16     	; 0xef8 <xTaskIncrementTick+0x152>
     ee8:	09 c0       	rjmp	.+18     	; 0xefc <xTaskIncrementTick+0x156>
     eea:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <uxPendedTicks>
     eee:	8f 5f       	subi	r24, 0xFF	; 255
     ef0:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <uxPendedTicks>
     ef4:	d1 2c       	mov	r13, r1
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <xTaskIncrementTick+0x156>
     ef8:	dd 24       	eor	r13, r13
     efa:	d3 94       	inc	r13
     efc:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <xYieldPending>
     f00:	88 23       	and	r24, r24
     f02:	11 f0       	breq	.+4      	; 0xf08 <xTaskIncrementTick+0x162>
     f04:	dd 24       	eor	r13, r13
     f06:	d3 94       	inc	r13
     f08:	8d 2d       	mov	r24, r13
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	df 90       	pop	r13
     f18:	08 95       	ret

00000f1a <xTaskResumeAll>:
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	0f 92       	push	r0
     f28:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <uxSchedulerSuspended>
     f2c:	81 50       	subi	r24, 0x01	; 1
     f2e:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <uxSchedulerSuspended>
     f32:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <uxSchedulerSuspended>
     f36:	81 11       	cpse	r24, r1
     f38:	58 c0       	rjmp	.+176    	; 0xfea <xTaskResumeAll+0xd0>
     f3a:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <uxCurrentNumberOfTasks>
     f3e:	81 11       	cpse	r24, r1
     f40:	33 c0       	rjmp	.+102    	; 0xfa8 <xTaskResumeAll+0x8e>
     f42:	56 c0       	rjmp	.+172    	; 0xff0 <xTaskResumeAll+0xd6>
     f44:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <xPendingReadyList+0x5>
     f48:	f0 91 d8 04 	lds	r31, 0x04D8	; 0x8004d8 <xPendingReadyList+0x6>
     f4c:	c6 81       	ldd	r28, Z+6	; 0x06
     f4e:	d7 81       	ldd	r29, Z+7	; 0x07
     f50:	ce 01       	movw	r24, r28
     f52:	0c 96       	adiw	r24, 0x0c	; 12
     f54:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     f58:	8e 01       	movw	r16, r28
     f5a:	0e 5f       	subi	r16, 0xFE	; 254
     f5c:	1f 4f       	sbci	r17, 0xFF	; 255
     f5e:	c8 01       	movw	r24, r16
     f60:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     f64:	8e 89       	ldd	r24, Y+22	; 0x16
     f66:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <uxTopReadyPriority>
     f6a:	98 17       	cp	r25, r24
     f6c:	10 f4       	brcc	.+4      	; 0xf72 <xTaskResumeAll+0x58>
     f6e:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <uxTopReadyPriority>
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9c 01       	movw	r18, r24
     f76:	22 0f       	add	r18, r18
     f78:	33 1f       	adc	r19, r19
     f7a:	22 0f       	add	r18, r18
     f7c:	33 1f       	adc	r19, r19
     f7e:	22 0f       	add	r18, r18
     f80:	33 1f       	adc	r19, r19
     f82:	82 0f       	add	r24, r18
     f84:	93 1f       	adc	r25, r19
     f86:	b8 01       	movw	r22, r16
     f88:	8f 50       	subi	r24, 0x0F	; 15
     f8a:	9b 4f       	sbci	r25, 0xFB	; 251
     f8c:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     f90:	9e 89       	ldd	r25, Y+22	; 0x16
     f92:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <pxCurrentTCB>
     f96:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <pxCurrentTCB+0x1>
     f9a:	86 89       	ldd	r24, Z+22	; 0x16
     f9c:	98 17       	cp	r25, r24
     f9e:	30 f0       	brcs	.+12     	; 0xfac <xTaskResumeAll+0x92>
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <xYieldPending>
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <xTaskResumeAll+0x92>
     fa8:	c0 e0       	ldi	r28, 0x00	; 0
     faa:	d0 e0       	ldi	r29, 0x00	; 0
     fac:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <xPendingReadyList>
     fb0:	81 11       	cpse	r24, r1
     fb2:	c8 cf       	rjmp	.-112    	; 0xf44 <xTaskResumeAll+0x2a>
     fb4:	cd 2b       	or	r28, r29
     fb6:	11 f0       	breq	.+4      	; 0xfbc <xTaskResumeAll+0xa2>
     fb8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <prvResetNextTaskUnblockTime>
     fbc:	c0 91 b9 04 	lds	r28, 0x04B9	; 0x8004b9 <uxPendedTicks>
     fc0:	cc 23       	and	r28, r28
     fc2:	59 f0       	breq	.+22     	; 0xfda <xTaskResumeAll+0xc0>
     fc4:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskIncrementTick>
     fc8:	88 23       	and	r24, r24
     fca:	19 f0       	breq	.+6      	; 0xfd2 <xTaskResumeAll+0xb8>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <xYieldPending>
     fd2:	c1 50       	subi	r28, 0x01	; 1
     fd4:	b9 f7       	brne	.-18     	; 0xfc4 <xTaskResumeAll+0xaa>
     fd6:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <uxPendedTicks>
     fda:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <xYieldPending>
     fde:	88 23       	and	r24, r24
     fe0:	31 f0       	breq	.+12     	; 0xfee <xTaskResumeAll+0xd4>
     fe2:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <xTaskResumeAll+0xd6>
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <xTaskResumeAll+0xd6>
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1004:	89 2b       	or	r24, r25
    1006:	49 f0       	breq	.+18     	; 0x101a <vTaskDelay+0x1c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    1008:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	ce 01       	movw	r24, r28
    1010:	0e 94 a6 05 	call	0xb4c	; 0xb4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1014:	0e 94 8d 07 	call	0xf1a	; 0xf1a <xTaskResumeAll>
    1018:	01 c0       	rjmp	.+2      	; 0x101c <vTaskDelay+0x1e>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
    101a:	80 e0       	ldi	r24, 0x00	; 0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    101c:	81 11       	cpse	r24, r1
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <vTaskDelay+0x26>
		{
			portYIELD_WITHIN_API();
    1020:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    102e:	24 c0       	rjmp	.+72     	; 0x1078 <prvCheckTasksWaitingTermination+0x4e>
		{
			vTaskSuspendAll();
    1030:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1034:	c0 91 c9 04 	lds	r28, 0x04C9	; 0x8004c9 <xTasksWaitingTermination>
			}
			( void ) xTaskResumeAll();
    1038:	0e 94 8d 07 	call	0xf1a	; 0xf1a <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    103c:	cc 23       	and	r28, r28
    103e:	e1 f0       	breq	.+56     	; 0x1078 <prvCheckTasksWaitingTermination+0x4e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1046:	e0 91 ce 04 	lds	r30, 0x04CE	; 0x8004ce <xTasksWaitingTermination+0x5>
    104a:	f0 91 cf 04 	lds	r31, 0x04CF	; 0x8004cf <xTasksWaitingTermination+0x6>
    104e:	c6 81       	ldd	r28, Z+6	; 0x06
    1050:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1052:	ce 01       	movw	r24, r28
    1054:	02 96       	adiw	r24, 0x02	; 2
    1056:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
					--uxCurrentNumberOfTasks;
    105a:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <uxCurrentNumberOfTasks>
    105e:	81 50       	subi	r24, 0x01	; 1
    1060:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <uxCurrentNumberOfTasks>
					--uxDeletedTasksWaitingCleanUp;
    1064:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <uxDeletedTasksWaitingCleanUp>
    1068:	81 50       	subi	r24, 0x01	; 1
    106a:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <uxDeletedTasksWaitingCleanUp>
				}
				taskEXIT_CRITICAL();
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    1072:	ce 01       	movw	r24, r28
    1074:	0e 94 9b 04 	call	0x936	; 0x936 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1078:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <uxDeletedTasksWaitingCleanUp>
    107c:	81 11       	cpse	r24, r1
    107e:	d8 cf       	rjmp	.-80     	; 0x1030 <prvCheckTasksWaitingTermination+0x6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <prvIdleTask>:

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    1086:	0e 94 15 08 	call	0x102a	; 0x102a <prvCheckTasksWaitingTermination>
    108a:	fd cf       	rjmp	.-6      	; 0x1086 <prvIdleTask>

0000108c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    108c:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <uxSchedulerSuspended>
    1090:	88 23       	and	r24, r24
    1092:	21 f0       	breq	.+8      	; 0x109c <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <xYieldPending>
    109a:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    109c:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    10a0:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <uxTopReadyPriority>
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <vTaskSwitchContext+0x1c>
    10a6:	21 50       	subi	r18, 0x01	; 1
    10a8:	82 2f       	mov	r24, r18
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	fc 01       	movw	r30, r24
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	e8 0f       	add	r30, r24
    10bc:	f9 1f       	adc	r31, r25
    10be:	ef 50       	subi	r30, 0x0F	; 15
    10c0:	fb 4f       	sbci	r31, 0xFB	; 251
    10c2:	30 81       	ld	r19, Z
    10c4:	33 23       	and	r19, r19
    10c6:	79 f3       	breq	.-34     	; 0x10a6 <vTaskSwitchContext+0x1a>
    10c8:	ac 01       	movw	r20, r24
    10ca:	44 0f       	add	r20, r20
    10cc:	55 1f       	adc	r21, r21
    10ce:	44 0f       	add	r20, r20
    10d0:	55 1f       	adc	r21, r21
    10d2:	44 0f       	add	r20, r20
    10d4:	55 1f       	adc	r21, r21
    10d6:	48 0f       	add	r20, r24
    10d8:	59 1f       	adc	r21, r25
    10da:	df 01       	movw	r26, r30
    10dc:	01 80       	ldd	r0, Z+1	; 0x01
    10de:	f2 81       	ldd	r31, Z+2	; 0x02
    10e0:	e0 2d       	mov	r30, r0
    10e2:	02 80       	ldd	r0, Z+2	; 0x02
    10e4:	f3 81       	ldd	r31, Z+3	; 0x03
    10e6:	e0 2d       	mov	r30, r0
    10e8:	12 96       	adiw	r26, 0x02	; 2
    10ea:	fc 93       	st	X, r31
    10ec:	ee 93       	st	-X, r30
    10ee:	11 97       	sbiw	r26, 0x01	; 1
    10f0:	4c 50       	subi	r20, 0x0C	; 12
    10f2:	5b 4f       	sbci	r21, 0xFB	; 251
    10f4:	e4 17       	cp	r30, r20
    10f6:	f5 07       	cpc	r31, r21
    10f8:	29 f4       	brne	.+10     	; 0x1104 <vTaskSwitchContext+0x78>
    10fa:	42 81       	ldd	r20, Z+2	; 0x02
    10fc:	53 81       	ldd	r21, Z+3	; 0x03
    10fe:	fd 01       	movw	r30, r26
    1100:	52 83       	std	Z+2, r21	; 0x02
    1102:	41 83       	std	Z+1, r20	; 0x01
    1104:	fc 01       	movw	r30, r24
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	ee 0f       	add	r30, r30
    110c:	ff 1f       	adc	r31, r31
    110e:	ee 0f       	add	r30, r30
    1110:	ff 1f       	adc	r31, r31
    1112:	8e 0f       	add	r24, r30
    1114:	9f 1f       	adc	r25, r31
    1116:	fc 01       	movw	r30, r24
    1118:	ef 50       	subi	r30, 0x0F	; 15
    111a:	fb 4f       	sbci	r31, 0xFB	; 251
    111c:	01 80       	ldd	r0, Z+1	; 0x01
    111e:	f2 81       	ldd	r31, Z+2	; 0x02
    1120:	e0 2d       	mov	r30, r0
    1122:	86 81       	ldd	r24, Z+6	; 0x06
    1124:	97 81       	ldd	r25, Z+7	; 0x07
    1126:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <pxCurrentTCB+0x1>
    112a:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <pxCurrentTCB>
    112e:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <uxTopReadyPriority>
    1132:	08 95       	ret

00001134 <LCD_voidSendLowerNibble>:
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	00 d0       	rcall	.+0      	; 0x113e <LCD_voidSendLowerNibble+0xa>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <LCD_voidSendLowerNibble+0xc>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	08 2f       	mov	r16, r24
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	85 e0       	ldi	r24, 0x05	; 5
    114c:	8a 83       	std	Y+2, r24	; 0x02
    114e:	86 e0       	ldi	r24, 0x06	; 6
    1150:	8b 83       	std	Y+3, r24	; 0x03
    1152:	87 e0       	ldi	r24, 0x07	; 7
    1154:	8c 83       	std	Y+4, r24	; 0x04
    1156:	10 e0       	ldi	r17, 0x00	; 0
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <LCD_voidSendLowerNibble+0x4e>
    115a:	40 2f       	mov	r20, r16
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	01 2e       	mov	r0, r17
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <LCD_voidSendLowerNibble+0x32>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <LCD_voidSendLowerNibble+0x2e>
    116a:	41 70       	andi	r20, 0x01	; 1
    116c:	e1 e0       	ldi	r30, 0x01	; 1
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	ec 0f       	add	r30, r28
    1172:	fd 1f       	adc	r31, r29
    1174:	e1 0f       	add	r30, r17
    1176:	f1 1d       	adc	r31, r1
    1178:	60 81       	ld	r22, Z
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1180:	1f 5f       	subi	r17, 0xFF	; 255
    1182:	14 30       	cpi	r17, 0x04	; 4
    1184:	50 f3       	brcs	.-44     	; 0x115a <LCD_voidSendLowerNibble+0x26>
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	08 95       	ret

00001198 <LCD_voidSetEnable>:
    1198:	41 e0       	ldi	r20, 0x01	; 1
    119a:	63 e0       	ldi	r22, 0x03	; 3
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    11a2:	8f e3       	ldi	r24, 0x3F	; 63
    11a4:	9f e1       	ldi	r25, 0x1F	; 31
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <LCD_voidSetEnable+0xe>
    11aa:	00 c0       	rjmp	.+0      	; 0x11ac <LCD_voidSetEnable+0x14>
    11ac:	00 00       	nop
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	63 e0       	ldi	r22, 0x03	; 3
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    11b8:	08 95       	ret

000011ba <LCD_voidSendCommand>:
    11ba:	cf 93       	push	r28
    11bc:	c8 2f       	mov	r28, r24
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	62 e0       	ldi	r22, 0x02	; 2
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    11d2:	8c 2f       	mov	r24, r28
    11d4:	82 95       	swap	r24
    11d6:	8f 70       	andi	r24, 0x0F	; 15
    11d8:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_voidSendLowerNibble>
    11dc:	0e 94 cc 08 	call	0x1198	; 0x1198 <LCD_voidSetEnable>
    11e0:	8c 2f       	mov	r24, r28
    11e2:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_voidSendLowerNibble>
    11e6:	0e 94 cc 08 	call	0x1198	; 0x1198 <LCD_voidSetEnable>
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <LCD_voidSendData>:
    11ee:	cf 93       	push	r28
    11f0:	c8 2f       	mov	r28, r24
    11f2:	41 e0       	ldi	r20, 0x01	; 1
    11f4:	61 e0       	ldi	r22, 0x01	; 1
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	62 e0       	ldi	r22, 0x02	; 2
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1206:	8c 2f       	mov	r24, r28
    1208:	82 95       	swap	r24
    120a:	8f 70       	andi	r24, 0x0F	; 15
    120c:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_voidSendLowerNibble>
    1210:	0e 94 cc 08 	call	0x1198	; 0x1198 <LCD_voidSetEnable>
    1214:	8c 2f       	mov	r24, r28
    1216:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_voidSendLowerNibble>
    121a:	0e 94 cc 08 	call	0x1198	; 0x1198 <LCD_voidSetEnable>
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret

00001222 <LCD_voidInit>:
    1222:	2f ef       	ldi	r18, 0xFF	; 255
    1224:	83 ef       	ldi	r24, 0xF3	; 243
    1226:	91 e0       	ldi	r25, 0x01	; 1
    1228:	21 50       	subi	r18, 0x01	; 1
    122a:	80 40       	sbci	r24, 0x00	; 0
    122c:	90 40       	sbci	r25, 0x00	; 0
    122e:	e1 f7       	brne	.-8      	; 0x1228 <LCD_voidInit+0x6>
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <LCD_voidInit+0x10>
    1232:	00 00       	nop
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_voidSendLowerNibble>
    123a:	0e 94 cc 08 	call	0x1198	; 0x1198 <LCD_voidSetEnable>
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_voidSendLowerNibble>
    1244:	0e 94 cc 08 	call	0x1198	; 0x1198 <LCD_voidSetEnable>
    1248:	88 e0       	ldi	r24, 0x08	; 8
    124a:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_voidSendLowerNibble>
    124e:	0e 94 cc 08 	call	0x1198	; 0x1198 <LCD_voidSetEnable>
    1252:	8c e0       	ldi	r24, 0x0C	; 12
    1254:	0e 94 dd 08 	call	0x11ba	; 0x11ba <LCD_voidSendCommand>
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <LCD_voidSendCommand>
    125e:	08 95       	ret

00001260 <LCD_voidSendString>:
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	ec 01       	movw	r28, r24
    1266:	03 c0       	rjmp	.+6      	; 0x126e <LCD_voidSendString+0xe>
    1268:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCD_voidSendData>
    126c:	21 96       	adiw	r28, 0x01	; 1
    126e:	88 81       	ld	r24, Y
    1270:	81 11       	cpse	r24, r1
    1272:	fa cf       	rjmp	.-12     	; 0x1268 <LCD_voidSendString+0x8>
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	08 95       	ret

0000127a <LCD_voidSendNum>:
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	2e 97       	sbiw	r28, 0x0e	; 14
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	ac 01       	movw	r20, r24
    1292:	89 2b       	or	r24, r25
    1294:	d1 f5       	brne	.+116    	; 0x130a <LCD_voidSendNum+0x90>
    1296:	80 e3       	ldi	r24, 0x30	; 48
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	11 e0       	ldi	r17, 0x01	; 1
    12a0:	47 c0       	rjmp	.+142    	; 0x1330 <LCD_voidSendNum+0xb6>
    12a2:	9a 01       	movw	r18, r20
    12a4:	ad ec       	ldi	r26, 0xCD	; 205
    12a6:	bc ec       	ldi	r27, 0xCC	; 204
    12a8:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    12ac:	96 95       	lsr	r25
    12ae:	87 95       	ror	r24
    12b0:	96 95       	lsr	r25
    12b2:	87 95       	ror	r24
    12b4:	96 95       	lsr	r25
    12b6:	87 95       	ror	r24
    12b8:	9c 01       	movw	r18, r24
    12ba:	22 0f       	add	r18, r18
    12bc:	33 1f       	adc	r19, r19
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	82 0f       	add	r24, r18
    12cc:	93 1f       	adc	r25, r19
    12ce:	9a 01       	movw	r18, r20
    12d0:	28 1b       	sub	r18, r24
    12d2:	39 0b       	sbc	r19, r25
    12d4:	c9 01       	movw	r24, r18
    12d6:	e1 2f       	mov	r30, r17
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	99 27       	eor	r25, r25
    12dc:	c0 96       	adiw	r24, 0x30	; 48
    12de:	ee 0f       	add	r30, r30
    12e0:	ff 1f       	adc	r31, r31
    12e2:	21 e0       	ldi	r18, 0x01	; 1
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	2c 0f       	add	r18, r28
    12e8:	3d 1f       	adc	r19, r29
    12ea:	e2 0f       	add	r30, r18
    12ec:	f3 1f       	adc	r31, r19
    12ee:	91 83       	std	Z+1, r25	; 0x01
    12f0:	80 83       	st	Z, r24
    12f2:	9a 01       	movw	r18, r20
    12f4:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    12f8:	ac 01       	movw	r20, r24
    12fa:	56 95       	lsr	r21
    12fc:	47 95       	ror	r20
    12fe:	56 95       	lsr	r21
    1300:	47 95       	ror	r20
    1302:	56 95       	lsr	r21
    1304:	47 95       	ror	r20
    1306:	1f 5f       	subi	r17, 0xFF	; 255
    1308:	01 c0       	rjmp	.+2      	; 0x130c <LCD_voidSendNum+0x92>
    130a:	10 e0       	ldi	r17, 0x00	; 0
    130c:	41 15       	cp	r20, r1
    130e:	51 05       	cpc	r21, r1
    1310:	41 f6       	brne	.-112    	; 0x12a2 <LCD_voidSendNum+0x28>
    1312:	0e c0       	rjmp	.+28     	; 0x1330 <LCD_voidSendNum+0xb6>
    1314:	11 50       	subi	r17, 0x01	; 1
    1316:	e1 2f       	mov	r30, r17
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	8c 0f       	add	r24, r28
    1324:	9d 1f       	adc	r25, r29
    1326:	e8 0f       	add	r30, r24
    1328:	f9 1f       	adc	r31, r25
    132a:	80 81       	ld	r24, Z
    132c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCD_voidSendData>
    1330:	11 11       	cpse	r17, r1
    1332:	f0 cf       	rjmp	.-32     	; 0x1314 <LCD_voidSendNum+0x9a>
    1334:	2e 96       	adiw	r28, 0x0e	; 14
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	08 95       	ret

00001348 <LCD_SetGridPos>:
    1348:	90 e4       	ldi	r25, 0x40	; 64
    134a:	69 9f       	mul	r22, r25
    134c:	80 0d       	add	r24, r0
    134e:	11 24       	eor	r1, r1
    1350:	80 68       	ori	r24, 0x80	; 128
    1352:	0e 94 dd 08 	call	0x11ba	; 0x11ba <LCD_voidSendCommand>
    1356:	08 95       	ret

00001358 <main>:


int main(void)
{
			
			xTaskCreate(vTask_RoverInit,"Initialize",configMINIMAL_STACK_SIZE,NULL,INIT_TASK_PRIORITY,NULL);
    1358:	e1 2c       	mov	r14, r1
    135a:	f1 2c       	mov	r15, r1
    135c:	03 e0       	ldi	r16, 0x03	; 3
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e5       	ldi	r20, 0x50	; 80
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	67 e6       	ldi	r22, 0x67	; 103
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	87 e1       	ldi	r24, 0x17	; 23
    136c:	9c e0       	ldi	r25, 0x0C	; 12
    136e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <xTaskCreate>
			xTaskCreate(vTask_RoverMove,"Movement",configMINIMAL_STACK_SIZE,NULL,MOVEMENT_TASK_PRIORITY,NULL);
    1372:	02 e0       	ldi	r16, 0x02	; 2
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e5       	ldi	r20, 0x50	; 80
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	62 e7       	ldi	r22, 0x72	; 114
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	86 e2       	ldi	r24, 0x26	; 38
    1382:	9c e0       	ldi	r25, 0x0C	; 12
    1384:	0e 94 fe 05 	call	0xbfc	; 0xbfc <xTaskCreate>
			xTaskCreate(vTask_DataDisplay,"Display",configMINIMAL_STACK_SIZE,NULL,DISPLAY_TASK_PRIORITY,NULL);
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e5       	ldi	r20, 0x50	; 80
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	6b e7       	ldi	r22, 0x7B	; 123
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	8a e8       	ldi	r24, 0x8A	; 138
    1396:	9c e0       	ldi	r25, 0x0C	; 12
    1398:	0e 94 fe 05 	call	0xbfc	; 0xbfc <xTaskCreate>
			xTaskCreate(vTask_BT_SendStatus,"BT",configMINIMAL_STACK_SIZE,NULL,BLUETOOTH_TASK_PRIORITY,NULL);
    139c:	01 e0       	ldi	r16, 0x01	; 1
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	40 e5       	ldi	r20, 0x50	; 80
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	63 e8       	ldi	r22, 0x83	; 131
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	82 ea       	ldi	r24, 0xA2	; 162
    13ac:	9c e0       	ldi	r25, 0x0C	; 12
    13ae:	0e 94 fe 05 	call	0xbfc	; 0xbfc <xTaskCreate>
			xTaskCreate(vTask_SensorRead,"Sensors",configMINIMAL_STACK_SIZE,NULL,SENSORS_TASK_PRIORITY,NULL);
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e5       	ldi	r20, 0x50	; 80
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	66 e8       	ldi	r22, 0x86	; 134
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	83 e9       	ldi	r24, 0x93	; 147
    13c0:	9c e0       	ldi	r25, 0x0C	; 12
    13c2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <xTaskCreate>
			vTaskStartScheduler();
    13c6:	0e 94 a3 06 	call	0xd46	; 0xd46 <vTaskStartScheduler>
    13ca:	ff cf       	rjmp	.-2      	; 0x13ca <main+0x72>

000013cc <Radar_LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	64 e0       	ldi	r22, 0x04	; 4
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    13d6:	41 e0       	ldi	r20, 0x01	; 1
    13d8:	65 e0       	ldi	r22, 0x05	; 5
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    13e0:	41 e0       	ldi	r20, 0x01	; 1
    13e2:	66 e0       	ldi	r22, 0x06	; 6
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    13ea:	41 e0       	ldi	r20, 0x01	; 1
    13ec:	67 e0       	ldi	r22, 0x07	; 7
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	61 e0       	ldi	r22, 0x01	; 1
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	62 e0       	ldi	r22, 0x02	; 2
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1408:	41 e0       	ldi	r20, 0x01	; 1
    140a:	63 e0       	ldi	r22, 0x03	; 3
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1412:	0e 94 a9 0c 	call	0x1952	; 0x1952 <Servo_Init>
    1416:	41 e0       	ldi	r20, 0x01	; 1
    1418:	64 e0       	ldi	r22, 0x04	; 4
    141a:	82 e0       	ldi	r24, 0x02	; 2
    141c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	65 e0       	ldi	r22, 0x05	; 5
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    142a:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_voidInit>
    142e:	08 95       	ret

00001430 <Rover_voidMotorsInit>:
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	66 e0       	ldi	r22, 0x06	; 6
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    143a:	41 e0       	ldi	r20, 0x01	; 1
    143c:	67 e0       	ldi	r22, 0x07	; 7
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1444:	41 e0       	ldi	r20, 0x01	; 1
    1446:	62 e0       	ldi	r22, 0x02	; 2
    1448:	83 e0       	ldi	r24, 0x03	; 3
    144a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    144e:	41 e0       	ldi	r20, 0x01	; 1
    1450:	63 e0       	ldi	r22, 0x03	; 3
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	67 e0       	ldi	r22, 0x07	; 7
    145c:	83 e0       	ldi	r24, 0x03	; 3
    145e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1462:	08 95       	ret

00001464 <Rover_voidMOVFWD>:
    1464:	cf 93       	push	r28
    1466:	c8 2f       	mov	r28, r24
    1468:	41 e0       	ldi	r20, 0x01	; 1
    146a:	66 e0       	ldi	r22, 0x06	; 6
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	67 e0       	ldi	r22, 0x07	; 7
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    147c:	41 e0       	ldi	r20, 0x01	; 1
    147e:	62 e0       	ldi	r22, 0x02	; 2
    1480:	83 e0       	ldi	r24, 0x03	; 3
    1482:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	63 e0       	ldi	r22, 0x03	; 3
    148a:	83 e0       	ldi	r24, 0x03	; 3
    148c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1490:	8c 2f       	mov	r24, r28
    1492:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <TIMER2_voidFastPWM>
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <Rover_state+0x5>
    149c:	cf 91       	pop	r28
    149e:	08 95       	ret

000014a0 <Rover_voidMOVBCWD>:
    14a0:	cf 93       	push	r28
    14a2:	c8 2f       	mov	r28, r24
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	66 e0       	ldi	r22, 0x06	; 6
    14a8:	82 e0       	ldi	r24, 0x02	; 2
    14aa:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    14ae:	41 e0       	ldi	r20, 0x01	; 1
    14b0:	67 e0       	ldi	r22, 0x07	; 7
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	62 e0       	ldi	r22, 0x02	; 2
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    14c2:	41 e0       	ldi	r20, 0x01	; 1
    14c4:	63 e0       	ldi	r22, 0x03	; 3
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    14cc:	8c 2f       	mov	r24, r28
    14ce:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <TIMER2_voidFastPWM>
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <Rover_state+0x5>
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <Rover_voidMOVRW>:
    14dc:	cf 93       	push	r28
    14de:	c8 2f       	mov	r28, r24
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	66 e0       	ldi	r22, 0x06	; 6
    14e4:	82 e0       	ldi	r24, 0x02	; 2
    14e6:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	67 e0       	ldi	r22, 0x07	; 7
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    14f4:	41 e0       	ldi	r20, 0x01	; 1
    14f6:	62 e0       	ldi	r22, 0x02	; 2
    14f8:	83 e0       	ldi	r24, 0x03	; 3
    14fa:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	63 e0       	ldi	r22, 0x03	; 3
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1508:	8c 2f       	mov	r24, r28
    150a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <TIMER2_voidFastPWM>
    150e:	83 e0       	ldi	r24, 0x03	; 3
    1510:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <Rover_state+0x5>
    1514:	cf 91       	pop	r28
    1516:	08 95       	ret

00001518 <Rover_voidMOVLF>:
    1518:	cf 93       	push	r28
    151a:	c8 2f       	mov	r28, r24
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	66 e0       	ldi	r22, 0x06	; 6
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	67 e0       	ldi	r22, 0x07	; 7
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	62 e0       	ldi	r22, 0x02	; 2
    1534:	83 e0       	ldi	r24, 0x03	; 3
    1536:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    153a:	41 e0       	ldi	r20, 0x01	; 1
    153c:	63 e0       	ldi	r22, 0x03	; 3
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1544:	8c 2f       	mov	r24, r28
    1546:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <TIMER2_voidFastPWM>
    154a:	84 e0       	ldi	r24, 0x04	; 4
    154c:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <Rover_state+0x5>
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <Rover_voidStop>:
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	66 e0       	ldi	r22, 0x06	; 6
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	67 e0       	ldi	r22, 0x07	; 7
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	62 e0       	ldi	r22, 0x02	; 2
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	63 e0       	ldi	r22, 0x03	; 3
    1576:	83 e0       	ldi	r24, 0x03	; 3
    1578:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    157c:	85 e0       	ldi	r24, 0x05	; 5
    157e:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <Rover_state+0x5>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <TIMER2_voidFastPWM>
    1588:	08 95       	ret

0000158a <ROVER_LCD_PrintStatus>:
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	ec 01       	movw	r28, r24
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_SetGridPos>
    1598:	8e e8       	ldi	r24, 0x8E	; 142
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_voidSendString>
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	86 e0       	ldi	r24, 0x06	; 6
    15a4:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_SetGridPos>
    15a8:	88 81       	ld	r24, Y
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_voidSendNum>
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	89 e0       	ldi	r24, 0x09	; 9
    15b4:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_SetGridPos>
    15b8:	84 e9       	ldi	r24, 0x94	; 148
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_voidSendString>
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	8d e0       	ldi	r24, 0x0D	; 13
    15c4:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_SetGridPos>
    15c8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ca:	83 30       	cpi	r24, 0x03	; 3
    15cc:	a9 f0       	breq	.+42     	; 0x15f8 <ROVER_LCD_PrintStatus+0x6e>
    15ce:	28 f4       	brcc	.+10     	; 0x15da <ROVER_LCD_PrintStatus+0x50>
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	41 f0       	breq	.+16     	; 0x15e4 <ROVER_LCD_PrintStatus+0x5a>
    15d4:	82 30       	cpi	r24, 0x02	; 2
    15d6:	59 f0       	breq	.+22     	; 0x15ee <ROVER_LCD_PrintStatus+0x64>
    15d8:	1e c0       	rjmp	.+60     	; 0x1616 <ROVER_LCD_PrintStatus+0x8c>
    15da:	84 30       	cpi	r24, 0x04	; 4
    15dc:	91 f0       	breq	.+36     	; 0x1602 <ROVER_LCD_PrintStatus+0x78>
    15de:	85 30       	cpi	r24, 0x05	; 5
    15e0:	a9 f0       	breq	.+42     	; 0x160c <ROVER_LCD_PrintStatus+0x82>
    15e2:	19 c0       	rjmp	.+50     	; 0x1616 <ROVER_LCD_PrintStatus+0x8c>
    15e4:	89 e9       	ldi	r24, 0x99	; 153
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_voidSendString>
    15ec:	18 c0       	rjmp	.+48     	; 0x161e <ROVER_LCD_PrintStatus+0x94>
    15ee:	8d e9       	ldi	r24, 0x9D	; 157
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_voidSendString>
    15f6:	13 c0       	rjmp	.+38     	; 0x161e <ROVER_LCD_PrintStatus+0x94>
    15f8:	81 ea       	ldi	r24, 0xA1	; 161
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_voidSendString>
    1600:	0e c0       	rjmp	.+28     	; 0x161e <ROVER_LCD_PrintStatus+0x94>
    1602:	84 ea       	ldi	r24, 0xA4	; 164
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_voidSendString>
    160a:	09 c0       	rjmp	.+18     	; 0x161e <ROVER_LCD_PrintStatus+0x94>
    160c:	87 ea       	ldi	r24, 0xA7	; 167
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_voidSendString>
    1614:	04 c0       	rjmp	.+8      	; 0x161e <ROVER_LCD_PrintStatus+0x94>
    1616:	8c ea       	ldi	r24, 0xAC	; 172
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_voidSendString>
    161e:	61 e0       	ldi	r22, 0x01	; 1
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_SetGridPos>
    1626:	80 eb       	ldi	r24, 0xB0	; 176
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_voidSendString>
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	84 e0       	ldi	r24, 0x04	; 4
    1632:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_SetGridPos>
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	81 11       	cpse	r24, r1
    163a:	05 c0       	rjmp	.+10     	; 0x1646 <ROVER_LCD_PrintStatus+0xbc>
    163c:	85 ea       	ldi	r24, 0xA5	; 165
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_voidSendString>
    1644:	17 c0       	rjmp	.+46     	; 0x1674 <ROVER_LCD_PrintStatus+0xea>
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	81 11       	cpse	r24, r1
    164a:	05 c0       	rjmp	.+10     	; 0x1656 <ROVER_LCD_PrintStatus+0xcc>
    164c:	84 eb       	ldi	r24, 0xB4	; 180
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_voidSendString>
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <ROVER_LCD_PrintStatus+0xea>
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	81 11       	cpse	r24, r1
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <ROVER_LCD_PrintStatus+0xdc>
    165c:	86 eb       	ldi	r24, 0xB6	; 182
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_voidSendString>
    1664:	07 c0       	rjmp	.+14     	; 0x1674 <ROVER_LCD_PrintStatus+0xea>
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	81 11       	cpse	r24, r1
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <ROVER_LCD_PrintStatus+0xea>
    166c:	88 eb       	ldi	r24, 0xB8	; 184
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_voidSendString>
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	08 95       	ret

0000167a <IrSensor_voidInit>:
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	63 e0       	ldi	r22, 0x03	; 3
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1684:	40 e0       	ldi	r20, 0x00	; 0
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	61 e0       	ldi	r22, 0x01	; 1
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	62 e0       	ldi	r22, 0x02	; 2
    169c:	82 e0       	ldi	r24, 0x02	; 2
    169e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    16a2:	08 95       	ret

000016a4 <IrSensor_GetDir>:
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    16b0:	c6 e1       	ldi	r28, 0x16	; 22
    16b2:	d5 e0       	ldi	r29, 0x05	; 5
    16b4:	8c 83       	std	Y+4, r24	; 0x04
    16b6:	61 e0       	ldi	r22, 0x01	; 1
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    16be:	8b 83       	std	Y+3, r24	; 0x03
    16c0:	62 e0       	ldi	r22, 0x02	; 2
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    16c8:	8a 83       	std	Y+2, r24	; 0x02
    16ca:	63 e0       	ldi	r22, 0x03	; 3
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	08 95       	ret

000016da <Buzzer_voidInit>:
    16da:	41 e0       	ldi	r20, 0x01	; 1
    16dc:	63 e0       	ldi	r22, 0x03	; 3
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    16e4:	08 95       	ret

000016e6 <RoverTransmit_Init>:
			_delay_ms(100);
}

/********** Function to Initialize Data Transmission From Rover ********/
void RoverTransmit_Init(void){
	UART_voidInit();
    16e6:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <UART_voidInit>
    16ea:	08 95       	ret

000016ec <SendNumber>:
}
void SendNumber(u16 num) {
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <SendNumber+0x8>
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <SendNumber+0xa>
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <SendNumber+0xc>
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	ac 01       	movw	r20, r24
	char buffer[6]; // Buffer to hold the string representation of the number
	u8 i = 0;
	if (num == 0) {
    16fe:	89 2b       	or	r24, r25
    1700:	91 f5       	brne	.+100    	; 0x1766 <SendNumber+0x7a>
		UART_voidTX('0');
    1702:	80 e3       	ldi	r24, 0x30	; 48
    1704:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
    1708:	3f c0       	rjmp	.+126    	; 0x1788 <SendNumber+0x9c>
		return;
	}

	// Convert number to string manually
	while (num != 0) {
		buffer[i++] = (num % 10) + '0';
    170a:	9a 01       	movw	r18, r20
    170c:	ad ec       	ldi	r26, 0xCD	; 205
    170e:	bc ec       	ldi	r27, 0xCC	; 204
    1710:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    1714:	96 95       	lsr	r25
    1716:	87 95       	ror	r24
    1718:	96 95       	lsr	r25
    171a:	87 95       	ror	r24
    171c:	96 95       	lsr	r25
    171e:	87 95       	ror	r24
    1720:	9c 01       	movw	r18, r24
    1722:	22 0f       	add	r18, r18
    1724:	33 1f       	adc	r19, r19
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	82 0f       	add	r24, r18
    1734:	93 1f       	adc	r25, r19
    1736:	9a 01       	movw	r18, r20
    1738:	28 1b       	sub	r18, r24
    173a:	39 0b       	sbc	r19, r25
    173c:	c9 01       	movw	r24, r18
    173e:	e1 e0       	ldi	r30, 0x01	; 1
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	ec 0f       	add	r30, r28
    1744:	fd 1f       	adc	r31, r29
    1746:	e1 0f       	add	r30, r17
    1748:	f1 1d       	adc	r31, r1
    174a:	80 5d       	subi	r24, 0xD0	; 208
    174c:	80 83       	st	Z, r24
		num /= 10;
    174e:	9a 01       	movw	r18, r20
    1750:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    1754:	ac 01       	movw	r20, r24
    1756:	56 95       	lsr	r21
    1758:	47 95       	ror	r20
    175a:	56 95       	lsr	r21
    175c:	47 95       	ror	r20
    175e:	56 95       	lsr	r21
    1760:	47 95       	ror	r20
		return;
	}

	// Convert number to string manually
	while (num != 0) {
		buffer[i++] = (num % 10) + '0';
    1762:	1f 5f       	subi	r17, 0xFF	; 255
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <SendNumber+0x7c>
    1766:	10 e0       	ldi	r17, 0x00	; 0
		UART_voidTX('0');
		return;
	}

	// Convert number to string manually
	while (num != 0) {
    1768:	41 15       	cp	r20, r1
    176a:	51 05       	cpc	r21, r1
    176c:	71 f6       	brne	.-100    	; 0x170a <SendNumber+0x1e>
    176e:	0a c0       	rjmp	.+20     	; 0x1784 <SendNumber+0x98>
		num /= 10;
	}

	// Send the string in the correct order
	while (i > 0) {
		UART_voidTX(buffer[--i]);
    1770:	11 50       	subi	r17, 0x01	; 1
    1772:	e1 e0       	ldi	r30, 0x01	; 1
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	ec 0f       	add	r30, r28
    1778:	fd 1f       	adc	r31, r29
    177a:	e1 0f       	add	r30, r17
    177c:	f1 1d       	adc	r31, r1
    177e:	80 81       	ld	r24, Z
    1780:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
		buffer[i++] = (num % 10) + '0';
		num /= 10;
	}

	// Send the string in the correct order
	while (i > 0) {
    1784:	11 11       	cpse	r17, r1
    1786:	f4 cf       	rjmp	.-24     	; 0x1770 <SendNumber+0x84>
		UART_voidTX(buffer[--i]);
	}
}
    1788:	26 96       	adiw	r28, 0x06	; 6
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	08 95       	ret

0000179c <RoverTransmitStatus>:
/********** Function to Transmit Rover Status  ********/
void RoverTransmitStatus(void){
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
	
	UART_voidTX('D');
    17a0:	84 e4       	ldi	r24, 0x44	; 68
    17a2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	UART_voidTX(':');
    17a6:	8a e3       	ldi	r24, 0x3A	; 58
    17a8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	SendNumber(Rover_state.Distance);  // Function to send number
    17ac:	c6 e1       	ldi	r28, 0x16	; 22
    17ae:	d5 e0       	ldi	r29, 0x05	; 5
    17b0:	88 81       	ld	r24, Y
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <SendNumber>
	UART_voidTX('F');
    17b8:	86 e4       	ldi	r24, 0x46	; 70
    17ba:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	UART_voidTX(':');
    17be:	8a e3       	ldi	r24, 0x3A	; 58
    17c0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	SendNumber(Rover_state.F_Obj);    // Function to send number
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <SendNumber>
	UART_voidTX('B');
    17cc:	82 e4       	ldi	r24, 0x42	; 66
    17ce:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	UART_voidTX(':');
    17d2:	8a e3       	ldi	r24, 0x3A	; 58
    17d4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	SendNumber(Rover_state.B_Obj);    // Function to send number
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	0e 94 76 0b 	call	0x16ec	; 0x16ec <SendNumber>
	UART_voidTX('R');
    17e0:	82 e5       	ldi	r24, 0x52	; 82
    17e2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	UART_voidTX(':');
    17e6:	8a e3       	ldi	r24, 0x3A	; 58
    17e8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	SendNumber(Rover_state.R_Obj);    // Function to send number
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <SendNumber>
	UART_voidTX('L');
    17f4:	8c e4       	ldi	r24, 0x4C	; 76
    17f6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	UART_voidTX(':');
    17fa:	8a e3       	ldi	r24, 0x3A	; 58
    17fc:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	SendNumber(Rover_state.L_Obj);    // Function to send number
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 94 76 0b 	call	0x16ec	; 0x16ec <SendNumber>
	UART_voidTX('D');
    1808:	84 e4       	ldi	r24, 0x44	; 68
    180a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	UART_voidTX('i');
    180e:	89 e6       	ldi	r24, 0x69	; 105
    1810:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	UART_voidTX('r');
    1814:	82 e7       	ldi	r24, 0x72	; 114
    1816:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	UART_voidTX(':');
    181a:	8a e3       	ldi	r24, 0x3A	; 58
    181c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <UART_voidTX>
	SendNumber(Rover_state.Direction);  // Function to send number
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 76 0b 	call	0x16ec	; 0x16ec <SendNumber>
	
}
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	08 95       	ret

0000182e <vTask_RoverInit>:

void vTask_RoverInit(void){
	
	Radar_LCD_Init();
    182e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <Radar_LCD_Init>
	Rover_voidMotorsInit();
    1832:	0e 94 18 0a 	call	0x1430	; 0x1430 <Rover_voidMotorsInit>
	IrSensor_voidInit();
    1836:	0e 94 3d 0b 	call	0x167a	; 0x167a <IrSensor_voidInit>
	Buzzer_voidInit();
    183a:	0e 94 6d 0b 	call	0x16da	; 0x16da <Buzzer_voidInit>
	RoverTransmit_Init();
    183e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <RoverTransmit_Init>

	// Once initialization is complete, delete this task
	vTaskDelete(NULL);
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 52 06 	call	0xca4	; 0xca4 <vTaskDelete>
    184a:	08 95       	ret

0000184c <vTask_RoverMove>:
	
	u8 angle_1 = 0, angle_2 = 90;

	while(1){
		// Check if the front is clear (IR sensor or ultrasonic distance)
		if (Rover_state.F_Obj == 1 && Rover_state.Distance > 10) {
    184c:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <Rover_state+0x1>
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	b9 f4       	brne	.+46     	; 0x1882 <vTask_RoverMove+0x36>
    1854:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <Rover_state>
    1858:	8b 30       	cpi	r24, 0x0B	; 11
    185a:	98 f0       	brcs	.+38     	; 0x1882 <vTask_RoverMove+0x36>
			Rover_voidMOVFWD(50);
    185c:	82 e3       	ldi	r24, 0x32	; 50
    185e:	0e 94 32 0a 	call	0x1464	; 0x1464 <Rover_voidMOVFWD>
			while (Rover_state.F_Obj == 1 && Rover_state.Distance > 10) {
    1862:	04 c0       	rjmp	.+8      	; 0x186c <vTask_RoverMove+0x20>
				vTaskDelay(pdMS_TO_TICKS(100));
    1864:	82 e2       	ldi	r24, 0x22	; 34
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 ff 07 	call	0xffe	; 0xffe <vTaskDelay>

	while(1){
		// Check if the front is clear (IR sensor or ultrasonic distance)
		if (Rover_state.F_Obj == 1 && Rover_state.Distance > 10) {
			Rover_voidMOVFWD(50);
			while (Rover_state.F_Obj == 1 && Rover_state.Distance > 10) {
    186c:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <Rover_state+0x1>
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	21 f4       	brne	.+8      	; 0x187c <vTask_RoverMove+0x30>
    1874:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <Rover_state>
    1878:	8b 30       	cpi	r24, 0x0B	; 11
    187a:	a0 f7       	brcc	.-24     	; 0x1864 <vTask_RoverMove+0x18>
				vTaskDelay(pdMS_TO_TICKS(100));
			}
			Rover_voidStop();
    187c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <Rover_voidStop>
    1880:	44 c0       	rjmp	.+136    	; 0x190a <vTask_RoverMove+0xbe>
			} else {
			Rover_voidMOVBCWD(55);
    1882:	87 e3       	ldi	r24, 0x37	; 55
    1884:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <Rover_voidMOVBCWD>
			vTaskDelay(pdMS_TO_TICKS(500));
    1888:	89 e2       	ldi	r24, 0x29	; 41
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 ff 07 	call	0xffe	; 0xffe <vTaskDelay>
			Rover_voidStop();
    1890:	0e 94 aa 0a 	call	0x1554	; 0x1554 <Rover_voidStop>

			if (Rover_state.L_Obj != 1 && Rover_state.R_Obj == 1) {
    1894:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <Rover_state+0x2>
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	61 f0       	breq	.+24     	; 0x18b4 <vTask_RoverMove+0x68>
    189c:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <Rover_state+0x3>
    18a0:	91 30       	cpi	r25, 0x01	; 1
    18a2:	41 f4       	brne	.+16     	; 0x18b4 <vTask_RoverMove+0x68>
				Rover_voidMOVRW(85);
    18a4:	85 e5       	ldi	r24, 0x55	; 85
    18a6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <Rover_voidMOVRW>
				vTaskDelay(pdMS_TO_TICKS(1750));
    18aa:	8e e2       	ldi	r24, 0x2E	; 46
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 94 ff 07 	call	0xffe	; 0xffe <vTaskDelay>
    18b2:	21 c0       	rjmp	.+66     	; 0x18f6 <vTask_RoverMove+0xaa>
				} else if (Rover_state.R_Obj != 1 && Rover_state.L_Obj == 1) {
    18b4:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <Rover_state+0x3>
    18b8:	91 30       	cpi	r25, 0x01	; 1
    18ba:	51 f0       	breq	.+20     	; 0x18d0 <vTask_RoverMove+0x84>
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	41 f4       	brne	.+16     	; 0x18d0 <vTask_RoverMove+0x84>
				Rover_voidMOVLF(85);
    18c0:	85 e5       	ldi	r24, 0x55	; 85
    18c2:	0e 94 8c 0a 	call	0x1518	; 0x1518 <Rover_voidMOVLF>
				vTaskDelay(pdMS_TO_TICKS(1750));
    18c6:	8e e2       	ldi	r24, 0x2E	; 46
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 ff 07 	call	0xffe	; 0xffe <vTaskDelay>
    18ce:	13 c0       	rjmp	.+38     	; 0x18f6 <vTask_RoverMove+0xaa>
				} else if (Rover_state.L_Obj == 1) {
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	41 f4       	brne	.+16     	; 0x18e4 <vTask_RoverMove+0x98>
				Rover_voidMOVLF(85);
    18d4:	85 e5       	ldi	r24, 0x55	; 85
    18d6:	0e 94 8c 0a 	call	0x1518	; 0x1518 <Rover_voidMOVLF>
				vTaskDelay(pdMS_TO_TICKS(1750));
    18da:	8e e2       	ldi	r24, 0x2E	; 46
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 ff 07 	call	0xffe	; 0xffe <vTaskDelay>
    18e2:	09 c0       	rjmp	.+18     	; 0x18f6 <vTask_RoverMove+0xaa>
				} else if (Rover_state.R_Obj == 1) {
    18e4:	91 30       	cpi	r25, 0x01	; 1
    18e6:	39 f4       	brne	.+14     	; 0x18f6 <vTask_RoverMove+0xaa>
				Rover_voidMOVRW(85);
    18e8:	85 e5       	ldi	r24, 0x55	; 85
    18ea:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <Rover_voidMOVRW>
				vTaskDelay(pdMS_TO_TICKS(1750));
    18ee:	8e e2       	ldi	r24, 0x2E	; 46
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 ff 07 	call	0xffe	; 0xffe <vTaskDelay>
			}

			vTaskDelay(pdMS_TO_TICKS(500));
    18f6:	89 e2       	ldi	r24, 0x29	; 41
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 ff 07 	call	0xffe	; 0xffe <vTaskDelay>
			Rover_voidStop();
    18fe:	0e 94 aa 0a 	call	0x1554	; 0x1554 <Rover_voidStop>
			vTaskDelay(pdMS_TO_TICKS(50));
    1902:	82 e3       	ldi	r24, 0x32	; 50
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 ff 07 	call	0xffe	; 0xffe <vTaskDelay>
		}
		vTaskDelay(pdMS_TO_TICKS(100));
    190a:	82 e2       	ldi	r24, 0x22	; 34
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 ff 07 	call	0xffe	; 0xffe <vTaskDelay>
	}
    1912:	9c cf       	rjmp	.-200    	; 0x184c <vTask_RoverMove>

00001914 <vTask_DataDisplay>:

void vTask_DataDisplay(void){
	
	
	while(1){
		ROVER_LCD_PrintStatus(&Rover_state);
    1914:	86 e1       	ldi	r24, 0x16	; 22
    1916:	95 e0       	ldi	r25, 0x05	; 5
    1918:	0e 94 c5 0a 	call	0x158a	; 0x158a <ROVER_LCD_PrintStatus>
		vTaskDelay(pdMS_TO_TICKS(150));
    191c:	82 e1       	ldi	r24, 0x12	; 18
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 ff 07 	call	0xffe	; 0xffe <vTaskDelay>
    1924:	f7 cf       	rjmp	.-18     	; 0x1914 <vTask_DataDisplay>

00001926 <vTask_SensorRead>:
}

void vTask_SensorRead(void){
	
	while(1){
		IrSensor_GetDir();
    1926:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <IrSensor_GetDir>
		UltraSonic_Sendpulse();
    192a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <UltraSonic_Sendpulse>
		Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
    192e:	8d ec       	ldi	r24, 0xCD	; 205
    1930:	9d e0       	ldi	r25, 0x0D	; 13
    1932:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <UltraSonic_Calc_Distance>
    1936:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <Rover_state>
		vTaskDelay(pdMS_TO_TICKS(100));
    193a:	82 e2       	ldi	r24, 0x22	; 34
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 ff 07 	call	0xffe	; 0xffe <vTaskDelay>
    1942:	f1 cf       	rjmp	.-30     	; 0x1926 <vTask_SensorRead>

00001944 <vTask_BT_SendStatus>:
	
}

void vTask_BT_SendStatus(void){
	while(1){
		RoverTransmitStatus();
    1944:	0e 94 ce 0b 	call	0x179c	; 0x179c <RoverTransmitStatus>
		vTaskDelay(pdMS_TO_TICKS(150));
    1948:	82 e1       	ldi	r24, 0x12	; 18
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 ff 07 	call	0xffe	; 0xffe <vTaskDelay>
    1950:	f9 cf       	rjmp	.-14     	; 0x1944 <vTask_BT_SendStatus>

00001952 <Servo_Init>:
void Servo_Init(void){
	
	
	// Initialize Timer1 for Fast PWM mode
	
	DIO_voidSetPinDir(PWM_PORT,PWM_PIN,OUTPUT);
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	65 e0       	ldi	r22, 0x05	; 5
    1956:	83 e0       	ldi	r24, 0x03	; 3
    1958:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
	// Set initial angle to 0 degrees
	 TIMER1_voidFastPWMICR1();
    195c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <TIMER1_voidFastPWMICR1>
    1960:	08 95       	ret

00001962 <__vector_11>:
    1962:	1f 92       	push	r1
    1964:	0f 92       	push	r0
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	0f 92       	push	r0
    196a:	11 24       	eor	r1, r1
    196c:	2f 93       	push	r18
    196e:	3f 93       	push	r19
    1970:	4f 93       	push	r20
    1972:	5f 93       	push	r21
    1974:	6f 93       	push	r22
    1976:	7f 93       	push	r23
    1978:	8f 93       	push	r24
    197a:	9f 93       	push	r25
    197c:	af 93       	push	r26
    197e:	bf 93       	push	r27
    1980:	ef 93       	push	r30
    1982:	ff 93       	push	r31
    1984:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <OVF_ptr>
    1988:	f0 91 11 05 	lds	r31, 0x0511	; 0x800511 <OVF_ptr+0x1>
    198c:	09 95       	icall
    198e:	ff 91       	pop	r31
    1990:	ef 91       	pop	r30
    1992:	bf 91       	pop	r27
    1994:	af 91       	pop	r26
    1996:	9f 91       	pop	r25
    1998:	8f 91       	pop	r24
    199a:	7f 91       	pop	r23
    199c:	6f 91       	pop	r22
    199e:	5f 91       	pop	r21
    19a0:	4f 91       	pop	r20
    19a2:	3f 91       	pop	r19
    19a4:	2f 91       	pop	r18
    19a6:	0f 90       	pop	r0
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	0f 90       	pop	r0
    19ac:	1f 90       	pop	r1
    19ae:	18 95       	reti

000019b0 <__vector_10>:
    19b0:	1f 92       	push	r1
    19b2:	0f 92       	push	r0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	0f 92       	push	r0
    19b8:	11 24       	eor	r1, r1
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
    19d2:	e0 91 0e 05 	lds	r30, 0x050E	; 0x80050e <CTC_ptr>
    19d6:	f0 91 0f 05 	lds	r31, 0x050F	; 0x80050f <CTC_ptr+0x1>
    19da:	09 95       	icall
    19dc:	ff 91       	pop	r31
    19de:	ef 91       	pop	r30
    19e0:	bf 91       	pop	r27
    19e2:	af 91       	pop	r26
    19e4:	9f 91       	pop	r25
    19e6:	8f 91       	pop	r24
    19e8:	7f 91       	pop	r23
    19ea:	6f 91       	pop	r22
    19ec:	5f 91       	pop	r21
    19ee:	4f 91       	pop	r20
    19f0:	3f 91       	pop	r19
    19f2:	2f 91       	pop	r18
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	0f 90       	pop	r0
    19fa:	1f 90       	pop	r1
    19fc:	18 95       	reti

000019fe <TIMER1_voidFastPWMICR1>:
    19fe:	8f b5       	in	r24, 0x2f	; 47
    1a00:	90 b7       	in	r25, 0x30	; 48
    1a02:	8e 7f       	andi	r24, 0xFE	; 254
    1a04:	90 bf       	out	0x30, r25	; 48
    1a06:	8f bd       	out	0x2f, r24	; 47
    1a08:	8f b5       	in	r24, 0x2f	; 47
    1a0a:	90 b7       	in	r25, 0x30	; 48
    1a0c:	82 60       	ori	r24, 0x02	; 2
    1a0e:	90 bf       	out	0x30, r25	; 48
    1a10:	8f bd       	out	0x2f, r24	; 47
    1a12:	8e b5       	in	r24, 0x2e	; 46
    1a14:	9f b5       	in	r25, 0x2f	; 47
    1a16:	88 60       	ori	r24, 0x08	; 8
    1a18:	9f bd       	out	0x2f, r25	; 47
    1a1a:	8e bd       	out	0x2e, r24	; 46
    1a1c:	8e b5       	in	r24, 0x2e	; 46
    1a1e:	9f b5       	in	r25, 0x2f	; 47
    1a20:	80 61       	ori	r24, 0x10	; 16
    1a22:	9f bd       	out	0x2f, r25	; 47
    1a24:	8e bd       	out	0x2e, r24	; 46
    1a26:	8f b5       	in	r24, 0x2f	; 47
    1a28:	90 b7       	in	r25, 0x30	; 48
    1a2a:	80 68       	ori	r24, 0x80	; 128
    1a2c:	90 bf       	out	0x30, r25	; 48
    1a2e:	8f bd       	out	0x2f, r24	; 47
    1a30:	8f b5       	in	r24, 0x2f	; 47
    1a32:	90 b7       	in	r25, 0x30	; 48
    1a34:	8f 7b       	andi	r24, 0xBF	; 191
    1a36:	90 bf       	out	0x30, r25	; 48
    1a38:	8f bd       	out	0x2f, r24	; 47
    1a3a:	8f b5       	in	r24, 0x2f	; 47
    1a3c:	90 b7       	in	r25, 0x30	; 48
    1a3e:	80 62       	ori	r24, 0x20	; 32
    1a40:	90 bf       	out	0x30, r25	; 48
    1a42:	8f bd       	out	0x2f, r24	; 47
    1a44:	8f b5       	in	r24, 0x2f	; 47
    1a46:	90 b7       	in	r25, 0x30	; 48
    1a48:	8f 7e       	andi	r24, 0xEF	; 239
    1a4a:	90 bf       	out	0x30, r25	; 48
    1a4c:	8f bd       	out	0x2f, r24	; 47
    1a4e:	8e b5       	in	r24, 0x2e	; 46
    1a50:	9f b5       	in	r25, 0x2f	; 47
    1a52:	8e 7f       	andi	r24, 0xFE	; 254
    1a54:	9f bd       	out	0x2f, r25	; 47
    1a56:	8e bd       	out	0x2e, r24	; 46
    1a58:	8e b5       	in	r24, 0x2e	; 46
    1a5a:	9f b5       	in	r25, 0x2f	; 47
    1a5c:	82 60       	ori	r24, 0x02	; 2
    1a5e:	9f bd       	out	0x2f, r25	; 47
    1a60:	8e bd       	out	0x2e, r24	; 46
    1a62:	8e b5       	in	r24, 0x2e	; 46
    1a64:	9f b5       	in	r25, 0x2f	; 47
    1a66:	8b 7f       	andi	r24, 0xFB	; 251
    1a68:	9f bd       	out	0x2f, r25	; 47
    1a6a:	8e bd       	out	0x2e, r24	; 46
    1a6c:	80 e4       	ldi	r24, 0x40	; 64
    1a6e:	9c e9       	ldi	r25, 0x9C	; 156
    1a70:	97 bd       	out	0x27, r25	; 39
    1a72:	86 bd       	out	0x26, r24	; 38
    1a74:	8f ef       	ldi	r24, 0xFF	; 255
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	99 bd       	out	0x29, r25	; 41
    1a7a:	88 bd       	out	0x28, r24	; 40
    1a7c:	08 95       	ret

00001a7e <TIMER2_voidFastPWM>:
    1a7e:	95 b5       	in	r25, 0x25	; 37
    1a80:	98 7f       	andi	r25, 0xF8	; 248
    1a82:	95 bd       	out	0x25, r25	; 37
    1a84:	95 b5       	in	r25, 0x25	; 37
    1a86:	93 60       	ori	r25, 0x03	; 3
    1a88:	95 bd       	out	0x25, r25	; 37
    1a8a:	95 b5       	in	r25, 0x25	; 37
    1a8c:	98 60       	ori	r25, 0x08	; 8
    1a8e:	95 bd       	out	0x25, r25	; 37
    1a90:	95 b5       	in	r25, 0x25	; 37
    1a92:	90 64       	ori	r25, 0x40	; 64
    1a94:	95 bd       	out	0x25, r25	; 37
    1a96:	95 b5       	in	r25, 0x25	; 37
    1a98:	90 62       	ori	r25, 0x20	; 32
    1a9a:	95 bd       	out	0x25, r25	; 37
    1a9c:	95 b5       	in	r25, 0x25	; 37
    1a9e:	9f 7e       	andi	r25, 0xEF	; 239
    1aa0:	95 bd       	out	0x25, r25	; 37
    1aa2:	68 2f       	mov	r22, r24
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__floatsisf>
    1aae:	23 e3       	ldi	r18, 0x33	; 51
    1ab0:	33 e3       	ldi	r19, 0x33	; 51
    1ab2:	43 e2       	ldi	r20, 0x23	; 35
    1ab4:	50 e4       	ldi	r21, 0x40	; 64
    1ab6:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__mulsf3>
    1aba:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__fixunssfsi>
    1abe:	63 bd       	out	0x23, r22	; 35
    1ac0:	08 95       	ret

00001ac2 <__vector_5>:
    1ac2:	1f 92       	push	r1
    1ac4:	0f 92       	push	r0
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	0f 92       	push	r0
    1aca:	11 24       	eor	r1, r1
    1acc:	2f 93       	push	r18
    1ace:	3f 93       	push	r19
    1ad0:	4f 93       	push	r20
    1ad2:	5f 93       	push	r21
    1ad4:	6f 93       	push	r22
    1ad6:	7f 93       	push	r23
    1ad8:	8f 93       	push	r24
    1ada:	9f 93       	push	r25
    1adc:	af 93       	push	r26
    1ade:	bf 93       	push	r27
    1ae0:	ef 93       	push	r30
    1ae2:	ff 93       	push	r31
    1ae4:	e0 91 14 05 	lds	r30, 0x0514	; 0x800514 <OVF_ptr>
    1ae8:	f0 91 15 05 	lds	r31, 0x0515	; 0x800515 <OVF_ptr+0x1>
    1aec:	09 95       	icall
    1aee:	ff 91       	pop	r31
    1af0:	ef 91       	pop	r30
    1af2:	bf 91       	pop	r27
    1af4:	af 91       	pop	r26
    1af6:	9f 91       	pop	r25
    1af8:	8f 91       	pop	r24
    1afa:	7f 91       	pop	r23
    1afc:	6f 91       	pop	r22
    1afe:	5f 91       	pop	r21
    1b00:	4f 91       	pop	r20
    1b02:	3f 91       	pop	r19
    1b04:	2f 91       	pop	r18
    1b06:	0f 90       	pop	r0
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	0f 90       	pop	r0
    1b0c:	1f 90       	pop	r1
    1b0e:	18 95       	reti

00001b10 <__vector_4>:
    1b10:	1f 92       	push	r1
    1b12:	0f 92       	push	r0
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	0f 92       	push	r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	2f 93       	push	r18
    1b1c:	3f 93       	push	r19
    1b1e:	4f 93       	push	r20
    1b20:	5f 93       	push	r21
    1b22:	6f 93       	push	r22
    1b24:	7f 93       	push	r23
    1b26:	8f 93       	push	r24
    1b28:	9f 93       	push	r25
    1b2a:	af 93       	push	r26
    1b2c:	bf 93       	push	r27
    1b2e:	ef 93       	push	r30
    1b30:	ff 93       	push	r31
    1b32:	e0 91 12 05 	lds	r30, 0x0512	; 0x800512 <CTC_ptr>
    1b36:	f0 91 13 05 	lds	r31, 0x0513	; 0x800513 <CTC_ptr+0x1>
    1b3a:	09 95       	icall
    1b3c:	ff 91       	pop	r31
    1b3e:	ef 91       	pop	r30
    1b40:	bf 91       	pop	r27
    1b42:	af 91       	pop	r26
    1b44:	9f 91       	pop	r25
    1b46:	8f 91       	pop	r24
    1b48:	7f 91       	pop	r23
    1b4a:	6f 91       	pop	r22
    1b4c:	5f 91       	pop	r21
    1b4e:	4f 91       	pop	r20
    1b50:	3f 91       	pop	r19
    1b52:	2f 91       	pop	r18
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <UART_voidInit>:
    1b5e:	86 e8       	ldi	r24, 0x86	; 134
    1b60:	80 bd       	out	0x20, r24	; 32
    1b62:	87 e6       	ldi	r24, 0x67	; 103
    1b64:	89 b9       	out	0x09, r24	; 9
    1b66:	8a b1       	in	r24, 0x0a	; 10
    1b68:	88 60       	ori	r24, 0x08	; 8
    1b6a:	8a b9       	out	0x0a, r24	; 10
    1b6c:	8a b1       	in	r24, 0x0a	; 10
    1b6e:	80 61       	ori	r24, 0x10	; 16
    1b70:	8a b9       	out	0x0a, r24	; 10
    1b72:	08 95       	ret

00001b74 <UART_voidTX>:
    1b74:	8c b9       	out	0x0c, r24	; 12
    1b76:	5d 9b       	sbis	0x0b, 5	; 11
    1b78:	fe cf       	rjmp	.-4      	; 0x1b76 <UART_voidTX+0x2>
    1b7a:	08 95       	ret

00001b7c <UltraSonic_Sendpulse>:
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	64 e0       	ldi	r22, 0x04	; 4
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b86:	85 e3       	ldi	r24, 0x35	; 53
    1b88:	8a 95       	dec	r24
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <UltraSonic_Sendpulse+0xc>
    1b8c:	00 00       	nop
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	64 e0       	ldi	r22, 0x04	; 4
    1b92:	82 e0       	ldi	r24, 0x02	; 2
    1b94:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1b98:	08 95       	ret

00001b9a <UltraSonic_Read_Echo>:
    1b9a:	cf 93       	push	r28
    1b9c:	12 be       	out	0x32, r1	; 50
    1b9e:	83 e0       	ldi	r24, 0x03	; 3
    1ba0:	83 bf       	out	0x33, r24	; 51
    1ba2:	65 e0       	ldi	r22, 0x05	; 5
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    1baa:	88 23       	and	r24, r24
    1bac:	d1 f3       	breq	.-12     	; 0x1ba2 <UltraSonic_Read_Echo+0x8>
    1bae:	c0 e0       	ldi	r28, 0x00	; 0
    1bb0:	07 c0       	rjmp	.+14     	; 0x1bc0 <UltraSonic_Read_Echo+0x26>
    1bb2:	08 b6       	in	r0, 0x38	; 56
    1bb4:	00 fe       	sbrs	r0, 0
    1bb6:	04 c0       	rjmp	.+8      	; 0x1bc0 <UltraSonic_Read_Echo+0x26>
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	88 bf       	out	0x38, r24	; 56
    1bbc:	cf 5f       	subi	r28, 0xFF	; 255
    1bbe:	12 be       	out	0x32, r1	; 50
    1bc0:	65 e0       	ldi	r22, 0x05	; 5
    1bc2:	82 e0       	ldi	r24, 0x02	; 2
    1bc4:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	99 f3       	breq	.-26     	; 0x1bb2 <UltraSonic_Read_Echo+0x18>
    1bcc:	8c 2f       	mov	r24, r28
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	98 2f       	mov	r25, r24
    1bd2:	88 27       	eor	r24, r24
    1bd4:	22 b7       	in	r18, 0x32	; 50
    1bd6:	13 be       	out	0x33, r1	; 51
    1bd8:	82 0f       	add	r24, r18
    1bda:	91 1d       	adc	r25, r1
    1bdc:	cf 91       	pop	r28
    1bde:	08 95       	ret

00001be0 <UltraSonic_Calc_Distance>:
    1be0:	fc 01       	movw	r30, r24
    1be2:	09 95       	icall
    1be4:	9c 01       	movw	r18, r24
    1be6:	a8 e2       	ldi	r26, 0x28	; 40
    1be8:	b7 e8       	ldi	r27, 0x87	; 135
    1bea:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    1bee:	20 e2       	ldi	r18, 0x20	; 32
    1bf0:	31 ea       	ldi	r19, 0xA1	; 161
    1bf2:	47 e0       	ldi	r20, 0x07	; 7
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__udivmodsi4>
    1bfa:	8f ee       	ldi	r24, 0xEF	; 239
    1bfc:	82 0f       	add	r24, r18
    1bfe:	08 95       	ret

00001c00 <__fixunssfsi>:
    1c00:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__fp_splitA>
    1c04:	88 f0       	brcs	.+34     	; 0x1c28 <__fixunssfsi+0x28>
    1c06:	9f 57       	subi	r25, 0x7F	; 127
    1c08:	98 f0       	brcs	.+38     	; 0x1c30 <__fixunssfsi+0x30>
    1c0a:	b9 2f       	mov	r27, r25
    1c0c:	99 27       	eor	r25, r25
    1c0e:	b7 51       	subi	r27, 0x17	; 23
    1c10:	b0 f0       	brcs	.+44     	; 0x1c3e <__fixunssfsi+0x3e>
    1c12:	e1 f0       	breq	.+56     	; 0x1c4c <__fixunssfsi+0x4c>
    1c14:	66 0f       	add	r22, r22
    1c16:	77 1f       	adc	r23, r23
    1c18:	88 1f       	adc	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	1a f0       	brmi	.+6      	; 0x1c24 <__fixunssfsi+0x24>
    1c1e:	ba 95       	dec	r27
    1c20:	c9 f7       	brne	.-14     	; 0x1c14 <__fixunssfsi+0x14>
    1c22:	14 c0       	rjmp	.+40     	; 0x1c4c <__fixunssfsi+0x4c>
    1c24:	b1 30       	cpi	r27, 0x01	; 1
    1c26:	91 f0       	breq	.+36     	; 0x1c4c <__fixunssfsi+0x4c>
    1c28:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__fp_zero>
    1c2c:	b1 e0       	ldi	r27, 0x01	; 1
    1c2e:	08 95       	ret
    1c30:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__fp_zero>
    1c34:	67 2f       	mov	r22, r23
    1c36:	78 2f       	mov	r23, r24
    1c38:	88 27       	eor	r24, r24
    1c3a:	b8 5f       	subi	r27, 0xF8	; 248
    1c3c:	39 f0       	breq	.+14     	; 0x1c4c <__fixunssfsi+0x4c>
    1c3e:	b9 3f       	cpi	r27, 0xF9	; 249
    1c40:	cc f3       	brlt	.-14     	; 0x1c34 <__fixunssfsi+0x34>
    1c42:	86 95       	lsr	r24
    1c44:	77 95       	ror	r23
    1c46:	67 95       	ror	r22
    1c48:	b3 95       	inc	r27
    1c4a:	d9 f7       	brne	.-10     	; 0x1c42 <__fixunssfsi+0x42>
    1c4c:	3e f4       	brtc	.+14     	; 0x1c5c <__fixunssfsi+0x5c>
    1c4e:	90 95       	com	r25
    1c50:	80 95       	com	r24
    1c52:	70 95       	com	r23
    1c54:	61 95       	neg	r22
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5c:	08 95       	ret

00001c5e <__floatunsisf>:
    1c5e:	e8 94       	clt
    1c60:	09 c0       	rjmp	.+18     	; 0x1c74 <__floatsisf+0x12>

00001c62 <__floatsisf>:
    1c62:	97 fb       	bst	r25, 7
    1c64:	3e f4       	brtc	.+14     	; 0x1c74 <__floatsisf+0x12>
    1c66:	90 95       	com	r25
    1c68:	80 95       	com	r24
    1c6a:	70 95       	com	r23
    1c6c:	61 95       	neg	r22
    1c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c70:	8f 4f       	sbci	r24, 0xFF	; 255
    1c72:	9f 4f       	sbci	r25, 0xFF	; 255
    1c74:	99 23       	and	r25, r25
    1c76:	a9 f0       	breq	.+42     	; 0x1ca2 <__floatsisf+0x40>
    1c78:	f9 2f       	mov	r31, r25
    1c7a:	96 e9       	ldi	r25, 0x96	; 150
    1c7c:	bb 27       	eor	r27, r27
    1c7e:	93 95       	inc	r25
    1c80:	f6 95       	lsr	r31
    1c82:	87 95       	ror	r24
    1c84:	77 95       	ror	r23
    1c86:	67 95       	ror	r22
    1c88:	b7 95       	ror	r27
    1c8a:	f1 11       	cpse	r31, r1
    1c8c:	f8 cf       	rjmp	.-16     	; 0x1c7e <__floatsisf+0x1c>
    1c8e:	fa f4       	brpl	.+62     	; 0x1cce <__floatsisf+0x6c>
    1c90:	bb 0f       	add	r27, r27
    1c92:	11 f4       	brne	.+4      	; 0x1c98 <__floatsisf+0x36>
    1c94:	60 ff       	sbrs	r22, 0
    1c96:	1b c0       	rjmp	.+54     	; 0x1cce <__floatsisf+0x6c>
    1c98:	6f 5f       	subi	r22, 0xFF	; 255
    1c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca0:	16 c0       	rjmp	.+44     	; 0x1cce <__floatsisf+0x6c>
    1ca2:	88 23       	and	r24, r24
    1ca4:	11 f0       	breq	.+4      	; 0x1caa <__floatsisf+0x48>
    1ca6:	96 e9       	ldi	r25, 0x96	; 150
    1ca8:	11 c0       	rjmp	.+34     	; 0x1ccc <__floatsisf+0x6a>
    1caa:	77 23       	and	r23, r23
    1cac:	21 f0       	breq	.+8      	; 0x1cb6 <__floatsisf+0x54>
    1cae:	9e e8       	ldi	r25, 0x8E	; 142
    1cb0:	87 2f       	mov	r24, r23
    1cb2:	76 2f       	mov	r23, r22
    1cb4:	05 c0       	rjmp	.+10     	; 0x1cc0 <__floatsisf+0x5e>
    1cb6:	66 23       	and	r22, r22
    1cb8:	71 f0       	breq	.+28     	; 0x1cd6 <__floatsisf+0x74>
    1cba:	96 e8       	ldi	r25, 0x86	; 134
    1cbc:	86 2f       	mov	r24, r22
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	2a f0       	brmi	.+10     	; 0x1cce <__floatsisf+0x6c>
    1cc4:	9a 95       	dec	r25
    1cc6:	66 0f       	add	r22, r22
    1cc8:	77 1f       	adc	r23, r23
    1cca:	88 1f       	adc	r24, r24
    1ccc:	da f7       	brpl	.-10     	; 0x1cc4 <__floatsisf+0x62>
    1cce:	88 0f       	add	r24, r24
    1cd0:	96 95       	lsr	r25
    1cd2:	87 95       	ror	r24
    1cd4:	97 f9       	bld	r25, 7
    1cd6:	08 95       	ret

00001cd8 <__fp_split3>:
    1cd8:	57 fd       	sbrc	r21, 7
    1cda:	90 58       	subi	r25, 0x80	; 128
    1cdc:	44 0f       	add	r20, r20
    1cde:	55 1f       	adc	r21, r21
    1ce0:	59 f0       	breq	.+22     	; 0x1cf8 <__fp_splitA+0x10>
    1ce2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce4:	71 f0       	breq	.+28     	; 0x1d02 <__fp_splitA+0x1a>
    1ce6:	47 95       	ror	r20

00001ce8 <__fp_splitA>:
    1ce8:	88 0f       	add	r24, r24
    1cea:	97 fb       	bst	r25, 7
    1cec:	99 1f       	adc	r25, r25
    1cee:	61 f0       	breq	.+24     	; 0x1d08 <__fp_splitA+0x20>
    1cf0:	9f 3f       	cpi	r25, 0xFF	; 255
    1cf2:	79 f0       	breq	.+30     	; 0x1d12 <__fp_splitA+0x2a>
    1cf4:	87 95       	ror	r24
    1cf6:	08 95       	ret
    1cf8:	12 16       	cp	r1, r18
    1cfa:	13 06       	cpc	r1, r19
    1cfc:	14 06       	cpc	r1, r20
    1cfe:	55 1f       	adc	r21, r21
    1d00:	f2 cf       	rjmp	.-28     	; 0x1ce6 <__fp_split3+0xe>
    1d02:	46 95       	lsr	r20
    1d04:	f1 df       	rcall	.-30     	; 0x1ce8 <__fp_splitA>
    1d06:	08 c0       	rjmp	.+16     	; 0x1d18 <__fp_splitA+0x30>
    1d08:	16 16       	cp	r1, r22
    1d0a:	17 06       	cpc	r1, r23
    1d0c:	18 06       	cpc	r1, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	f1 cf       	rjmp	.-30     	; 0x1cf4 <__fp_splitA+0xc>
    1d12:	86 95       	lsr	r24
    1d14:	71 05       	cpc	r23, r1
    1d16:	61 05       	cpc	r22, r1
    1d18:	08 94       	sec
    1d1a:	08 95       	ret

00001d1c <__fp_zero>:
    1d1c:	e8 94       	clt

00001d1e <__fp_szero>:
    1d1e:	bb 27       	eor	r27, r27
    1d20:	66 27       	eor	r22, r22
    1d22:	77 27       	eor	r23, r23
    1d24:	cb 01       	movw	r24, r22
    1d26:	97 f9       	bld	r25, 7
    1d28:	08 95       	ret

00001d2a <__mulsf3>:
    1d2a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__mulsf3x>
    1d2e:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__fp_round>
    1d32:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__fp_pscA>
    1d36:	38 f0       	brcs	.+14     	; 0x1d46 <__mulsf3+0x1c>
    1d38:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__fp_pscB>
    1d3c:	20 f0       	brcs	.+8      	; 0x1d46 <__mulsf3+0x1c>
    1d3e:	95 23       	and	r25, r21
    1d40:	11 f0       	breq	.+4      	; 0x1d46 <__mulsf3+0x1c>
    1d42:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__fp_inf>
    1d46:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__fp_nan>
    1d4a:	11 24       	eor	r1, r1
    1d4c:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__fp_szero>

00001d50 <__mulsf3x>:
    1d50:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__fp_split3>
    1d54:	70 f3       	brcs	.-36     	; 0x1d32 <__mulsf3+0x8>

00001d56 <__mulsf3_pse>:
    1d56:	95 9f       	mul	r25, r21
    1d58:	c1 f3       	breq	.-16     	; 0x1d4a <__mulsf3+0x20>
    1d5a:	95 0f       	add	r25, r21
    1d5c:	50 e0       	ldi	r21, 0x00	; 0
    1d5e:	55 1f       	adc	r21, r21
    1d60:	62 9f       	mul	r22, r18
    1d62:	f0 01       	movw	r30, r0
    1d64:	72 9f       	mul	r23, r18
    1d66:	bb 27       	eor	r27, r27
    1d68:	f0 0d       	add	r31, r0
    1d6a:	b1 1d       	adc	r27, r1
    1d6c:	63 9f       	mul	r22, r19
    1d6e:	aa 27       	eor	r26, r26
    1d70:	f0 0d       	add	r31, r0
    1d72:	b1 1d       	adc	r27, r1
    1d74:	aa 1f       	adc	r26, r26
    1d76:	64 9f       	mul	r22, r20
    1d78:	66 27       	eor	r22, r22
    1d7a:	b0 0d       	add	r27, r0
    1d7c:	a1 1d       	adc	r26, r1
    1d7e:	66 1f       	adc	r22, r22
    1d80:	82 9f       	mul	r24, r18
    1d82:	22 27       	eor	r18, r18
    1d84:	b0 0d       	add	r27, r0
    1d86:	a1 1d       	adc	r26, r1
    1d88:	62 1f       	adc	r22, r18
    1d8a:	73 9f       	mul	r23, r19
    1d8c:	b0 0d       	add	r27, r0
    1d8e:	a1 1d       	adc	r26, r1
    1d90:	62 1f       	adc	r22, r18
    1d92:	83 9f       	mul	r24, r19
    1d94:	a0 0d       	add	r26, r0
    1d96:	61 1d       	adc	r22, r1
    1d98:	22 1f       	adc	r18, r18
    1d9a:	74 9f       	mul	r23, r20
    1d9c:	33 27       	eor	r19, r19
    1d9e:	a0 0d       	add	r26, r0
    1da0:	61 1d       	adc	r22, r1
    1da2:	23 1f       	adc	r18, r19
    1da4:	84 9f       	mul	r24, r20
    1da6:	60 0d       	add	r22, r0
    1da8:	21 1d       	adc	r18, r1
    1daa:	82 2f       	mov	r24, r18
    1dac:	76 2f       	mov	r23, r22
    1dae:	6a 2f       	mov	r22, r26
    1db0:	11 24       	eor	r1, r1
    1db2:	9f 57       	subi	r25, 0x7F	; 127
    1db4:	50 40       	sbci	r21, 0x00	; 0
    1db6:	9a f0       	brmi	.+38     	; 0x1dde <__mulsf3_pse+0x88>
    1db8:	f1 f0       	breq	.+60     	; 0x1df6 <__mulsf3_pse+0xa0>
    1dba:	88 23       	and	r24, r24
    1dbc:	4a f0       	brmi	.+18     	; 0x1dd0 <__mulsf3_pse+0x7a>
    1dbe:	ee 0f       	add	r30, r30
    1dc0:	ff 1f       	adc	r31, r31
    1dc2:	bb 1f       	adc	r27, r27
    1dc4:	66 1f       	adc	r22, r22
    1dc6:	77 1f       	adc	r23, r23
    1dc8:	88 1f       	adc	r24, r24
    1dca:	91 50       	subi	r25, 0x01	; 1
    1dcc:	50 40       	sbci	r21, 0x00	; 0
    1dce:	a9 f7       	brne	.-22     	; 0x1dba <__mulsf3_pse+0x64>
    1dd0:	9e 3f       	cpi	r25, 0xFE	; 254
    1dd2:	51 05       	cpc	r21, r1
    1dd4:	80 f0       	brcs	.+32     	; 0x1df6 <__mulsf3_pse+0xa0>
    1dd6:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__fp_inf>
    1dda:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__fp_szero>
    1dde:	5f 3f       	cpi	r21, 0xFF	; 255
    1de0:	e4 f3       	brlt	.-8      	; 0x1dda <__mulsf3_pse+0x84>
    1de2:	98 3e       	cpi	r25, 0xE8	; 232
    1de4:	d4 f3       	brlt	.-12     	; 0x1dda <__mulsf3_pse+0x84>
    1de6:	86 95       	lsr	r24
    1de8:	77 95       	ror	r23
    1dea:	67 95       	ror	r22
    1dec:	b7 95       	ror	r27
    1dee:	f7 95       	ror	r31
    1df0:	e7 95       	ror	r30
    1df2:	9f 5f       	subi	r25, 0xFF	; 255
    1df4:	c1 f7       	brne	.-16     	; 0x1de6 <__mulsf3_pse+0x90>
    1df6:	fe 2b       	or	r31, r30
    1df8:	88 0f       	add	r24, r24
    1dfa:	91 1d       	adc	r25, r1
    1dfc:	96 95       	lsr	r25
    1dfe:	87 95       	ror	r24
    1e00:	97 f9       	bld	r25, 7
    1e02:	08 95       	ret

00001e04 <__fp_inf>:
    1e04:	97 f9       	bld	r25, 7
    1e06:	9f 67       	ori	r25, 0x7F	; 127
    1e08:	80 e8       	ldi	r24, 0x80	; 128
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	08 95       	ret

00001e10 <__fp_nan>:
    1e10:	9f ef       	ldi	r25, 0xFF	; 255
    1e12:	80 ec       	ldi	r24, 0xC0	; 192
    1e14:	08 95       	ret

00001e16 <__fp_pscA>:
    1e16:	00 24       	eor	r0, r0
    1e18:	0a 94       	dec	r0
    1e1a:	16 16       	cp	r1, r22
    1e1c:	17 06       	cpc	r1, r23
    1e1e:	18 06       	cpc	r1, r24
    1e20:	09 06       	cpc	r0, r25
    1e22:	08 95       	ret

00001e24 <__fp_pscB>:
    1e24:	00 24       	eor	r0, r0
    1e26:	0a 94       	dec	r0
    1e28:	12 16       	cp	r1, r18
    1e2a:	13 06       	cpc	r1, r19
    1e2c:	14 06       	cpc	r1, r20
    1e2e:	05 06       	cpc	r0, r21
    1e30:	08 95       	ret

00001e32 <__fp_round>:
    1e32:	09 2e       	mov	r0, r25
    1e34:	03 94       	inc	r0
    1e36:	00 0c       	add	r0, r0
    1e38:	11 f4       	brne	.+4      	; 0x1e3e <__fp_round+0xc>
    1e3a:	88 23       	and	r24, r24
    1e3c:	52 f0       	brmi	.+20     	; 0x1e52 <__fp_round+0x20>
    1e3e:	bb 0f       	add	r27, r27
    1e40:	40 f4       	brcc	.+16     	; 0x1e52 <__fp_round+0x20>
    1e42:	bf 2b       	or	r27, r31
    1e44:	11 f4       	brne	.+4      	; 0x1e4a <__fp_round+0x18>
    1e46:	60 ff       	sbrs	r22, 0
    1e48:	04 c0       	rjmp	.+8      	; 0x1e52 <__fp_round+0x20>
    1e4a:	6f 5f       	subi	r22, 0xFF	; 255
    1e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e50:	9f 4f       	sbci	r25, 0xFF	; 255
    1e52:	08 95       	ret

00001e54 <__udivmodsi4>:
    1e54:	a1 e2       	ldi	r26, 0x21	; 33
    1e56:	1a 2e       	mov	r1, r26
    1e58:	aa 1b       	sub	r26, r26
    1e5a:	bb 1b       	sub	r27, r27
    1e5c:	fd 01       	movw	r30, r26
    1e5e:	0d c0       	rjmp	.+26     	; 0x1e7a <__udivmodsi4_ep>

00001e60 <__udivmodsi4_loop>:
    1e60:	aa 1f       	adc	r26, r26
    1e62:	bb 1f       	adc	r27, r27
    1e64:	ee 1f       	adc	r30, r30
    1e66:	ff 1f       	adc	r31, r31
    1e68:	a2 17       	cp	r26, r18
    1e6a:	b3 07       	cpc	r27, r19
    1e6c:	e4 07       	cpc	r30, r20
    1e6e:	f5 07       	cpc	r31, r21
    1e70:	20 f0       	brcs	.+8      	; 0x1e7a <__udivmodsi4_ep>
    1e72:	a2 1b       	sub	r26, r18
    1e74:	b3 0b       	sbc	r27, r19
    1e76:	e4 0b       	sbc	r30, r20
    1e78:	f5 0b       	sbc	r31, r21

00001e7a <__udivmodsi4_ep>:
    1e7a:	66 1f       	adc	r22, r22
    1e7c:	77 1f       	adc	r23, r23
    1e7e:	88 1f       	adc	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	1a 94       	dec	r1
    1e84:	69 f7       	brne	.-38     	; 0x1e60 <__udivmodsi4_loop>
    1e86:	60 95       	com	r22
    1e88:	70 95       	com	r23
    1e8a:	80 95       	com	r24
    1e8c:	90 95       	com	r25
    1e8e:	9b 01       	movw	r18, r22
    1e90:	ac 01       	movw	r20, r24
    1e92:	bd 01       	movw	r22, r26
    1e94:	cf 01       	movw	r24, r30
    1e96:	08 95       	ret

00001e98 <__umulhisi3>:
    1e98:	a2 9f       	mul	r26, r18
    1e9a:	b0 01       	movw	r22, r0
    1e9c:	b3 9f       	mul	r27, r19
    1e9e:	c0 01       	movw	r24, r0
    1ea0:	a3 9f       	mul	r26, r19
    1ea2:	70 0d       	add	r23, r0
    1ea4:	81 1d       	adc	r24, r1
    1ea6:	11 24       	eor	r1, r1
    1ea8:	91 1d       	adc	r25, r1
    1eaa:	b2 9f       	mul	r27, r18
    1eac:	70 0d       	add	r23, r0
    1eae:	81 1d       	adc	r24, r1
    1eb0:	11 24       	eor	r1, r1
    1eb2:	91 1d       	adc	r25, r1
    1eb4:	08 95       	ret

00001eb6 <_exit>:
    1eb6:	f8 94       	cli

00001eb8 <__stop_program>:
    1eb8:	ff cf       	rjmp	.-2      	; 0x1eb8 <__stop_program>
