
Rover_Test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001eea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00001eea  00001f7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000047d  008000ba  008000ba  00001fd8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002008  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005e8  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005904  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001686  00000000  00000000  00007f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003210  00000000  00000000  000095b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010e4  00000000  00000000  0000c7c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019c3  00000000  00000000  0000d8ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000044a2  00000000  00000000  0000f26f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  00013711  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_1>
       8:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_2>
       c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_3>
      10:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__vector_4>
      14:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__vector_10>
      2c:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	25 e0       	ldi	r18, 0x05	; 5
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 33       	cpi	r26, 0x37	; 55
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 36 09 	call	0x126c	; 0x126c <main>
      8a:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDir>:
      92:	41 30       	cpi	r20, 0x01	; 1
      94:	a1 f5       	brne	.+104    	; 0xfe <DIO_voidSetPinDir+0x6c>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	89 f0       	breq	.+34     	; 0xbc <DIO_voidSetPinDir+0x2a>
      9a:	28 f0       	brcs	.+10     	; 0xa6 <DIO_voidSetPinDir+0x14>
      9c:	82 30       	cpi	r24, 0x02	; 2
      9e:	c9 f0       	breq	.+50     	; 0xd2 <DIO_voidSetPinDir+0x40>
      a0:	83 30       	cpi	r24, 0x03	; 3
      a2:	11 f1       	breq	.+68     	; 0xe8 <DIO_voidSetPinDir+0x56>
      a4:	08 95       	ret
      a6:	2a b3       	in	r18, 0x1a	; 26
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_voidSetPinDir+0x20>
      ae:	88 0f       	add	r24, r24
      b0:	99 1f       	adc	r25, r25
      b2:	6a 95       	dec	r22
      b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_voidSetPinDir+0x1c>
      b6:	82 2b       	or	r24, r18
      b8:	8a bb       	out	0x1a, r24	; 26
      ba:	08 95       	ret
      bc:	27 b3       	in	r18, 0x17	; 23
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_voidSetPinDir+0x36>
      c4:	88 0f       	add	r24, r24
      c6:	99 1f       	adc	r25, r25
      c8:	6a 95       	dec	r22
      ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_voidSetPinDir+0x32>
      cc:	82 2b       	or	r24, r18
      ce:	87 bb       	out	0x17, r24	; 23
      d0:	08 95       	ret
      d2:	24 b3       	in	r18, 0x14	; 20
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_voidSetPinDir+0x4c>
      da:	88 0f       	add	r24, r24
      dc:	99 1f       	adc	r25, r25
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_voidSetPinDir+0x48>
      e2:	82 2b       	or	r24, r18
      e4:	84 bb       	out	0x14, r24	; 20
      e6:	08 95       	ret
      e8:	21 b3       	in	r18, 0x11	; 17
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPinDir+0x62>
      f0:	88 0f       	add	r24, r24
      f2:	99 1f       	adc	r25, r25
      f4:	6a 95       	dec	r22
      f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPinDir+0x5e>
      f8:	82 2b       	or	r24, r18
      fa:	81 bb       	out	0x11, r24	; 17
      fc:	08 95       	ret
      fe:	41 11       	cpse	r20, r1
     100:	37 c0       	rjmp	.+110    	; 0x170 <DIO_voidSetPinDir+0xde>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	91 f0       	breq	.+36     	; 0x12a <DIO_voidSetPinDir+0x98>
     106:	28 f0       	brcs	.+10     	; 0x112 <DIO_voidSetPinDir+0x80>
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	d9 f0       	breq	.+54     	; 0x142 <DIO_voidSetPinDir+0xb0>
     10c:	83 30       	cpi	r24, 0x03	; 3
     10e:	29 f1       	breq	.+74     	; 0x15a <DIO_voidSetPinDir+0xc8>
     110:	08 95       	ret
     112:	2a b3       	in	r18, 0x1a	; 26
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinDir+0x8c>
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	6a 95       	dec	r22
     120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinDir+0x88>
     122:	80 95       	com	r24
     124:	82 23       	and	r24, r18
     126:	8a bb       	out	0x1a, r24	; 26
     128:	08 95       	ret
     12a:	27 b3       	in	r18, 0x17	; 23
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_voidSetPinDir+0xa4>
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_voidSetPinDir+0xa0>
     13a:	80 95       	com	r24
     13c:	82 23       	and	r24, r18
     13e:	87 bb       	out	0x17, r24	; 23
     140:	08 95       	ret
     142:	24 b3       	in	r18, 0x14	; 20
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_voidSetPinDir+0xbc>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	6a 95       	dec	r22
     150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_voidSetPinDir+0xb8>
     152:	80 95       	com	r24
     154:	82 23       	and	r24, r18
     156:	84 bb       	out	0x14, r24	; 20
     158:	08 95       	ret
     15a:	21 b3       	in	r18, 0x11	; 17
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_voidSetPinDir+0xd4>
     162:	88 0f       	add	r24, r24
     164:	99 1f       	adc	r25, r25
     166:	6a 95       	dec	r22
     168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_voidSetPinDir+0xd0>
     16a:	80 95       	com	r24
     16c:	82 23       	and	r24, r18
     16e:	81 bb       	out	0x11, r24	; 17
     170:	08 95       	ret

00000172 <DIO_voidSetPinVal>:
     172:	41 30       	cpi	r20, 0x01	; 1
     174:	a1 f5       	brne	.+104    	; 0x1de <DIO_voidSetPinVal+0x6c>
     176:	81 30       	cpi	r24, 0x01	; 1
     178:	89 f0       	breq	.+34     	; 0x19c <DIO_voidSetPinVal+0x2a>
     17a:	28 f0       	brcs	.+10     	; 0x186 <DIO_voidSetPinVal+0x14>
     17c:	82 30       	cpi	r24, 0x02	; 2
     17e:	c9 f0       	breq	.+50     	; 0x1b2 <DIO_voidSetPinVal+0x40>
     180:	83 30       	cpi	r24, 0x03	; 3
     182:	11 f1       	breq	.+68     	; 0x1c8 <DIO_voidSetPinVal+0x56>
     184:	08 95       	ret
     186:	2b b3       	in	r18, 0x1b	; 27
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_voidSetPinVal+0x20>
     18e:	88 0f       	add	r24, r24
     190:	99 1f       	adc	r25, r25
     192:	6a 95       	dec	r22
     194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_voidSetPinVal+0x1c>
     196:	82 2b       	or	r24, r18
     198:	8b bb       	out	0x1b, r24	; 27
     19a:	08 95       	ret
     19c:	28 b3       	in	r18, 0x18	; 24
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_voidSetPinVal+0x36>
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	6a 95       	dec	r22
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_voidSetPinVal+0x32>
     1ac:	82 2b       	or	r24, r18
     1ae:	88 bb       	out	0x18, r24	; 24
     1b0:	08 95       	ret
     1b2:	25 b3       	in	r18, 0x15	; 21
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_voidSetPinVal+0x4c>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	6a 95       	dec	r22
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_voidSetPinVal+0x48>
     1c2:	82 2b       	or	r24, r18
     1c4:	85 bb       	out	0x15, r24	; 21
     1c6:	08 95       	ret
     1c8:	22 b3       	in	r18, 0x12	; 18
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_voidSetPinVal+0x62>
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	6a 95       	dec	r22
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_voidSetPinVal+0x5e>
     1d8:	82 2b       	or	r24, r18
     1da:	82 bb       	out	0x12, r24	; 18
     1dc:	08 95       	ret
     1de:	41 11       	cpse	r20, r1
     1e0:	37 c0       	rjmp	.+110    	; 0x250 <DIO_voidSetPinVal+0xde>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	91 f0       	breq	.+36     	; 0x20a <DIO_voidSetPinVal+0x98>
     1e6:	28 f0       	brcs	.+10     	; 0x1f2 <DIO_voidSetPinVal+0x80>
     1e8:	82 30       	cpi	r24, 0x02	; 2
     1ea:	d9 f0       	breq	.+54     	; 0x222 <DIO_voidSetPinVal+0xb0>
     1ec:	83 30       	cpi	r24, 0x03	; 3
     1ee:	29 f1       	breq	.+74     	; 0x23a <DIO_voidSetPinVal+0xc8>
     1f0:	08 95       	ret
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_voidSetPinVal+0x8c>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	6a 95       	dec	r22
     200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_voidSetPinVal+0x88>
     202:	80 95       	com	r24
     204:	82 23       	and	r24, r18
     206:	8b bb       	out	0x1b, r24	; 27
     208:	08 95       	ret
     20a:	28 b3       	in	r18, 0x18	; 24
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_voidSetPinVal+0xa4>
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	6a 95       	dec	r22
     218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_voidSetPinVal+0xa0>
     21a:	80 95       	com	r24
     21c:	82 23       	and	r24, r18
     21e:	88 bb       	out	0x18, r24	; 24
     220:	08 95       	ret
     222:	25 b3       	in	r18, 0x15	; 21
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinVal+0xbc>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinVal+0xb8>
     232:	80 95       	com	r24
     234:	82 23       	and	r24, r18
     236:	85 bb       	out	0x15, r24	; 21
     238:	08 95       	ret
     23a:	22 b3       	in	r18, 0x12	; 18
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_voidSetPinVal+0xd4>
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	6a 95       	dec	r22
     248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_voidSetPinVal+0xd0>
     24a:	80 95       	com	r24
     24c:	82 23       	and	r24, r18
     24e:	82 bb       	out	0x12, r24	; 18
     250:	08 95       	ret

00000252 <DIO_u8GetPinVal>:
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	79 f0       	breq	.+30     	; 0x274 <DIO_u8GetPinVal+0x22>
     256:	28 f0       	brcs	.+10     	; 0x262 <DIO_u8GetPinVal+0x10>
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	a9 f0       	breq	.+42     	; 0x286 <DIO_u8GetPinVal+0x34>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	e1 f0       	breq	.+56     	; 0x298 <DIO_u8GetPinVal+0x46>
     260:	24 c0       	rjmp	.+72     	; 0x2aa <DIO_u8GetPinVal+0x58>
     262:	89 b3       	in	r24, 0x19	; 25
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_u8GetPinVal+0x1a>
     268:	95 95       	asr	r25
     26a:	87 95       	ror	r24
     26c:	6a 95       	dec	r22
     26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_u8GetPinVal+0x16>
     270:	81 70       	andi	r24, 0x01	; 1
     272:	08 95       	ret
     274:	86 b3       	in	r24, 0x16	; 22
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_u8GetPinVal+0x2c>
     27a:	95 95       	asr	r25
     27c:	87 95       	ror	r24
     27e:	6a 95       	dec	r22
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_u8GetPinVal+0x28>
     282:	81 70       	andi	r24, 0x01	; 1
     284:	08 95       	ret
     286:	83 b3       	in	r24, 0x13	; 19
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_u8GetPinVal+0x3e>
     28c:	95 95       	asr	r25
     28e:	87 95       	ror	r24
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_u8GetPinVal+0x3a>
     294:	81 70       	andi	r24, 0x01	; 1
     296:	08 95       	ret
     298:	80 b3       	in	r24, 0x10	; 16
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8GetPinVal+0x50>
     29e:	95 95       	asr	r25
     2a0:	87 95       	ror	r24
     2a2:	6a 95       	dec	r22
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_u8GetPinVal+0x4c>
     2a6:	81 70       	andi	r24, 0x01	; 1
     2a8:	08 95       	ret
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	08 95       	ret

000002ae <__vector_1>:
     2ae:	1f 92       	push	r1
     2b0:	0f 92       	push	r0
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	0f 92       	push	r0
     2b6:	11 24       	eor	r1, r1
     2b8:	2f 93       	push	r18
     2ba:	3f 93       	push	r19
     2bc:	4f 93       	push	r20
     2be:	5f 93       	push	r21
     2c0:	6f 93       	push	r22
     2c2:	7f 93       	push	r23
     2c4:	8f 93       	push	r24
     2c6:	9f 93       	push	r25
     2c8:	af 93       	push	r26
     2ca:	bf 93       	push	r27
     2cc:	ef 93       	push	r30
     2ce:	ff 93       	push	r31
     2d0:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <INT_0_PTR>
     2d4:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <INT_0_PTR+0x1>
     2d8:	09 95       	icall
     2da:	ff 91       	pop	r31
     2dc:	ef 91       	pop	r30
     2de:	bf 91       	pop	r27
     2e0:	af 91       	pop	r26
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	7f 91       	pop	r23
     2e8:	6f 91       	pop	r22
     2ea:	5f 91       	pop	r21
     2ec:	4f 91       	pop	r20
     2ee:	3f 91       	pop	r19
     2f0:	2f 91       	pop	r18
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <__vector_2>:
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	2f 93       	push	r18
     308:	3f 93       	push	r19
     30a:	4f 93       	push	r20
     30c:	5f 93       	push	r21
     30e:	6f 93       	push	r22
     310:	7f 93       	push	r23
     312:	8f 93       	push	r24
     314:	9f 93       	push	r25
     316:	af 93       	push	r26
     318:	bf 93       	push	r27
     31a:	ef 93       	push	r30
     31c:	ff 93       	push	r31
     31e:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <INT_1_PTR>
     322:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <INT_1_PTR+0x1>
     326:	09 95       	icall
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	7f 91       	pop	r23
     336:	6f 91       	pop	r22
     338:	5f 91       	pop	r21
     33a:	4f 91       	pop	r20
     33c:	3f 91       	pop	r19
     33e:	2f 91       	pop	r18
     340:	0f 90       	pop	r0
     342:	0f be       	out	0x3f, r0	; 63
     344:	0f 90       	pop	r0
     346:	1f 90       	pop	r1
     348:	18 95       	reti

0000034a <__vector_3>:
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	2f 93       	push	r18
     356:	3f 93       	push	r19
     358:	4f 93       	push	r20
     35a:	5f 93       	push	r21
     35c:	6f 93       	push	r22
     35e:	7f 93       	push	r23
     360:	8f 93       	push	r24
     362:	9f 93       	push	r25
     364:	af 93       	push	r26
     366:	bf 93       	push	r27
     368:	ef 93       	push	r30
     36a:	ff 93       	push	r31
     36c:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <__data_end>
     370:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <__data_end+0x1>
     374:	09 95       	icall
     376:	ff 91       	pop	r31
     378:	ef 91       	pop	r30
     37a:	bf 91       	pop	r27
     37c:	af 91       	pop	r26
     37e:	9f 91       	pop	r25
     380:	8f 91       	pop	r24
     382:	7f 91       	pop	r23
     384:	6f 91       	pop	r22
     386:	5f 91       	pop	r21
     388:	4f 91       	pop	r20
     38a:	3f 91       	pop	r19
     38c:	2f 91       	pop	r18
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
     392:	0f 90       	pop	r0
     394:	1f 90       	pop	r1
     396:	18 95       	reti

00000398 <prvHeapInit>:
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     398:	e5 ec       	ldi	r30, 0xC5	; 197
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	8a ec       	ldi	r24, 0xCA	; 202
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
	xStart.xBlockSize = ( size_t ) 0;
     3a4:	13 82       	std	Z+3, r1	; 0x03
     3a6:	12 82       	std	Z+2, r1	; 0x02

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     3a8:	e1 ec       	ldi	r30, 0xC1	; 193
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	87 ee       	ldi	r24, 0xE7	; 231
     3ae:	93 e0       	ldi	r25, 0x03	; 3
     3b0:	93 83       	std	Z+3, r25	; 0x03
     3b2:	82 83       	std	Z+2, r24	; 0x02
	xEnd.pxNextFreeBlock = NULL;
     3b4:	11 82       	std	Z+1, r1	; 0x01
     3b6:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     3b8:	a9 ec       	ldi	r26, 0xC9	; 201
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	14 96       	adiw	r26, 0x04	; 4
     3be:	9c 93       	st	X, r25
     3c0:	8e 93       	st	-X, r24
     3c2:	13 97       	sbiw	r26, 0x03	; 3
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     3c4:	12 96       	adiw	r26, 0x02	; 2
     3c6:	fc 93       	st	X, r31
     3c8:	ee 93       	st	-X, r30
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	08 95       	ret

000003ce <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     3d8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     3dc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <xHeapHasBeenInitialised.2079>
     3e0:	81 11       	cpse	r24, r1
     3e2:	05 c0       	rjmp	.+10     	; 0x3ee <pvPortMalloc+0x20>
		{
			prvHeapInit();
     3e4:	0e 94 cc 01 	call	0x398	; 0x398 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <xHeapHasBeenInitialised.2079>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     3ee:	20 97       	sbiw	r28, 0x00	; 0
     3f0:	09 f0       	breq	.+2      	; 0x3f4 <pvPortMalloc+0x26>
		{
			xWantedSize += heapSTRUCT_SIZE;
     3f2:	24 96       	adiw	r28, 0x04	; 4
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     3f4:	ce 01       	movw	r24, r28
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	86 3e       	cpi	r24, 0xE6	; 230
     3fa:	93 40       	sbci	r25, 0x03	; 3
     3fc:	08 f0       	brcs	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	56 c0       	rjmp	.+172    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     400:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <xStart>
     404:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     408:	a5 ec       	ldi	r26, 0xC5	; 197
     40a:	b0 e0       	ldi	r27, 0x00	; 0
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
			{
				pxPreviousBlock = pxBlock;
     40e:	df 01       	movw	r26, r30
				pxBlock = pxBlock->pxNextFreeBlock;
     410:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     412:	82 81       	ldd	r24, Z+2	; 0x02
     414:	93 81       	ldd	r25, Z+3	; 0x03
     416:	8c 17       	cp	r24, r28
     418:	9d 07       	cpc	r25, r29
     41a:	20 f4       	brcc	.+8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     41c:	80 81       	ld	r24, Z
     41e:	91 81       	ldd	r25, Z+1	; 0x01
     420:	00 97       	sbiw	r24, 0x00	; 0
     422:	a9 f7       	brne	.-22     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	e1 3c       	cpi	r30, 0xC1	; 193
     428:	f8 07       	cpc	r31, r24
     42a:	09 f4       	brne	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42c:	42 c0       	rjmp	.+132    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     42e:	0d 91       	ld	r16, X+
     430:	1c 91       	ld	r17, X
     432:	11 97       	sbiw	r26, 0x01	; 1
     434:	0c 5f       	subi	r16, 0xFC	; 252
     436:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     438:	80 81       	ld	r24, Z
     43a:	91 81       	ldd	r25, Z+1	; 0x01
     43c:	8d 93       	st	X+, r24
     43e:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     440:	82 81       	ldd	r24, Z+2	; 0x02
     442:	93 81       	ldd	r25, Z+3	; 0x03
     444:	8c 1b       	sub	r24, r28
     446:	9d 0b       	sbc	r25, r29
     448:	89 30       	cpi	r24, 0x09	; 9
     44a:	91 05       	cpc	r25, r1
     44c:	10 f1       	brcs	.+68     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     44e:	af 01       	movw	r20, r30
     450:	4c 0f       	add	r20, r28
     452:	5d 1f       	adc	r21, r29

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     454:	da 01       	movw	r26, r20
     456:	13 96       	adiw	r26, 0x03	; 3
     458:	9c 93       	st	X, r25
     45a:	8e 93       	st	-X, r24
     45c:	12 97       	sbiw	r26, 0x02	; 2
					pxBlock->xBlockSize = xWantedSize;
     45e:	d3 83       	std	Z+3, r29	; 0x03
     460:	c2 83       	std	Z+2, r28	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     462:	12 96       	adiw	r26, 0x02	; 2
     464:	2d 91       	ld	r18, X+
     466:	3c 91       	ld	r19, X
     468:	13 97       	sbiw	r26, 0x03	; 3
     46a:	65 ec       	ldi	r22, 0xC5	; 197
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	01 c0       	rjmp	.+2      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     470:	bd 01       	movw	r22, r26
     472:	eb 01       	movw	r28, r22
     474:	a8 81       	ld	r26, Y
     476:	b9 81       	ldd	r27, Y+1	; 0x01
     478:	12 96       	adiw	r26, 0x02	; 2
     47a:	8d 91       	ld	r24, X+
     47c:	9c 91       	ld	r25, X
     47e:	13 97       	sbiw	r26, 0x03	; 3
     480:	82 17       	cp	r24, r18
     482:	93 07       	cpc	r25, r19
     484:	a8 f3       	brcs	.-22     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     486:	ea 01       	movw	r28, r20
     488:	b9 83       	std	Y+1, r27	; 0x01
     48a:	a8 83       	st	Y, r26
     48c:	db 01       	movw	r26, r22
     48e:	4d 93       	st	X+, r20
     490:	5c 93       	st	X, r21
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     492:	22 81       	ldd	r18, Z+2	; 0x02
     494:	33 81       	ldd	r19, Z+3	; 0x03
     496:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     49a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     49e:	82 1b       	sub	r24, r18
     4a0:	93 0b       	sbc	r25, r19
     4a2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	10 e0       	ldi	r17, 0x00	; 0
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b2:	00 e0       	ldi	r16, 0x00	; 0
     4b4:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     4b6:	0e 94 1d 07 	call	0xe3a	; 0xe3a <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     4ba:	c8 01       	movw	r24, r16
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	08 95       	ret

000004c6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     4ce:	00 97       	sbiw	r24, 0x00	; 0
     4d0:	41 f1       	breq	.+80     	; 0x522 <vPortFree+0x5c>
     4d2:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     4d4:	8c 01       	movw	r16, r24
     4d6:	04 50       	subi	r16, 0x04	; 4
     4d8:	11 09       	sbc	r17, r1

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     4da:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     4de:	f8 01       	movw	r30, r16
     4e0:	42 81       	ldd	r20, Z+2	; 0x02
     4e2:	53 81       	ldd	r21, Z+3	; 0x03
     4e4:	a5 ec       	ldi	r26, 0xC5	; 197
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <vPortFree+0x26>
     4ea:	df 01       	movw	r26, r30
     4ec:	ed 91       	ld	r30, X+
     4ee:	fc 91       	ld	r31, X
     4f0:	11 97       	sbiw	r26, 0x01	; 1
     4f2:	22 81       	ldd	r18, Z+2	; 0x02
     4f4:	33 81       	ldd	r19, Z+3	; 0x03
     4f6:	24 17       	cp	r18, r20
     4f8:	35 07       	cpc	r19, r21
     4fa:	b8 f3       	brcs	.-18     	; 0x4ea <vPortFree+0x24>
     4fc:	24 97       	sbiw	r28, 0x04	; 4
     4fe:	f9 83       	std	Y+1, r31	; 0x01
     500:	e8 83       	st	Y, r30
     502:	0d 93       	st	X+, r16
     504:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
     506:	8a 81       	ldd	r24, Y+2	; 0x02
     508:	9b 81       	ldd	r25, Y+3	; 0x03
     50a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     50e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     512:	82 0f       	add	r24, r18
     514:	93 1f       	adc	r25, r19
     516:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     51a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     51e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <xTaskResumeAll>
	}
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     52c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     52e:	03 96       	adiw	r24, 0x03	; 3
     530:	92 83       	std	Z+2, r25	; 0x02
     532:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     534:	2f ef       	ldi	r18, 0xFF	; 255
     536:	3f ef       	ldi	r19, 0xFF	; 255
     538:	34 83       	std	Z+4, r19	; 0x04
     53a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     53c:	96 83       	std	Z+6, r25	; 0x06
     53e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     540:	90 87       	std	Z+8, r25	; 0x08
     542:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     544:	10 82       	st	Z, r1
     546:	08 95       	ret

00000548 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     548:	fc 01       	movw	r30, r24
     54a:	11 86       	std	Z+9, r1	; 0x09
     54c:	10 86       	std	Z+8, r1	; 0x08
     54e:	08 95       	ret

00000550 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	9c 01       	movw	r18, r24
     556:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     558:	dc 01       	movw	r26, r24
     55a:	11 96       	adiw	r26, 0x01	; 1
     55c:	cd 91       	ld	r28, X+
     55e:	dc 91       	ld	r29, X
     560:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     562:	d3 83       	std	Z+3, r29	; 0x03
     564:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     566:	8c 81       	ldd	r24, Y+4	; 0x04
     568:	9d 81       	ldd	r25, Y+5	; 0x05
     56a:	95 83       	std	Z+5, r25	; 0x05
     56c:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     56e:	8c 81       	ldd	r24, Y+4	; 0x04
     570:	9d 81       	ldd	r25, Y+5	; 0x05
     572:	dc 01       	movw	r26, r24
     574:	13 96       	adiw	r26, 0x03	; 3
     576:	7c 93       	st	X, r23
     578:	6e 93       	st	-X, r22
     57a:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     57c:	7d 83       	std	Y+5, r23	; 0x05
     57e:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     580:	31 87       	std	Z+9, r19	; 0x09
     582:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     584:	f9 01       	movw	r30, r18
     586:	80 81       	ld	r24, Z
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	80 83       	st	Z, r24
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     598:	48 81       	ld	r20, Y
     59a:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     59c:	4f 3f       	cpi	r20, 0xFF	; 255
     59e:	2f ef       	ldi	r18, 0xFF	; 255
     5a0:	52 07       	cpc	r21, r18
     5a2:	21 f4       	brne	.+8      	; 0x5ac <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     5a4:	fc 01       	movw	r30, r24
     5a6:	a7 81       	ldd	r26, Z+7	; 0x07
     5a8:	b0 85       	ldd	r27, Z+8	; 0x08
     5aa:	0d c0       	rjmp	.+26     	; 0x5c6 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5ac:	dc 01       	movw	r26, r24
     5ae:	13 96       	adiw	r26, 0x03	; 3
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <vListInsert+0x22>
     5b2:	df 01       	movw	r26, r30
     5b4:	12 96       	adiw	r26, 0x02	; 2
     5b6:	ed 91       	ld	r30, X+
     5b8:	fc 91       	ld	r31, X
     5ba:	13 97       	sbiw	r26, 0x03	; 3
     5bc:	20 81       	ld	r18, Z
     5be:	31 81       	ldd	r19, Z+1	; 0x01
     5c0:	42 17       	cp	r20, r18
     5c2:	53 07       	cpc	r21, r19
     5c4:	b0 f7       	brcc	.-20     	; 0x5b2 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     5c6:	12 96       	adiw	r26, 0x02	; 2
     5c8:	ed 91       	ld	r30, X+
     5ca:	fc 91       	ld	r31, X
     5cc:	13 97       	sbiw	r26, 0x03	; 3
     5ce:	fb 83       	std	Y+3, r31	; 0x03
     5d0:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5d2:	d5 83       	std	Z+5, r29	; 0x05
     5d4:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     5d6:	bd 83       	std	Y+5, r27	; 0x05
     5d8:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     5da:	13 96       	adiw	r26, 0x03	; 3
     5dc:	dc 93       	st	X, r29
     5de:	ce 93       	st	-X, r28
     5e0:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     5e2:	99 87       	std	Y+9, r25	; 0x09
     5e4:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 81       	ld	r18, Z
     5ea:	2f 5f       	subi	r18, 0xFF	; 255
     5ec:	20 83       	st	Z, r18
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     5fa:	a0 85       	ldd	r26, Z+8	; 0x08
     5fc:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5fe:	c2 81       	ldd	r28, Z+2	; 0x02
     600:	d3 81       	ldd	r29, Z+3	; 0x03
     602:	84 81       	ldd	r24, Z+4	; 0x04
     604:	95 81       	ldd	r25, Z+5	; 0x05
     606:	9d 83       	std	Y+5, r25	; 0x05
     608:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     60a:	c4 81       	ldd	r28, Z+4	; 0x04
     60c:	d5 81       	ldd	r29, Z+5	; 0x05
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	9b 83       	std	Y+3, r25	; 0x03
     614:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     616:	11 96       	adiw	r26, 0x01	; 1
     618:	8d 91       	ld	r24, X+
     61a:	9c 91       	ld	r25, X
     61c:	12 97       	sbiw	r26, 0x02	; 2
     61e:	e8 17       	cp	r30, r24
     620:	f9 07       	cpc	r31, r25
     622:	31 f4       	brne	.+12     	; 0x630 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     624:	84 81       	ldd	r24, Z+4	; 0x04
     626:	95 81       	ldd	r25, Z+5	; 0x05
     628:	12 96       	adiw	r26, 0x02	; 2
     62a:	9c 93       	st	X, r25
     62c:	8e 93       	st	-X, r24
     62e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     630:	11 86       	std	Z+9, r1	; 0x09
     632:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     634:	8c 91       	ld	r24, X
     636:	81 50       	subi	r24, 0x01	; 1
     638:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <prvSetupTimerInterrupt>:
	{
		vTaskSwitchContext();
	}
	portRESTORE_CONTEXT();

	asm volatile ( "ret" );
     640:	1b bc       	out	0x2b, r1	; 43
     642:	89 ef       	ldi	r24, 0xF9	; 249
     644:	8a bd       	out	0x2a, r24	; 42
     646:	8b e0       	ldi	r24, 0x0B	; 11
     648:	8e bd       	out	0x2e, r24	; 46
     64a:	89 b7       	in	r24, 0x39	; 57
     64c:	80 61       	ori	r24, 0x10	; 16
     64e:	89 bf       	out	0x39, r24	; 57
     650:	08 95       	ret

00000652 <pxPortInitialiseStack>:
     652:	31 e1       	ldi	r19, 0x11	; 17
     654:	fc 01       	movw	r30, r24
     656:	30 83       	st	Z, r19
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	22 e2       	ldi	r18, 0x22	; 34
     65c:	20 83       	st	Z, r18
     65e:	31 97       	sbiw	r30, 0x01	; 1
     660:	a3 e3       	ldi	r26, 0x33	; 51
     662:	a0 83       	st	Z, r26
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	60 83       	st	Z, r22
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	70 83       	st	Z, r23
     66c:	31 97       	sbiw	r30, 0x01	; 1
     66e:	10 82       	st	Z, r1
     670:	31 97       	sbiw	r30, 0x01	; 1
     672:	60 e8       	ldi	r22, 0x80	; 128
     674:	60 83       	st	Z, r22
     676:	31 97       	sbiw	r30, 0x01	; 1
     678:	10 82       	st	Z, r1
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	62 e0       	ldi	r22, 0x02	; 2
     67e:	60 83       	st	Z, r22
     680:	31 97       	sbiw	r30, 0x01	; 1
     682:	63 e0       	ldi	r22, 0x03	; 3
     684:	60 83       	st	Z, r22
     686:	31 97       	sbiw	r30, 0x01	; 1
     688:	64 e0       	ldi	r22, 0x04	; 4
     68a:	60 83       	st	Z, r22
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	65 e0       	ldi	r22, 0x05	; 5
     690:	60 83       	st	Z, r22
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	66 e0       	ldi	r22, 0x06	; 6
     696:	60 83       	st	Z, r22
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	60 83       	st	Z, r22
     69e:	31 97       	sbiw	r30, 0x01	; 1
     6a0:	68 e0       	ldi	r22, 0x08	; 8
     6a2:	60 83       	st	Z, r22
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	69 e0       	ldi	r22, 0x09	; 9
     6a8:	60 83       	st	Z, r22
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	60 e1       	ldi	r22, 0x10	; 16
     6ae:	60 83       	st	Z, r22
     6b0:	31 97       	sbiw	r30, 0x01	; 1
     6b2:	30 83       	st	Z, r19
     6b4:	31 97       	sbiw	r30, 0x01	; 1
     6b6:	32 e1       	ldi	r19, 0x12	; 18
     6b8:	30 83       	st	Z, r19
     6ba:	31 97       	sbiw	r30, 0x01	; 1
     6bc:	33 e1       	ldi	r19, 0x13	; 19
     6be:	30 83       	st	Z, r19
     6c0:	31 97       	sbiw	r30, 0x01	; 1
     6c2:	34 e1       	ldi	r19, 0x14	; 20
     6c4:	30 83       	st	Z, r19
     6c6:	31 97       	sbiw	r30, 0x01	; 1
     6c8:	35 e1       	ldi	r19, 0x15	; 21
     6ca:	30 83       	st	Z, r19
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	36 e1       	ldi	r19, 0x16	; 22
     6d0:	30 83       	st	Z, r19
     6d2:	31 97       	sbiw	r30, 0x01	; 1
     6d4:	37 e1       	ldi	r19, 0x17	; 23
     6d6:	30 83       	st	Z, r19
     6d8:	31 97       	sbiw	r30, 0x01	; 1
     6da:	38 e1       	ldi	r19, 0x18	; 24
     6dc:	30 83       	st	Z, r19
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	39 e1       	ldi	r19, 0x19	; 25
     6e2:	30 83       	st	Z, r19
     6e4:	31 97       	sbiw	r30, 0x01	; 1
     6e6:	30 e2       	ldi	r19, 0x20	; 32
     6e8:	30 83       	st	Z, r19
     6ea:	31 97       	sbiw	r30, 0x01	; 1
     6ec:	31 e2       	ldi	r19, 0x21	; 33
     6ee:	30 83       	st	Z, r19
     6f0:	31 97       	sbiw	r30, 0x01	; 1
     6f2:	20 83       	st	Z, r18
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	23 e2       	ldi	r18, 0x23	; 35
     6f8:	20 83       	st	Z, r18
     6fa:	31 97       	sbiw	r30, 0x01	; 1
     6fc:	40 83       	st	Z, r20
     6fe:	31 97       	sbiw	r30, 0x01	; 1
     700:	50 83       	st	Z, r21
     702:	31 97       	sbiw	r30, 0x01	; 1
     704:	26 e2       	ldi	r18, 0x26	; 38
     706:	20 83       	st	Z, r18
     708:	31 97       	sbiw	r30, 0x01	; 1
     70a:	27 e2       	ldi	r18, 0x27	; 39
     70c:	20 83       	st	Z, r18
     70e:	31 97       	sbiw	r30, 0x01	; 1
     710:	28 e2       	ldi	r18, 0x28	; 40
     712:	20 83       	st	Z, r18
     714:	31 97       	sbiw	r30, 0x01	; 1
     716:	29 e2       	ldi	r18, 0x29	; 41
     718:	20 83       	st	Z, r18
     71a:	31 97       	sbiw	r30, 0x01	; 1
     71c:	20 e3       	ldi	r18, 0x30	; 48
     71e:	20 83       	st	Z, r18
     720:	31 97       	sbiw	r30, 0x01	; 1
     722:	21 e3       	ldi	r18, 0x31	; 49
     724:	20 83       	st	Z, r18
     726:	86 97       	sbiw	r24, 0x26	; 38
     728:	08 95       	ret

0000072a <xPortStartScheduler>:
     72a:	0e 94 20 03 	call	0x640	; 0x640 <prvSetupTimerInterrupt>
     72e:	a0 91 27 05 	lds	r26, 0x0527	; 0x800527 <pxCurrentTCB>
     732:	b0 91 28 05 	lds	r27, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     736:	cd 91       	ld	r28, X+
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	dd 91       	ld	r29, X+
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	bf 91       	pop	r27
     748:	af 91       	pop	r26
     74a:	9f 91       	pop	r25
     74c:	8f 91       	pop	r24
     74e:	7f 91       	pop	r23
     750:	6f 91       	pop	r22
     752:	5f 91       	pop	r21
     754:	4f 91       	pop	r20
     756:	3f 91       	pop	r19
     758:	2f 91       	pop	r18
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	bf 90       	pop	r11
     768:	af 90       	pop	r10
     76a:	9f 90       	pop	r9
     76c:	8f 90       	pop	r8
     76e:	7f 90       	pop	r7
     770:	6f 90       	pop	r6
     772:	5f 90       	pop	r5
     774:	4f 90       	pop	r4
     776:	3f 90       	pop	r3
     778:	2f 90       	pop	r2
     77a:	1f 90       	pop	r1
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	0f 90       	pop	r0
     782:	08 95       	ret
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	08 95       	ret

00000788 <vPortYield>:
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	0f 92       	push	r0
     790:	1f 92       	push	r1
     792:	11 24       	eor	r1, r1
     794:	2f 92       	push	r2
     796:	3f 92       	push	r3
     798:	4f 92       	push	r4
     79a:	5f 92       	push	r5
     79c:	6f 92       	push	r6
     79e:	7f 92       	push	r7
     7a0:	8f 92       	push	r8
     7a2:	9f 92       	push	r9
     7a4:	af 92       	push	r10
     7a6:	bf 92       	push	r11
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	2f 93       	push	r18
     7b6:	3f 93       	push	r19
     7b8:	4f 93       	push	r20
     7ba:	5f 93       	push	r21
     7bc:	6f 93       	push	r22
     7be:	7f 93       	push	r23
     7c0:	8f 93       	push	r24
     7c2:	9f 93       	push	r25
     7c4:	af 93       	push	r26
     7c6:	bf 93       	push	r27
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	ef 93       	push	r30
     7ce:	ff 93       	push	r31
     7d0:	a0 91 27 05 	lds	r26, 0x0527	; 0x800527 <pxCurrentTCB>
     7d4:	b0 91 28 05 	lds	r27, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     7d8:	0d b6       	in	r0, 0x3d	; 61
     7da:	0d 92       	st	X+, r0
     7dc:	0e b6       	in	r0, 0x3e	; 62
     7de:	0d 92       	st	X+, r0
     7e0:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <vTaskSwitchContext>
     7e4:	a0 91 27 05 	lds	r26, 0x0527	; 0x800527 <pxCurrentTCB>
     7e8:	b0 91 28 05 	lds	r27, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     7ec:	cd 91       	ld	r28, X+
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	dd 91       	ld	r29, X+
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	ff 91       	pop	r31
     7f6:	ef 91       	pop	r30
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	bf 91       	pop	r27
     7fe:	af 91       	pop	r26
     800:	9f 91       	pop	r25
     802:	8f 91       	pop	r24
     804:	7f 91       	pop	r23
     806:	6f 91       	pop	r22
     808:	5f 91       	pop	r21
     80a:	4f 91       	pop	r20
     80c:	3f 91       	pop	r19
     80e:	2f 91       	pop	r18
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	bf 90       	pop	r11
     81e:	af 90       	pop	r10
     820:	9f 90       	pop	r9
     822:	8f 90       	pop	r8
     824:	7f 90       	pop	r7
     826:	6f 90       	pop	r6
     828:	5f 90       	pop	r5
     82a:	4f 90       	pop	r4
     82c:	3f 90       	pop	r3
     82e:	2f 90       	pop	r2
     830:	1f 90       	pop	r1
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0
     838:	08 95       	ret

0000083a <__vector_7>:
	 * tick count.  We don't need to switch context, this can only be done by
	 * manual calls to taskYIELD();
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal ) );
	void TIMER1_COMPA_vect( void )
	{
     83a:	1f 92       	push	r1
     83c:	0f 92       	push	r0
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	0f 92       	push	r0
     842:	11 24       	eor	r1, r1
     844:	2f 93       	push	r18
     846:	3f 93       	push	r19
     848:	4f 93       	push	r20
     84a:	5f 93       	push	r21
     84c:	6f 93       	push	r22
     84e:	7f 93       	push	r23
     850:	8f 93       	push	r24
     852:	9f 93       	push	r25
     854:	af 93       	push	r26
     856:	bf 93       	push	r27
     858:	ef 93       	push	r30
     85a:	ff 93       	push	r31
		xTaskIncrementTick();
     85c:	0e 94 93 06 	call	0xd26	; 0xd26 <xTaskIncrementTick>
	}
     860:	ff 91       	pop	r31
     862:	ef 91       	pop	r30
     864:	bf 91       	pop	r27
     866:	af 91       	pop	r26
     868:	9f 91       	pop	r25
     86a:	8f 91       	pop	r24
     86c:	7f 91       	pop	r23
     86e:	6f 91       	pop	r22
     870:	5f 91       	pop	r21
     872:	4f 91       	pop	r20
     874:	3f 91       	pop	r19
     876:	2f 91       	pop	r18
     878:	0f 90       	pop	r0
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	0f 90       	pop	r0
     87e:	1f 90       	pop	r1
     880:	18 95       	reti

00000882 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     882:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <pxDelayedTaskList>
     886:	f0 91 de 04 	lds	r31, 0x04DE	; 0x8004de <pxDelayedTaskList+0x1>
     88a:	80 81       	ld	r24, Z
     88c:	81 11       	cpse	r24, r1
     88e:	07 c0       	rjmp	.+14     	; 0x89e <prvResetNextTaskUnblockTime+0x1c>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	9f ef       	ldi	r25, 0xFF	; 255
     894:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     898:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <xNextTaskUnblockTime>
     89c:	08 95       	ret
     89e:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <pxDelayedTaskList>
     8a2:	f0 91 de 04 	lds	r31, 0x04DE	; 0x8004de <pxDelayedTaskList+0x1>
     8a6:	05 80       	ldd	r0, Z+5	; 0x05
     8a8:	f6 81       	ldd	r31, Z+6	; 0x06
     8aa:	e0 2d       	mov	r30, r0
     8ac:	06 80       	ldd	r0, Z+6	; 0x06
     8ae:	f7 81       	ldd	r31, Z+7	; 0x07
     8b0:	e0 2d       	mov	r30, r0
     8b2:	82 81       	ldd	r24, Z+2	; 0x02
     8b4:	93 81       	ldd	r25, Z+3	; 0x03
     8b6:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     8ba:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <xNextTaskUnblockTime>
     8be:	08 95       	ret

000008c0 <prvDeleteTCB>:
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	ec 01       	movw	r28, r24
     8c6:	8f 89       	ldd	r24, Y+23	; 0x17
     8c8:	98 8d       	ldd	r25, Y+24	; 0x18
     8ca:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vPortFree>
     8ce:	ce 01       	movw	r24, r28
     8d0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vPortFree>
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <prvInitialiseNewTask>:
     8da:	6f 92       	push	r6
     8dc:	7f 92       	push	r7
     8de:	8f 92       	push	r8
     8e0:	9f 92       	push	r9
     8e2:	af 92       	push	r10
     8e4:	bf 92       	push	r11
     8e6:	cf 92       	push	r12
     8e8:	df 92       	push	r13
     8ea:	ef 92       	push	r14
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	4c 01       	movw	r8, r24
     8fa:	f5 01       	movw	r30, r10
     8fc:	87 89       	ldd	r24, Z+23	; 0x17
     8fe:	90 8d       	ldd	r25, Z+24	; 0x18
     900:	21 50       	subi	r18, 0x01	; 1
     902:	31 09       	sbc	r19, r1
     904:	3c 01       	movw	r6, r24
     906:	62 0e       	add	r6, r18
     908:	73 1e       	adc	r7, r19
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	0f c0       	rjmp	.+30     	; 0x92c <prvInitialiseNewTask+0x52>
     90e:	82 2f       	mov	r24, r18
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	fb 01       	movw	r30, r22
     914:	e8 0f       	add	r30, r24
     916:	f9 1f       	adc	r31, r25
     918:	30 81       	ld	r19, Z
     91a:	d5 01       	movw	r26, r10
     91c:	a8 0f       	add	r26, r24
     91e:	b9 1f       	adc	r27, r25
     920:	59 96       	adiw	r26, 0x19	; 25
     922:	3c 93       	st	X, r19
     924:	80 81       	ld	r24, Z
     926:	88 23       	and	r24, r24
     928:	19 f0       	breq	.+6      	; 0x930 <prvInitialiseNewTask+0x56>
     92a:	2f 5f       	subi	r18, 0xFF	; 255
     92c:	28 30       	cpi	r18, 0x08	; 8
     92e:	78 f3       	brcs	.-34     	; 0x90e <prvInitialiseNewTask+0x34>
     930:	f5 01       	movw	r30, r10
     932:	10 a2       	std	Z+32, r1	; 0x20
     934:	f5 e0       	ldi	r31, 0x05	; 5
     936:	fe 15       	cp	r31, r14
     938:	20 f4       	brcc	.+8      	; 0x942 <prvInitialiseNewTask+0x68>
     93a:	0f 2e       	mov	r0, r31
     93c:	f5 e0       	ldi	r31, 0x05	; 5
     93e:	ef 2e       	mov	r14, r31
     940:	f0 2d       	mov	r31, r0
     942:	f5 01       	movw	r30, r10
     944:	e6 8a       	std	Z+22, r14	; 0x16
     946:	e1 a2       	std	Z+33, r14	; 0x21
     948:	12 a2       	std	Z+34, r1	; 0x22
     94a:	c5 01       	movw	r24, r10
     94c:	02 96       	adiw	r24, 0x02	; 2
     94e:	0e 94 a4 02 	call	0x548	; 0x548 <vListInitialiseItem>
     952:	c5 01       	movw	r24, r10
     954:	0c 96       	adiw	r24, 0x0c	; 12
     956:	0e 94 a4 02 	call	0x548	; 0x548 <vListInitialiseItem>
     95a:	f5 01       	movw	r30, r10
     95c:	b1 86       	std	Z+9, r11	; 0x09
     95e:	a0 86       	std	Z+8, r10	; 0x08
     960:	86 e0       	ldi	r24, 0x06	; 6
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	8e 19       	sub	r24, r14
     966:	91 09       	sbc	r25, r1
     968:	95 87       	std	Z+13, r25	; 0x0d
     96a:	84 87       	std	Z+12, r24	; 0x0c
     96c:	b3 8a       	std	Z+19, r11	; 0x13
     96e:	a2 8a       	std	Z+18, r10	; 0x12
     970:	13 a2       	std	Z+35, r1	; 0x23
     972:	14 a2       	std	Z+36, r1	; 0x24
     974:	15 a2       	std	Z+37, r1	; 0x25
     976:	16 a2       	std	Z+38, r1	; 0x26
     978:	17 a2       	std	Z+39, r1	; 0x27
     97a:	a8 01       	movw	r20, r16
     97c:	b4 01       	movw	r22, r8
     97e:	c3 01       	movw	r24, r6
     980:	0e 94 29 03 	call	0x652	; 0x652 <pxPortInitialiseStack>
     984:	f5 01       	movw	r30, r10
     986:	91 83       	std	Z+1, r25	; 0x01
     988:	80 83       	st	Z, r24
     98a:	c1 14       	cp	r12, r1
     98c:	d1 04       	cpc	r13, r1
     98e:	19 f0       	breq	.+6      	; 0x996 <prvInitialiseNewTask+0xbc>
     990:	f6 01       	movw	r30, r12
     992:	b1 82       	std	Z+1, r11	; 0x01
     994:	a0 82       	st	Z, r10
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	cf 90       	pop	r12
     9a4:	bf 90       	pop	r11
     9a6:	af 90       	pop	r10
     9a8:	9f 90       	pop	r9
     9aa:	8f 90       	pop	r8
     9ac:	7f 90       	pop	r7
     9ae:	6f 90       	pop	r6
     9b0:	08 95       	ret

000009b2 <prvInitialiseTaskLists>:
     9b2:	cf 93       	push	r28
     9b4:	c0 e0       	ldi	r28, 0x00	; 0
     9b6:	10 c0       	rjmp	.+32     	; 0x9d8 <prvInitialiseTaskLists+0x26>
     9b8:	8c 2f       	mov	r24, r28
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	9c 01       	movw	r18, r24
     9be:	22 0f       	add	r18, r18
     9c0:	33 1f       	adc	r19, r19
     9c2:	22 0f       	add	r18, r18
     9c4:	33 1f       	adc	r19, r19
     9c6:	22 0f       	add	r18, r18
     9c8:	33 1f       	adc	r19, r19
     9ca:	82 0f       	add	r24, r18
     9cc:	93 1f       	adc	r25, r19
     9ce:	8f 50       	subi	r24, 0x0F	; 15
     9d0:	9b 4f       	sbci	r25, 0xFB	; 251
     9d2:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     9d6:	cf 5f       	subi	r28, 0xFF	; 255
     9d8:	c6 30       	cpi	r28, 0x06	; 6
     9da:	70 f3       	brcs	.-36     	; 0x9b8 <prvInitialiseTaskLists+0x6>
     9dc:	88 ee       	ldi	r24, 0xE8	; 232
     9de:	94 e0       	ldi	r25, 0x04	; 4
     9e0:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     9e4:	8f ed       	ldi	r24, 0xDF	; 223
     9e6:	94 e0       	ldi	r25, 0x04	; 4
     9e8:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     9ec:	82 ed       	ldi	r24, 0xD2	; 210
     9ee:	94 e0       	ldi	r25, 0x04	; 4
     9f0:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     9f4:	89 ec       	ldi	r24, 0xC9	; 201
     9f6:	94 e0       	ldi	r25, 0x04	; 4
     9f8:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     9fc:	8f eb       	ldi	r24, 0xBF	; 191
     9fe:	94 e0       	ldi	r25, 0x04	; 4
     a00:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a04:	88 ee       	ldi	r24, 0xE8	; 232
     a06:	94 e0       	ldi	r25, 0x04	; 4
     a08:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <pxDelayedTaskList+0x1>
     a0c:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <pxDelayedTaskList>
     a10:	8f ed       	ldi	r24, 0xDF	; 223
     a12:	94 e0       	ldi	r25, 0x04	; 4
     a14:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <pxOverflowDelayedTaskList+0x1>
     a18:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <pxOverflowDelayedTaskList>
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <prvAddNewTaskToReadyList>:
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	ec 01       	movw	r28, r24
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	0f 92       	push	r0
     a2c:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <uxCurrentNumberOfTasks>
     a30:	8f 5f       	subi	r24, 0xFF	; 255
     a32:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <uxCurrentNumberOfTasks>
     a36:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <pxCurrentTCB>
     a3a:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     a3e:	89 2b       	or	r24, r25
     a40:	59 f4       	brne	.+22     	; 0xa58 <prvAddNewTaskToReadyList+0x38>
     a42:	d0 93 28 05 	sts	0x0528, r29	; 0x800528 <pxCurrentTCB+0x1>
     a46:	c0 93 27 05 	sts	0x0527, r28	; 0x800527 <pxCurrentTCB>
     a4a:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <uxCurrentNumberOfTasks>
     a4e:	81 30       	cpi	r24, 0x01	; 1
     a50:	99 f4       	brne	.+38     	; 0xa78 <prvAddNewTaskToReadyList+0x58>
     a52:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <prvInitialiseTaskLists>
     a56:	10 c0       	rjmp	.+32     	; 0xa78 <prvAddNewTaskToReadyList+0x58>
     a58:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <xSchedulerRunning>
     a5c:	81 11       	cpse	r24, r1
     a5e:	0c c0       	rjmp	.+24     	; 0xa78 <prvAddNewTaskToReadyList+0x58>
     a60:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <pxCurrentTCB>
     a64:	f0 91 28 05 	lds	r31, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     a68:	96 89       	ldd	r25, Z+22	; 0x16
     a6a:	8e 89       	ldd	r24, Y+22	; 0x16
     a6c:	89 17       	cp	r24, r25
     a6e:	20 f0       	brcs	.+8      	; 0xa78 <prvAddNewTaskToReadyList+0x58>
     a70:	d0 93 28 05 	sts	0x0528, r29	; 0x800528 <pxCurrentTCB+0x1>
     a74:	c0 93 27 05 	sts	0x0527, r28	; 0x800527 <pxCurrentTCB>
     a78:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <uxTaskNumber>
     a7c:	8f 5f       	subi	r24, 0xFF	; 255
     a7e:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <uxTaskNumber>
     a82:	2e 89       	ldd	r18, Y+22	; 0x16
     a84:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <uxTopReadyPriority>
     a88:	82 17       	cp	r24, r18
     a8a:	10 f4       	brcc	.+4      	; 0xa90 <prvAddNewTaskToReadyList+0x70>
     a8c:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <uxTopReadyPriority>
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	be 01       	movw	r22, r28
     a94:	6e 5f       	subi	r22, 0xFE	; 254
     a96:	7f 4f       	sbci	r23, 0xFF	; 255
     a98:	c9 01       	movw	r24, r18
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	82 0f       	add	r24, r18
     aa8:	93 1f       	adc	r25, r19
     aaa:	8f 50       	subi	r24, 0x0F	; 15
     aac:	9b 4f       	sbci	r25, 0xFB	; 251
     aae:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <xSchedulerRunning>
     aba:	88 23       	and	r24, r24
     abc:	21 f0       	breq	.+8      	; 0xac6 <prvAddNewTaskToReadyList+0xa6>
     abe:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <pxCurrentTCB>
     ac2:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <prvAddCurrentTaskToDelayedList>:
     acc:	ff 92       	push	r15
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	ec 01       	movw	r28, r24
     ad8:	f6 2e       	mov	r15, r22
     ada:	00 91 bc 04 	lds	r16, 0x04BC	; 0x8004bc <xTickCount>
     ade:	10 91 bd 04 	lds	r17, 0x04BD	; 0x8004bd <xTickCount+0x1>
     ae2:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <pxCurrentTCB>
     ae6:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     aea:	02 96       	adiw	r24, 0x02	; 2
     aec:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     af0:	cf 3f       	cpi	r28, 0xFF	; 255
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	d8 07       	cpc	r29, r24
     af6:	69 f4       	brne	.+26     	; 0xb12 <prvAddCurrentTaskToDelayedList+0x46>
     af8:	ff 20       	and	r15, r15
     afa:	59 f0       	breq	.+22     	; 0xb12 <prvAddCurrentTaskToDelayedList+0x46>
     afc:	60 91 27 05 	lds	r22, 0x0527	; 0x800527 <pxCurrentTCB>
     b00:	70 91 28 05 	lds	r23, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     b04:	6e 5f       	subi	r22, 0xFE	; 254
     b06:	7f 4f       	sbci	r23, 0xFF	; 255
     b08:	8f eb       	ldi	r24, 0xBF	; 191
     b0a:	94 e0       	ldi	r25, 0x04	; 4
     b0c:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     b10:	2f c0       	rjmp	.+94     	; 0xb70 <prvAddCurrentTaskToDelayedList+0xa4>
     b12:	c0 0f       	add	r28, r16
     b14:	d1 1f       	adc	r29, r17
     b16:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <pxCurrentTCB>
     b1a:	f0 91 28 05 	lds	r31, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     b1e:	d3 83       	std	Z+3, r29	; 0x03
     b20:	c2 83       	std	Z+2, r28	; 0x02
     b22:	c0 17       	cp	r28, r16
     b24:	d1 07       	cpc	r29, r17
     b26:	68 f4       	brcc	.+26     	; 0xb42 <prvAddCurrentTaskToDelayedList+0x76>
     b28:	60 91 27 05 	lds	r22, 0x0527	; 0x800527 <pxCurrentTCB>
     b2c:	70 91 28 05 	lds	r23, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     b30:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <pxOverflowDelayedTaskList>
     b34:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <pxOverflowDelayedTaskList+0x1>
     b38:	6e 5f       	subi	r22, 0xFE	; 254
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	0e 94 c9 02 	call	0x592	; 0x592 <vListInsert>
     b40:	17 c0       	rjmp	.+46     	; 0xb70 <prvAddCurrentTaskToDelayedList+0xa4>
     b42:	60 91 27 05 	lds	r22, 0x0527	; 0x800527 <pxCurrentTCB>
     b46:	70 91 28 05 	lds	r23, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     b4a:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <pxDelayedTaskList>
     b4e:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <pxDelayedTaskList+0x1>
     b52:	6e 5f       	subi	r22, 0xFE	; 254
     b54:	7f 4f       	sbci	r23, 0xFF	; 255
     b56:	0e 94 c9 02 	call	0x592	; 0x592 <vListInsert>
     b5a:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <xNextTaskUnblockTime>
     b5e:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     b62:	c8 17       	cp	r28, r24
     b64:	d9 07       	cpc	r29, r25
     b66:	20 f4       	brcc	.+8      	; 0xb70 <prvAddCurrentTaskToDelayedList+0xa4>
     b68:	d0 93 b5 04 	sts	0x04B5, r29	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     b6c:	c0 93 b4 04 	sts	0x04B4, r28	; 0x8004b4 <xNextTaskUnblockTime>
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	08 95       	ret

00000b7c <xTaskCreate>:
     b7c:	2f 92       	push	r2
     b7e:	3f 92       	push	r3
     b80:	4f 92       	push	r4
     b82:	5f 92       	push	r5
     b84:	6f 92       	push	r6
     b86:	7f 92       	push	r7
     b88:	8f 92       	push	r8
     b8a:	9f 92       	push	r9
     b8c:	af 92       	push	r10
     b8e:	bf 92       	push	r11
     b90:	cf 92       	push	r12
     b92:	df 92       	push	r13
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	3c 01       	movw	r6, r24
     ba2:	1b 01       	movw	r2, r22
     ba4:	5a 01       	movw	r10, r20
     ba6:	29 01       	movw	r4, r18
     ba8:	ca 01       	movw	r24, r20
     baa:	0e 94 e7 01 	call	0x3ce	; 0x3ce <pvPortMalloc>
     bae:	6c 01       	movw	r12, r24
     bb0:	89 2b       	or	r24, r25
     bb2:	71 f0       	breq	.+28     	; 0xbd0 <xTaskCreate+0x54>
     bb4:	88 e2       	ldi	r24, 0x28	; 40
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <pvPortMalloc>
     bbc:	ec 01       	movw	r28, r24
     bbe:	89 2b       	or	r24, r25
     bc0:	19 f0       	breq	.+6      	; 0xbc8 <xTaskCreate+0x4c>
     bc2:	d8 8e       	std	Y+24, r13	; 0x18
     bc4:	cf 8a       	std	Y+23, r12	; 0x17
     bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <xTaskCreate+0x58>
     bc8:	c6 01       	movw	r24, r12
     bca:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vPortFree>
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <xTaskCreate+0x58>
     bd0:	c0 e0       	ldi	r28, 0x00	; 0
     bd2:	d0 e0       	ldi	r29, 0x00	; 0
     bd4:	20 97       	sbiw	r28, 0x00	; 0
     bd6:	91 f0       	breq	.+36     	; 0xbfc <xTaskCreate+0x80>
     bd8:	95 01       	movw	r18, r10
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	81 2c       	mov	r8, r1
     be0:	91 2c       	mov	r9, r1
     be2:	5e 01       	movw	r10, r28
     be4:	67 01       	movw	r12, r14
     be6:	e0 2e       	mov	r14, r16
     be8:	82 01       	movw	r16, r4
     bea:	b1 01       	movw	r22, r2
     bec:	c3 01       	movw	r24, r6
     bee:	0e 94 6d 04 	call	0x8da	; 0x8da <prvInitialiseNewTask>
     bf2:	ce 01       	movw	r24, r28
     bf4:	0e 94 10 05 	call	0xa20	; 0xa20 <prvAddNewTaskToReadyList>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <xTaskCreate+0x82>
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	bf 90       	pop	r11
     c10:	af 90       	pop	r10
     c12:	9f 90       	pop	r9
     c14:	8f 90       	pop	r8
     c16:	7f 90       	pop	r7
     c18:	6f 90       	pop	r6
     c1a:	5f 90       	pop	r5
     c1c:	4f 90       	pop	r4
     c1e:	3f 90       	pop	r3
     c20:	2f 90       	pop	r2
     c22:	08 95       	ret

00000c24 <vTaskDelete>:
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	ec 01       	movw	r28, r24
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	0f 92       	push	r0
     c34:	89 2b       	or	r24, r25
     c36:	21 f4       	brne	.+8      	; 0xc40 <vTaskDelete+0x1c>
     c38:	c0 91 27 05 	lds	r28, 0x0527	; 0x800527 <pxCurrentTCB>
     c3c:	d0 91 28 05 	lds	r29, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     c40:	8e 01       	movw	r16, r28
     c42:	0e 5f       	subi	r16, 0xFE	; 254
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	c8 01       	movw	r24, r16
     c48:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     c4c:	8c 89       	ldd	r24, Y+20	; 0x14
     c4e:	9d 89       	ldd	r25, Y+21	; 0x15
     c50:	89 2b       	or	r24, r25
     c52:	21 f0       	breq	.+8      	; 0xc5c <vTaskDelete+0x38>
     c54:	ce 01       	movw	r24, r28
     c56:	0c 96       	adiw	r24, 0x0c	; 12
     c58:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     c5c:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <uxTaskNumber>
     c60:	8f 5f       	subi	r24, 0xFF	; 255
     c62:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <uxTaskNumber>
     c66:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <pxCurrentTCB>
     c6a:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     c6e:	c8 17       	cp	r28, r24
     c70:	d9 07       	cpc	r29, r25
     c72:	59 f4       	brne	.+22     	; 0xc8a <vTaskDelete+0x66>
     c74:	b8 01       	movw	r22, r16
     c76:	89 ec       	ldi	r24, 0xC9	; 201
     c78:	94 e0       	ldi	r25, 0x04	; 4
     c7a:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     c7e:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <uxDeletedTasksWaitingCleanUp>
     c82:	8f 5f       	subi	r24, 0xFF	; 255
     c84:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <uxDeletedTasksWaitingCleanUp>
     c88:	0a c0       	rjmp	.+20     	; 0xc9e <vTaskDelete+0x7a>
     c8a:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <uxCurrentNumberOfTasks>
     c8e:	81 50       	subi	r24, 0x01	; 1
     c90:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <uxCurrentNumberOfTasks>
     c94:	ce 01       	movw	r24, r28
     c96:	0e 94 60 04 	call	0x8c0	; 0x8c0 <prvDeleteTCB>
     c9a:	0e 94 41 04 	call	0x882	; 0x882 <prvResetNextTaskUnblockTime>
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <xSchedulerRunning>
     ca6:	88 23       	and	r24, r24
     ca8:	49 f0       	breq	.+18     	; 0xcbc <vTaskDelete+0x98>
     caa:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <pxCurrentTCB>
     cae:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     cb2:	c8 17       	cp	r28, r24
     cb4:	d9 07       	cpc	r29, r25
     cb6:	11 f4       	brne	.+4      	; 0xcbc <vTaskDelete+0x98>
     cb8:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	08 95       	ret

00000cc6 <vTaskStartScheduler>:
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	0f 2e       	mov	r0, r31
     cce:	f2 eb       	ldi	r31, 0xB2	; 178
     cd0:	ef 2e       	mov	r14, r31
     cd2:	f4 e0       	ldi	r31, 0x04	; 4
     cd4:	ff 2e       	mov	r15, r31
     cd6:	f0 2d       	mov	r31, r0
     cd8:	00 e0       	ldi	r16, 0x00	; 0
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e5       	ldi	r20, 0x50	; 80
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	62 e6       	ldi	r22, 0x62	; 98
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	8b ec       	ldi	r24, 0xCB	; 203
     ce8:	97 e0       	ldi	r25, 0x07	; 7
     cea:	0e 94 be 05 	call	0xb7c	; 0xb7c <xTaskCreate>
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	81 f4       	brne	.+32     	; 0xd12 <vTaskStartScheduler+0x4c>
     cf2:	f8 94       	cli
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	9f ef       	ldi	r25, 0xFF	; 255
     cf8:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     cfc:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <xNextTaskUnblockTime>
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <xSchedulerRunning>
     d06:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <xTickCount+0x1>
     d0a:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <xTickCount>
     d0e:	0e 94 95 03 	call	0x72a	; 0x72a <xPortStartScheduler>
     d12:	0f 91       	pop	r16
     d14:	ff 90       	pop	r15
     d16:	ef 90       	pop	r14
     d18:	08 95       	ret

00000d1a <vTaskSuspendAll>:
     d1a:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <uxSchedulerSuspended>
     d1e:	8f 5f       	subi	r24, 0xFF	; 255
     d20:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <uxSchedulerSuspended>
     d24:	08 95       	ret

00000d26 <xTaskIncrementTick>:
     d26:	ef 92       	push	r14
     d28:	ff 92       	push	r15
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <uxSchedulerSuspended>
     d36:	81 11       	cpse	r24, r1
     d38:	73 c0       	rjmp	.+230    	; 0xe20 <xTaskIncrementTick+0xfa>
     d3a:	e0 90 bc 04 	lds	r14, 0x04BC	; 0x8004bc <xTickCount>
     d3e:	f0 90 bd 04 	lds	r15, 0x04BD	; 0x8004bd <xTickCount+0x1>
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	e8 1a       	sub	r14, r24
     d46:	f8 0a       	sbc	r15, r24
     d48:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <xTickCount+0x1>
     d4c:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <xTickCount>
     d50:	e1 14       	cp	r14, r1
     d52:	f1 04       	cpc	r15, r1
     d54:	b9 f4       	brne	.+46     	; 0xd84 <xTaskIncrementTick+0x5e>
     d56:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <pxDelayedTaskList>
     d5a:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <pxDelayedTaskList+0x1>
     d5e:	20 91 db 04 	lds	r18, 0x04DB	; 0x8004db <pxOverflowDelayedTaskList>
     d62:	30 91 dc 04 	lds	r19, 0x04DC	; 0x8004dc <pxOverflowDelayedTaskList+0x1>
     d66:	30 93 de 04 	sts	0x04DE, r19	; 0x8004de <pxDelayedTaskList+0x1>
     d6a:	20 93 dd 04 	sts	0x04DD, r18	; 0x8004dd <pxDelayedTaskList>
     d6e:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <pxOverflowDelayedTaskList+0x1>
     d72:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <pxOverflowDelayedTaskList>
     d76:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <xNumOfOverflows>
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <xNumOfOverflows>
     d80:	0e 94 41 04 	call	0x882	; 0x882 <prvResetNextTaskUnblockTime>
     d84:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <xNextTaskUnblockTime>
     d88:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     d8c:	e8 16       	cp	r14, r24
     d8e:	f9 06       	cpc	r15, r25
     d90:	08 f4       	brcc	.+2      	; 0xd94 <xTaskIncrementTick+0x6e>
     d92:	4b c0       	rjmp	.+150    	; 0xe2a <xTaskIncrementTick+0x104>
     d94:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <pxDelayedTaskList>
     d98:	f0 91 de 04 	lds	r31, 0x04DE	; 0x8004de <pxDelayedTaskList+0x1>
     d9c:	80 81       	ld	r24, Z
     d9e:	81 11       	cpse	r24, r1
     da0:	07 c0       	rjmp	.+14     	; 0xdb0 <xTaskIncrementTick+0x8a>
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	9f ef       	ldi	r25, 0xFF	; 255
     da6:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     daa:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <xNextTaskUnblockTime>
     dae:	3d c0       	rjmp	.+122    	; 0xe2a <xTaskIncrementTick+0x104>
     db0:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <pxDelayedTaskList>
     db4:	f0 91 de 04 	lds	r31, 0x04DE	; 0x8004de <pxDelayedTaskList+0x1>
     db8:	05 80       	ldd	r0, Z+5	; 0x05
     dba:	f6 81       	ldd	r31, Z+6	; 0x06
     dbc:	e0 2d       	mov	r30, r0
     dbe:	c6 81       	ldd	r28, Z+6	; 0x06
     dc0:	d7 81       	ldd	r29, Z+7	; 0x07
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	9b 81       	ldd	r25, Y+3	; 0x03
     dc6:	e8 16       	cp	r14, r24
     dc8:	f9 06       	cpc	r15, r25
     dca:	28 f4       	brcc	.+10     	; 0xdd6 <xTaskIncrementTick+0xb0>
     dcc:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <xNextTaskUnblockTime+0x1>
     dd0:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <xNextTaskUnblockTime>
     dd4:	2a c0       	rjmp	.+84     	; 0xe2a <xTaskIncrementTick+0x104>
     dd6:	8e 01       	movw	r16, r28
     dd8:	0e 5f       	subi	r16, 0xFE	; 254
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	c8 01       	movw	r24, r16
     dde:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     de2:	8c 89       	ldd	r24, Y+20	; 0x14
     de4:	9d 89       	ldd	r25, Y+21	; 0x15
     de6:	89 2b       	or	r24, r25
     de8:	21 f0       	breq	.+8      	; 0xdf2 <xTaskIncrementTick+0xcc>
     dea:	ce 01       	movw	r24, r28
     dec:	0c 96       	adiw	r24, 0x0c	; 12
     dee:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     df2:	8e 89       	ldd	r24, Y+22	; 0x16
     df4:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <uxTopReadyPriority>
     df8:	98 17       	cp	r25, r24
     dfa:	10 f4       	brcc	.+4      	; 0xe00 <xTaskIncrementTick+0xda>
     dfc:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <uxTopReadyPriority>
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	9c 01       	movw	r18, r24
     e04:	22 0f       	add	r18, r18
     e06:	33 1f       	adc	r19, r19
     e08:	22 0f       	add	r18, r18
     e0a:	33 1f       	adc	r19, r19
     e0c:	22 0f       	add	r18, r18
     e0e:	33 1f       	adc	r19, r19
     e10:	82 0f       	add	r24, r18
     e12:	93 1f       	adc	r25, r19
     e14:	b8 01       	movw	r22, r16
     e16:	8f 50       	subi	r24, 0x0F	; 15
     e18:	9b 4f       	sbci	r25, 0xFB	; 251
     e1a:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     e1e:	ba cf       	rjmp	.-140    	; 0xd94 <xTaskIncrementTick+0x6e>
     e20:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <uxPendedTicks>
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <uxPendedTicks>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	08 95       	ret

00000e3a <xTaskResumeAll>:
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	0f 92       	push	r0
     e48:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <uxSchedulerSuspended>
     e4c:	81 50       	subi	r24, 0x01	; 1
     e4e:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <uxSchedulerSuspended>
     e52:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <uxSchedulerSuspended>
     e56:	81 11       	cpse	r24, r1
     e58:	52 c0       	rjmp	.+164    	; 0xefe <xTaskResumeAll+0xc4>
     e5a:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <uxCurrentNumberOfTasks>
     e5e:	81 11       	cpse	r24, r1
     e60:	33 c0       	rjmp	.+102    	; 0xec8 <xTaskResumeAll+0x8e>
     e62:	4d c0       	rjmp	.+154    	; 0xefe <xTaskResumeAll+0xc4>
     e64:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <xPendingReadyList+0x5>
     e68:	f0 91 d8 04 	lds	r31, 0x04D8	; 0x8004d8 <xPendingReadyList+0x6>
     e6c:	c6 81       	ldd	r28, Z+6	; 0x06
     e6e:	d7 81       	ldd	r29, Z+7	; 0x07
     e70:	ce 01       	movw	r24, r28
     e72:	0c 96       	adiw	r24, 0x0c	; 12
     e74:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     e78:	8e 01       	movw	r16, r28
     e7a:	0e 5f       	subi	r16, 0xFE	; 254
     e7c:	1f 4f       	sbci	r17, 0xFF	; 255
     e7e:	c8 01       	movw	r24, r16
     e80:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     e84:	8e 89       	ldd	r24, Y+22	; 0x16
     e86:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <uxTopReadyPriority>
     e8a:	98 17       	cp	r25, r24
     e8c:	10 f4       	brcc	.+4      	; 0xe92 <xTaskResumeAll+0x58>
     e8e:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <uxTopReadyPriority>
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	9c 01       	movw	r18, r24
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	82 0f       	add	r24, r18
     ea4:	93 1f       	adc	r25, r19
     ea6:	b8 01       	movw	r22, r16
     ea8:	8f 50       	subi	r24, 0x0F	; 15
     eaa:	9b 4f       	sbci	r25, 0xFB	; 251
     eac:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     eb0:	9e 89       	ldd	r25, Y+22	; 0x16
     eb2:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <pxCurrentTCB>
     eb6:	f0 91 28 05 	lds	r31, 0x0528	; 0x800528 <pxCurrentTCB+0x1>
     eba:	86 89       	ldd	r24, Z+22	; 0x16
     ebc:	98 17       	cp	r25, r24
     ebe:	30 f0       	brcs	.+12     	; 0xecc <xTaskResumeAll+0x92>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <xYieldPending>
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <xTaskResumeAll+0x92>
     ec8:	c0 e0       	ldi	r28, 0x00	; 0
     eca:	d0 e0       	ldi	r29, 0x00	; 0
     ecc:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <xPendingReadyList>
     ed0:	81 11       	cpse	r24, r1
     ed2:	c8 cf       	rjmp	.-112    	; 0xe64 <xTaskResumeAll+0x2a>
     ed4:	cd 2b       	or	r28, r29
     ed6:	11 f0       	breq	.+4      	; 0xedc <xTaskResumeAll+0xa2>
     ed8:	0e 94 41 04 	call	0x882	; 0x882 <prvResetNextTaskUnblockTime>
     edc:	c0 91 b9 04 	lds	r28, 0x04B9	; 0x8004b9 <uxPendedTicks>
     ee0:	cc 23       	and	r28, r28
     ee2:	59 f0       	breq	.+22     	; 0xefa <xTaskResumeAll+0xc0>
     ee4:	0e 94 93 06 	call	0xd26	; 0xd26 <xTaskIncrementTick>
     ee8:	88 23       	and	r24, r24
     eea:	19 f0       	breq	.+6      	; 0xef2 <xTaskResumeAll+0xb8>
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <xYieldPending>
     ef2:	c1 50       	subi	r28, 0x01	; 1
     ef4:	b9 f7       	brne	.-18     	; 0xee4 <xTaskResumeAll+0xaa>
     ef6:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <uxPendedTicks>
     efa:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <xYieldPending>
     efe:	0f 90       	pop	r0
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
     f14:	89 2b       	or	r24, r25
     f16:	49 f0       	breq	.+18     	; 0xf2a <vTaskDelay+0x1c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
     f18:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	ce 01       	movw	r24, r28
     f20:	0e 94 66 05 	call	0xacc	; 0xacc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
     f24:	0e 94 1d 07 	call	0xe3a	; 0xe3a <xTaskResumeAll>
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <vTaskDelay+0x1e>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
     f2a:	80 e0       	ldi	r24, 0x00	; 0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     f2c:	81 11       	cpse	r24, r1
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <vTaskDelay+0x26>
		{
			portYIELD_WITHIN_API();
     f30:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
     f3e:	24 c0       	rjmp	.+72     	; 0xf88 <prvCheckTasksWaitingTermination+0x4e>
		{
			vTaskSuspendAll();
     f40:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     f44:	c0 91 c9 04 	lds	r28, 0x04C9	; 0x8004c9 <xTasksWaitingTermination>
			}
			( void ) xTaskResumeAll();
     f48:	0e 94 1d 07 	call	0xe3a	; 0xe3a <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
     f4c:	cc 23       	and	r28, r28
     f4e:	e1 f0       	breq	.+56     	; 0xf88 <prvCheckTasksWaitingTermination+0x4e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
     f56:	e0 91 ce 04 	lds	r30, 0x04CE	; 0x8004ce <xTasksWaitingTermination+0x5>
     f5a:	f0 91 cf 04 	lds	r31, 0x04CF	; 0x8004cf <xTasksWaitingTermination+0x6>
     f5e:	c6 81       	ldd	r28, Z+6	; 0x06
     f60:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     f62:	ce 01       	movw	r24, r28
     f64:	02 96       	adiw	r24, 0x02	; 2
     f66:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
					--uxCurrentNumberOfTasks;
     f6a:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <uxCurrentNumberOfTasks>
     f6e:	81 50       	subi	r24, 0x01	; 1
     f70:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <uxCurrentNumberOfTasks>
					--uxDeletedTasksWaitingCleanUp;
     f74:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <uxDeletedTasksWaitingCleanUp>
     f78:	81 50       	subi	r24, 0x01	; 1
     f7a:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <uxDeletedTasksWaitingCleanUp>
				}
				taskEXIT_CRITICAL();
     f7e:	0f 90       	pop	r0
     f80:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
     f82:	ce 01       	movw	r24, r28
     f84:	0e 94 60 04 	call	0x8c0	; 0x8c0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
     f88:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <uxDeletedTasksWaitingCleanUp>
     f8c:	81 11       	cpse	r24, r1
     f8e:	d8 cf       	rjmp	.-80     	; 0xf40 <prvCheckTasksWaitingTermination+0x6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <prvIdleTask>:

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
     f96:	0e 94 9d 07 	call	0xf3a	; 0xf3a <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
     f9a:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
     f9e:	fb cf       	rjmp	.-10     	; 0xf96 <prvIdleTask>

00000fa0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     fa0:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <uxSchedulerSuspended>
     fa4:	88 23       	and	r24, r24
     fa6:	21 f0       	breq	.+8      	; 0xfb0 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <xYieldPending>
     fae:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
     fb0:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
     fb4:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <uxTopReadyPriority>
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <vTaskSwitchContext+0x1c>
     fba:	21 50       	subi	r18, 0x01	; 1
     fbc:	82 2f       	mov	r24, r18
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	fc 01       	movw	r30, r24
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	e8 0f       	add	r30, r24
     fd0:	f9 1f       	adc	r31, r25
     fd2:	ef 50       	subi	r30, 0x0F	; 15
     fd4:	fb 4f       	sbci	r31, 0xFB	; 251
     fd6:	30 81       	ld	r19, Z
     fd8:	33 23       	and	r19, r19
     fda:	79 f3       	breq	.-34     	; 0xfba <vTaskSwitchContext+0x1a>
     fdc:	ac 01       	movw	r20, r24
     fde:	44 0f       	add	r20, r20
     fe0:	55 1f       	adc	r21, r21
     fe2:	44 0f       	add	r20, r20
     fe4:	55 1f       	adc	r21, r21
     fe6:	44 0f       	add	r20, r20
     fe8:	55 1f       	adc	r21, r21
     fea:	48 0f       	add	r20, r24
     fec:	59 1f       	adc	r21, r25
     fee:	df 01       	movw	r26, r30
     ff0:	01 80       	ldd	r0, Z+1	; 0x01
     ff2:	f2 81       	ldd	r31, Z+2	; 0x02
     ff4:	e0 2d       	mov	r30, r0
     ff6:	02 80       	ldd	r0, Z+2	; 0x02
     ff8:	f3 81       	ldd	r31, Z+3	; 0x03
     ffa:	e0 2d       	mov	r30, r0
     ffc:	12 96       	adiw	r26, 0x02	; 2
     ffe:	fc 93       	st	X, r31
    1000:	ee 93       	st	-X, r30
    1002:	11 97       	sbiw	r26, 0x01	; 1
    1004:	4c 50       	subi	r20, 0x0C	; 12
    1006:	5b 4f       	sbci	r21, 0xFB	; 251
    1008:	e4 17       	cp	r30, r20
    100a:	f5 07       	cpc	r31, r21
    100c:	29 f4       	brne	.+10     	; 0x1018 <vTaskSwitchContext+0x78>
    100e:	42 81       	ldd	r20, Z+2	; 0x02
    1010:	53 81       	ldd	r21, Z+3	; 0x03
    1012:	fd 01       	movw	r30, r26
    1014:	52 83       	std	Z+2, r21	; 0x02
    1016:	41 83       	std	Z+1, r20	; 0x01
    1018:	fc 01       	movw	r30, r24
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	ee 0f       	add	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	ee 0f       	add	r30, r30
    1024:	ff 1f       	adc	r31, r31
    1026:	8e 0f       	add	r24, r30
    1028:	9f 1f       	adc	r25, r31
    102a:	fc 01       	movw	r30, r24
    102c:	ef 50       	subi	r30, 0x0F	; 15
    102e:	fb 4f       	sbci	r31, 0xFB	; 251
    1030:	01 80       	ldd	r0, Z+1	; 0x01
    1032:	f2 81       	ldd	r31, Z+2	; 0x02
    1034:	e0 2d       	mov	r30, r0
    1036:	86 81       	ldd	r24, Z+6	; 0x06
    1038:	97 81       	ldd	r25, Z+7	; 0x07
    103a:	90 93 28 05 	sts	0x0528, r25	; 0x800528 <pxCurrentTCB+0x1>
    103e:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <pxCurrentTCB>
    1042:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <uxTopReadyPriority>
    1046:	08 95       	ret

00001048 <LCD_voidSendLowerNibble>:
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	00 d0       	rcall	.+0      	; 0x1052 <LCD_voidSendLowerNibble+0xa>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <LCD_voidSendLowerNibble+0xc>
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	08 2f       	mov	r16, r24
    105a:	84 e0       	ldi	r24, 0x04	; 4
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	85 e0       	ldi	r24, 0x05	; 5
    1060:	8a 83       	std	Y+2, r24	; 0x02
    1062:	86 e0       	ldi	r24, 0x06	; 6
    1064:	8b 83       	std	Y+3, r24	; 0x03
    1066:	87 e0       	ldi	r24, 0x07	; 7
    1068:	8c 83       	std	Y+4, r24	; 0x04
    106a:	10 e0       	ldi	r17, 0x00	; 0
    106c:	14 c0       	rjmp	.+40     	; 0x1096 <LCD_voidSendLowerNibble+0x4e>
    106e:	40 2f       	mov	r20, r16
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	01 2e       	mov	r0, r17
    1074:	02 c0       	rjmp	.+4      	; 0x107a <LCD_voidSendLowerNibble+0x32>
    1076:	55 95       	asr	r21
    1078:	47 95       	ror	r20
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <LCD_voidSendLowerNibble+0x2e>
    107e:	41 70       	andi	r20, 0x01	; 1
    1080:	e1 e0       	ldi	r30, 0x01	; 1
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	ec 0f       	add	r30, r28
    1086:	fd 1f       	adc	r31, r29
    1088:	e1 0f       	add	r30, r17
    108a:	f1 1d       	adc	r31, r1
    108c:	60 81       	ld	r22, Z
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1094:	1f 5f       	subi	r17, 0xFF	; 255
    1096:	14 30       	cpi	r17, 0x04	; 4
    1098:	50 f3       	brcs	.-44     	; 0x106e <LCD_voidSendLowerNibble+0x26>
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	08 95       	ret

000010ac <LCD_voidSetEnable>:
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	63 e0       	ldi	r22, 0x03	; 3
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    10b6:	8f e3       	ldi	r24, 0x3F	; 63
    10b8:	9f e1       	ldi	r25, 0x1F	; 31
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <LCD_voidSetEnable+0xe>
    10be:	00 c0       	rjmp	.+0      	; 0x10c0 <LCD_voidSetEnable+0x14>
    10c0:	00 00       	nop
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	63 e0       	ldi	r22, 0x03	; 3
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    10cc:	08 95       	ret

000010ce <LCD_voidSendCommand>:
    10ce:	cf 93       	push	r28
    10d0:	c8 2f       	mov	r28, r24
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	62 e0       	ldi	r22, 0x02	; 2
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    10e6:	8c 2f       	mov	r24, r28
    10e8:	82 95       	swap	r24
    10ea:	8f 70       	andi	r24, 0x0F	; 15
    10ec:	0e 94 24 08 	call	0x1048	; 0x1048 <LCD_voidSendLowerNibble>
    10f0:	0e 94 56 08 	call	0x10ac	; 0x10ac <LCD_voidSetEnable>
    10f4:	8c 2f       	mov	r24, r28
    10f6:	0e 94 24 08 	call	0x1048	; 0x1048 <LCD_voidSendLowerNibble>
    10fa:	0e 94 56 08 	call	0x10ac	; 0x10ac <LCD_voidSetEnable>
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <LCD_voidSendData>:
    1102:	cf 93       	push	r28
    1104:	c8 2f       	mov	r28, r24
    1106:	41 e0       	ldi	r20, 0x01	; 1
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	62 e0       	ldi	r22, 0x02	; 2
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    111a:	8c 2f       	mov	r24, r28
    111c:	82 95       	swap	r24
    111e:	8f 70       	andi	r24, 0x0F	; 15
    1120:	0e 94 24 08 	call	0x1048	; 0x1048 <LCD_voidSendLowerNibble>
    1124:	0e 94 56 08 	call	0x10ac	; 0x10ac <LCD_voidSetEnable>
    1128:	8c 2f       	mov	r24, r28
    112a:	0e 94 24 08 	call	0x1048	; 0x1048 <LCD_voidSendLowerNibble>
    112e:	0e 94 56 08 	call	0x10ac	; 0x10ac <LCD_voidSetEnable>
    1132:	cf 91       	pop	r28
    1134:	08 95       	ret

00001136 <LCD_voidInit>:
    1136:	2f ef       	ldi	r18, 0xFF	; 255
    1138:	83 ef       	ldi	r24, 0xF3	; 243
    113a:	91 e0       	ldi	r25, 0x01	; 1
    113c:	21 50       	subi	r18, 0x01	; 1
    113e:	80 40       	sbci	r24, 0x00	; 0
    1140:	90 40       	sbci	r25, 0x00	; 0
    1142:	e1 f7       	brne	.-8      	; 0x113c <LCD_voidInit+0x6>
    1144:	00 c0       	rjmp	.+0      	; 0x1146 <LCD_voidInit+0x10>
    1146:	00 00       	nop
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	0e 94 24 08 	call	0x1048	; 0x1048 <LCD_voidSendLowerNibble>
    114e:	0e 94 56 08 	call	0x10ac	; 0x10ac <LCD_voidSetEnable>
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	0e 94 24 08 	call	0x1048	; 0x1048 <LCD_voidSendLowerNibble>
    1158:	0e 94 56 08 	call	0x10ac	; 0x10ac <LCD_voidSetEnable>
    115c:	88 e0       	ldi	r24, 0x08	; 8
    115e:	0e 94 24 08 	call	0x1048	; 0x1048 <LCD_voidSendLowerNibble>
    1162:	0e 94 56 08 	call	0x10ac	; 0x10ac <LCD_voidSetEnable>
    1166:	8c e0       	ldi	r24, 0x0C	; 12
    1168:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendCommand>
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendCommand>
    1172:	08 95       	ret

00001174 <LCD_voidSendString>:
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	ec 01       	movw	r28, r24
    117a:	03 c0       	rjmp	.+6      	; 0x1182 <LCD_voidSendString+0xe>
    117c:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_voidSendData>
    1180:	21 96       	adiw	r28, 0x01	; 1
    1182:	88 81       	ld	r24, Y
    1184:	81 11       	cpse	r24, r1
    1186:	fa cf       	rjmp	.-12     	; 0x117c <LCD_voidSendString+0x8>
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <LCD_voidSendNum>:
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	2e 97       	sbiw	r28, 0x0e	; 14
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	ac 01       	movw	r20, r24
    11a6:	89 2b       	or	r24, r25
    11a8:	d1 f5       	brne	.+116    	; 0x121e <LCD_voidSendNum+0x90>
    11aa:	80 e3       	ldi	r24, 0x30	; 48
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	9a 83       	std	Y+2, r25	; 0x02
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	11 e0       	ldi	r17, 0x01	; 1
    11b4:	47 c0       	rjmp	.+142    	; 0x1244 <LCD_voidSendNum+0xb6>
    11b6:	9a 01       	movw	r18, r20
    11b8:	ad ec       	ldi	r26, 0xCD	; 205
    11ba:	bc ec       	ldi	r27, 0xCC	; 204
    11bc:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__umulhisi3>
    11c0:	96 95       	lsr	r25
    11c2:	87 95       	ror	r24
    11c4:	96 95       	lsr	r25
    11c6:	87 95       	ror	r24
    11c8:	96 95       	lsr	r25
    11ca:	87 95       	ror	r24
    11cc:	9c 01       	movw	r18, r24
    11ce:	22 0f       	add	r18, r18
    11d0:	33 1f       	adc	r19, r19
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	82 0f       	add	r24, r18
    11e0:	93 1f       	adc	r25, r19
    11e2:	9a 01       	movw	r18, r20
    11e4:	28 1b       	sub	r18, r24
    11e6:	39 0b       	sbc	r19, r25
    11e8:	c9 01       	movw	r24, r18
    11ea:	e1 2f       	mov	r30, r17
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	99 27       	eor	r25, r25
    11f0:	c0 96       	adiw	r24, 0x30	; 48
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	21 e0       	ldi	r18, 0x01	; 1
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	2c 0f       	add	r18, r28
    11fc:	3d 1f       	adc	r19, r29
    11fe:	e2 0f       	add	r30, r18
    1200:	f3 1f       	adc	r31, r19
    1202:	91 83       	std	Z+1, r25	; 0x01
    1204:	80 83       	st	Z, r24
    1206:	9a 01       	movw	r18, r20
    1208:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__umulhisi3>
    120c:	ac 01       	movw	r20, r24
    120e:	56 95       	lsr	r21
    1210:	47 95       	ror	r20
    1212:	56 95       	lsr	r21
    1214:	47 95       	ror	r20
    1216:	56 95       	lsr	r21
    1218:	47 95       	ror	r20
    121a:	1f 5f       	subi	r17, 0xFF	; 255
    121c:	01 c0       	rjmp	.+2      	; 0x1220 <LCD_voidSendNum+0x92>
    121e:	10 e0       	ldi	r17, 0x00	; 0
    1220:	41 15       	cp	r20, r1
    1222:	51 05       	cpc	r21, r1
    1224:	41 f6       	brne	.-112    	; 0x11b6 <LCD_voidSendNum+0x28>
    1226:	0e c0       	rjmp	.+28     	; 0x1244 <LCD_voidSendNum+0xb6>
    1228:	11 50       	subi	r17, 0x01	; 1
    122a:	e1 2f       	mov	r30, r17
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	ee 0f       	add	r30, r30
    1230:	ff 1f       	adc	r31, r31
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	8c 0f       	add	r24, r28
    1238:	9d 1f       	adc	r25, r29
    123a:	e8 0f       	add	r30, r24
    123c:	f9 1f       	adc	r31, r25
    123e:	80 81       	ld	r24, Z
    1240:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_voidSendData>
    1244:	11 11       	cpse	r17, r1
    1246:	f0 cf       	rjmp	.-32     	; 0x1228 <LCD_voidSendNum+0x9a>
    1248:	2e 96       	adiw	r28, 0x0e	; 14
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	08 95       	ret

0000125c <LCD_SetGridPos>:
    125c:	90 e4       	ldi	r25, 0x40	; 64
    125e:	69 9f       	mul	r22, r25
    1260:	80 0d       	add	r24, r0
    1262:	11 24       	eor	r1, r1
    1264:	80 68       	ori	r24, 0x80	; 128
    1266:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendCommand>
    126a:	08 95       	ret

0000126c <main>:


int main(void)
{
			
			xTaskCreate(vTask_RoverInit,"Initialize",configMINIMAL_STACK_SIZE,NULL,INIT_TASK_PRIORITY,NULL);
    126c:	e1 2c       	mov	r14, r1
    126e:	f1 2c       	mov	r15, r1
    1270:	04 e0       	ldi	r16, 0x04	; 4
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	40 e5       	ldi	r20, 0x50	; 80
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	67 e6       	ldi	r22, 0x67	; 103
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	84 e1       	ldi	r24, 0x14	; 20
    1280:	9c e0       	ldi	r25, 0x0C	; 12
    1282:	0e 94 be 05 	call	0xb7c	; 0xb7c <xTaskCreate>
			xTaskCreate(vTask_RoverMove,"Movement",configMINIMAL_STACK_SIZE,NULL,MOVEMENT_TASK_PRIORITY,NULL);
    1286:	02 e0       	ldi	r16, 0x02	; 2
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e5       	ldi	r20, 0x50	; 80
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	62 e7       	ldi	r22, 0x72	; 114
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	83 e2       	ldi	r24, 0x23	; 35
    1296:	9c e0       	ldi	r25, 0x0C	; 12
    1298:	0e 94 be 05 	call	0xb7c	; 0xb7c <xTaskCreate>
			xTaskCreate(vTask_DataDisplay,"Display",configMINIMAL_STACK_SIZE,NULL,DISPLAY_TASK_PRIORITY,NULL);
    129c:	01 e0       	ldi	r16, 0x01	; 1
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e5       	ldi	r20, 0x50	; 80
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	6b e7       	ldi	r22, 0x7B	; 123
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	87 e8       	ldi	r24, 0x87	; 135
    12ac:	9c e0       	ldi	r25, 0x0C	; 12
    12ae:	0e 94 be 05 	call	0xb7c	; 0xb7c <xTaskCreate>
			xTaskCreate(vTask_BT_SendStatus,"BT",configMINIMAL_STACK_SIZE,NULL,BLUETOOTH_TASK_PRIORITY,NULL);
    12b2:	00 e0       	ldi	r16, 0x00	; 0
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e5       	ldi	r20, 0x50	; 80
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	63 e8       	ldi	r22, 0x83	; 131
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	8e ea       	ldi	r24, 0xAE	; 174
    12c2:	9c e0       	ldi	r25, 0x0C	; 12
    12c4:	0e 94 be 05 	call	0xb7c	; 0xb7c <xTaskCreate>
			xTaskCreate(vTask_SensorRead,"Sensors",configMINIMAL_STACK_SIZE,NULL,SENSORS_TASK_PRIORITY,NULL);
    12c8:	03 e0       	ldi	r16, 0x03	; 3
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e5       	ldi	r20, 0x50	; 80
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	66 e8       	ldi	r22, 0x86	; 134
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	80 e9       	ldi	r24, 0x90	; 144
    12d8:	9c e0       	ldi	r25, 0x0C	; 12
    12da:	0e 94 be 05 	call	0xb7c	; 0xb7c <xTaskCreate>
			vTaskStartScheduler();
    12de:	0e 94 63 06 	call	0xcc6	; 0xcc6 <vTaskStartScheduler>
    12e2:	ff cf       	rjmp	.-2      	; 0x12e2 <main+0x76>

000012e4 <Radar_LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	64 e0       	ldi	r22, 0x04	; 4
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    12ee:	41 e0       	ldi	r20, 0x01	; 1
    12f0:	65 e0       	ldi	r22, 0x05	; 5
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	66 e0       	ldi	r22, 0x06	; 6
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	67 e0       	ldi	r22, 0x07	; 7
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1316:	41 e0       	ldi	r20, 0x01	; 1
    1318:	62 e0       	ldi	r22, 0x02	; 2
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	63 e0       	ldi	r22, 0x03	; 3
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    132a:	0e 94 b5 0c 	call	0x196a	; 0x196a <Servo_Init>
    132e:	41 e0       	ldi	r20, 0x01	; 1
    1330:	64 e0       	ldi	r22, 0x04	; 4
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	65 e0       	ldi	r22, 0x05	; 5
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1342:	0e 94 9b 08 	call	0x1136	; 0x1136 <LCD_voidInit>
    1346:	08 95       	ret

00001348 <Rover_voidMotorsInit>:
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	66 e0       	ldi	r22, 0x06	; 6
    134c:	82 e0       	ldi	r24, 0x02	; 2
    134e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1352:	41 e0       	ldi	r20, 0x01	; 1
    1354:	67 e0       	ldi	r22, 0x07	; 7
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	62 e0       	ldi	r22, 0x02	; 2
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1366:	41 e0       	ldi	r20, 0x01	; 1
    1368:	63 e0       	ldi	r22, 0x03	; 3
    136a:	83 e0       	ldi	r24, 0x03	; 3
    136c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1370:	41 e0       	ldi	r20, 0x01	; 1
    1372:	67 e0       	ldi	r22, 0x07	; 7
    1374:	83 e0       	ldi	r24, 0x03	; 3
    1376:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    137a:	08 95       	ret

0000137c <Rover_voidMOVFWD>:
    137c:	cf 93       	push	r28
    137e:	c8 2f       	mov	r28, r24
    1380:	41 e0       	ldi	r20, 0x01	; 1
    1382:	66 e0       	ldi	r22, 0x06	; 6
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	67 e0       	ldi	r22, 0x07	; 7
    138e:	82 e0       	ldi	r24, 0x02	; 2
    1390:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1394:	41 e0       	ldi	r20, 0x01	; 1
    1396:	62 e0       	ldi	r22, 0x02	; 2
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	63 e0       	ldi	r22, 0x03	; 3
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13a8:	8c 2f       	mov	r24, r28
    13aa:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER2_voidFastPWM>
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <Rover_state+0x5>
    13b4:	cf 91       	pop	r28
    13b6:	08 95       	ret

000013b8 <Rover_voidMOVBCWD>:
    13b8:	cf 93       	push	r28
    13ba:	c8 2f       	mov	r28, r24
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	66 e0       	ldi	r22, 0x06	; 6
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	67 e0       	ldi	r22, 0x07	; 7
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	62 e0       	ldi	r22, 0x02	; 2
    13d4:	83 e0       	ldi	r24, 0x03	; 3
    13d6:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	63 e0       	ldi	r22, 0x03	; 3
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13e4:	8c 2f       	mov	r24, r28
    13e6:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER2_voidFastPWM>
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <Rover_state+0x5>
    13f0:	cf 91       	pop	r28
    13f2:	08 95       	ret

000013f4 <Rover_voidMOVRW>:
    13f4:	cf 93       	push	r28
    13f6:	c8 2f       	mov	r28, r24
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	66 e0       	ldi	r22, 0x06	; 6
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1402:	41 e0       	ldi	r20, 0x01	; 1
    1404:	67 e0       	ldi	r22, 0x07	; 7
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    140c:	41 e0       	ldi	r20, 0x01	; 1
    140e:	62 e0       	ldi	r22, 0x02	; 2
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	63 e0       	ldi	r22, 0x03	; 3
    141a:	83 e0       	ldi	r24, 0x03	; 3
    141c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1420:	8c 2f       	mov	r24, r28
    1422:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER2_voidFastPWM>
    1426:	83 e0       	ldi	r24, 0x03	; 3
    1428:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <Rover_state+0x5>
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <Rover_voidMOVLF>:
    1430:	cf 93       	push	r28
    1432:	c8 2f       	mov	r28, r24
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	66 e0       	ldi	r22, 0x06	; 6
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	67 e0       	ldi	r22, 0x07	; 7
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	62 e0       	ldi	r22, 0x02	; 2
    144c:	83 e0       	ldi	r24, 0x03	; 3
    144e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1452:	41 e0       	ldi	r20, 0x01	; 1
    1454:	63 e0       	ldi	r22, 0x03	; 3
    1456:	83 e0       	ldi	r24, 0x03	; 3
    1458:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    145c:	8c 2f       	mov	r24, r28
    145e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER2_voidFastPWM>
    1462:	84 e0       	ldi	r24, 0x04	; 4
    1464:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <Rover_state+0x5>
    1468:	cf 91       	pop	r28
    146a:	08 95       	ret

0000146c <Rover_voidStop>:
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	66 e0       	ldi	r22, 0x06	; 6
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	67 e0       	ldi	r22, 0x07	; 7
    147a:	82 e0       	ldi	r24, 0x02	; 2
    147c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1480:	40 e0       	ldi	r20, 0x00	; 0
    1482:	62 e0       	ldi	r22, 0x02	; 2
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	63 e0       	ldi	r22, 0x03	; 3
    148e:	83 e0       	ldi	r24, 0x03	; 3
    1490:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1494:	85 e0       	ldi	r24, 0x05	; 5
    1496:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <Rover_state+0x5>
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIMER2_voidFastPWM>
    14a0:	08 95       	ret

000014a2 <ROVER_LCD_PrintStatus>:
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	ec 01       	movw	r28, r24
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_SetGridPos>
    14b0:	8e e8       	ldi	r24, 0x8E	; 142
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_voidSendString>
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	86 e0       	ldi	r24, 0x06	; 6
    14bc:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_SetGridPos>
    14c0:	88 81       	ld	r24, Y
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 c7 08 	call	0x118e	; 0x118e <LCD_voidSendNum>
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	89 e0       	ldi	r24, 0x09	; 9
    14cc:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_SetGridPos>
    14d0:	84 e9       	ldi	r24, 0x94	; 148
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_voidSendString>
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	8d e0       	ldi	r24, 0x0D	; 13
    14dc:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_SetGridPos>
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	a9 f0       	breq	.+42     	; 0x1510 <ROVER_LCD_PrintStatus+0x6e>
    14e6:	28 f4       	brcc	.+10     	; 0x14f2 <ROVER_LCD_PrintStatus+0x50>
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	41 f0       	breq	.+16     	; 0x14fc <ROVER_LCD_PrintStatus+0x5a>
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	59 f0       	breq	.+22     	; 0x1506 <ROVER_LCD_PrintStatus+0x64>
    14f0:	1e c0       	rjmp	.+60     	; 0x152e <ROVER_LCD_PrintStatus+0x8c>
    14f2:	84 30       	cpi	r24, 0x04	; 4
    14f4:	91 f0       	breq	.+36     	; 0x151a <ROVER_LCD_PrintStatus+0x78>
    14f6:	85 30       	cpi	r24, 0x05	; 5
    14f8:	a9 f0       	breq	.+42     	; 0x1524 <ROVER_LCD_PrintStatus+0x82>
    14fa:	19 c0       	rjmp	.+50     	; 0x152e <ROVER_LCD_PrintStatus+0x8c>
    14fc:	89 e9       	ldi	r24, 0x99	; 153
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_voidSendString>
    1504:	18 c0       	rjmp	.+48     	; 0x1536 <ROVER_LCD_PrintStatus+0x94>
    1506:	8d e9       	ldi	r24, 0x9D	; 157
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_voidSendString>
    150e:	13 c0       	rjmp	.+38     	; 0x1536 <ROVER_LCD_PrintStatus+0x94>
    1510:	81 ea       	ldi	r24, 0xA1	; 161
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_voidSendString>
    1518:	0e c0       	rjmp	.+28     	; 0x1536 <ROVER_LCD_PrintStatus+0x94>
    151a:	84 ea       	ldi	r24, 0xA4	; 164
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_voidSendString>
    1522:	09 c0       	rjmp	.+18     	; 0x1536 <ROVER_LCD_PrintStatus+0x94>
    1524:	87 ea       	ldi	r24, 0xA7	; 167
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_voidSendString>
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <ROVER_LCD_PrintStatus+0x94>
    152e:	8c ea       	ldi	r24, 0xAC	; 172
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_voidSendString>
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_SetGridPos>
    153e:	80 eb       	ldi	r24, 0xB0	; 176
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_voidSendString>
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	84 e0       	ldi	r24, 0x04	; 4
    154a:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_SetGridPos>
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	81 11       	cpse	r24, r1
    1552:	05 c0       	rjmp	.+10     	; 0x155e <ROVER_LCD_PrintStatus+0xbc>
    1554:	85 ea       	ldi	r24, 0xA5	; 165
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_voidSendString>
    155c:	17 c0       	rjmp	.+46     	; 0x158c <ROVER_LCD_PrintStatus+0xea>
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	81 11       	cpse	r24, r1
    1562:	05 c0       	rjmp	.+10     	; 0x156e <ROVER_LCD_PrintStatus+0xcc>
    1564:	84 eb       	ldi	r24, 0xB4	; 180
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_voidSendString>
    156c:	0f c0       	rjmp	.+30     	; 0x158c <ROVER_LCD_PrintStatus+0xea>
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	81 11       	cpse	r24, r1
    1572:	05 c0       	rjmp	.+10     	; 0x157e <ROVER_LCD_PrintStatus+0xdc>
    1574:	86 eb       	ldi	r24, 0xB6	; 182
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_voidSendString>
    157c:	07 c0       	rjmp	.+14     	; 0x158c <ROVER_LCD_PrintStatus+0xea>
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	81 11       	cpse	r24, r1
    1582:	04 c0       	rjmp	.+8      	; 0x158c <ROVER_LCD_PrintStatus+0xea>
    1584:	88 eb       	ldi	r24, 0xB8	; 184
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_voidSendString>
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret

00001592 <Radar_LCD_Sweep>:
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	8c 01       	movw	r16, r24
    159c:	eb 01       	movw	r28, r22
    159e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <UltraSonic_Sendpulse>
    15a2:	85 ee       	ldi	r24, 0xE5	; 229
    15a4:	9d e0       	ldi	r25, 0x0D	; 13
    15a6:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <UltraSonic_Calc_Distance>
    15aa:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <Rover_state>
    15ae:	81 e3       	ldi	r24, 0x31	; 49
    15b0:	95 e0       	ldi	r25, 0x05	; 5
    15b2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <ROVER_LCD_PrintStatus>
    15b6:	8a e5       	ldi	r24, 0x5A	; 90
    15b8:	f8 01       	movw	r30, r16
    15ba:	80 83       	st	Z, r24
    15bc:	0c c0       	rjmp	.+24     	; 0x15d6 <Radar_LCD_Sweep+0x44>
    15be:	0e 94 bd 0c 	call	0x197a	; 0x197a <Servo_SetAngle>
    15c2:	8f e5       	ldi	r24, 0x5F	; 95
    15c4:	9a ee       	ldi	r25, 0xEA	; 234
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <Radar_LCD_Sweep+0x34>
    15ca:	00 c0       	rjmp	.+0      	; 0x15cc <Radar_LCD_Sweep+0x3a>
    15cc:	00 00       	nop
    15ce:	f8 01       	movw	r30, r16
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 5f       	subi	r24, 0xFF	; 255
    15d4:	80 83       	st	Z, r24
    15d6:	f8 01       	movw	r30, r16
    15d8:	80 81       	ld	r24, Z
    15da:	84 3b       	cpi	r24, 0xB4	; 180
    15dc:	80 f3       	brcs	.-32     	; 0x15be <Radar_LCD_Sweep+0x2c>
    15de:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <UltraSonic_Sendpulse>
    15e2:	85 ee       	ldi	r24, 0xE5	; 229
    15e4:	9d e0       	ldi	r25, 0x0D	; 13
    15e6:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <UltraSonic_Calc_Distance>
    15ea:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <Rover_state>
    15ee:	81 e3       	ldi	r24, 0x31	; 49
    15f0:	95 e0       	ldi	r25, 0x05	; 5
    15f2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <ROVER_LCD_PrintStatus>
    15f6:	f8 01       	movw	r30, r16
    15f8:	80 81       	ld	r24, Z
    15fa:	88 83       	st	Y, r24
    15fc:	0b c0       	rjmp	.+22     	; 0x1614 <Radar_LCD_Sweep+0x82>
    15fe:	0e 94 bd 0c 	call	0x197a	; 0x197a <Servo_SetAngle>
    1602:	8f e5       	ldi	r24, 0x5F	; 95
    1604:	9a ee       	ldi	r25, 0xEA	; 234
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <Radar_LCD_Sweep+0x74>
    160a:	00 c0       	rjmp	.+0      	; 0x160c <Radar_LCD_Sweep+0x7a>
    160c:	00 00       	nop
    160e:	88 81       	ld	r24, Y
    1610:	81 50       	subi	r24, 0x01	; 1
    1612:	88 83       	st	Y, r24
    1614:	88 81       	ld	r24, Y
    1616:	81 11       	cpse	r24, r1
    1618:	f2 cf       	rjmp	.-28     	; 0x15fe <Radar_LCD_Sweep+0x6c>
    161a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <UltraSonic_Sendpulse>
    161e:	85 ee       	ldi	r24, 0xE5	; 229
    1620:	9d e0       	ldi	r25, 0x0D	; 13
    1622:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <UltraSonic_Calc_Distance>
    1626:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <Rover_state>
    162a:	81 e3       	ldi	r24, 0x31	; 49
    162c:	95 e0       	ldi	r25, 0x05	; 5
    162e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <ROVER_LCD_PrintStatus>
    1632:	18 82       	st	Y, r1
    1634:	0b c0       	rjmp	.+22     	; 0x164c <Radar_LCD_Sweep+0xba>
    1636:	0e 94 bd 0c 	call	0x197a	; 0x197a <Servo_SetAngle>
    163a:	ef e5       	ldi	r30, 0x5F	; 95
    163c:	fa ee       	ldi	r31, 0xEA	; 234
    163e:	31 97       	sbiw	r30, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <Radar_LCD_Sweep+0xac>
    1642:	00 c0       	rjmp	.+0      	; 0x1644 <Radar_LCD_Sweep+0xb2>
    1644:	00 00       	nop
    1646:	88 81       	ld	r24, Y
    1648:	8f 5f       	subi	r24, 0xFF	; 255
    164a:	88 83       	st	Y, r24
    164c:	88 81       	ld	r24, Y
    164e:	8b 35       	cpi	r24, 0x5B	; 91
    1650:	90 f3       	brcs	.-28     	; 0x1636 <Radar_LCD_Sweep+0xa4>
    1652:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <UltraSonic_Sendpulse>
    1656:	85 ee       	ldi	r24, 0xE5	; 229
    1658:	9d e0       	ldi	r25, 0x0D	; 13
    165a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <UltraSonic_Calc_Distance>
    165e:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <Rover_state>
    1662:	81 e3       	ldi	r24, 0x31	; 49
    1664:	95 e0       	ldi	r25, 0x05	; 5
    1666:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <ROVER_LCD_PrintStatus>
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	08 95       	ret

00001674 <IrSensor_voidInit>:
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	63 e0       	ldi	r22, 0x03	; 3
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	61 e0       	ldi	r22, 0x01	; 1
    168c:	82 e0       	ldi	r24, 0x02	; 2
    168e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	62 e0       	ldi	r22, 0x02	; 2
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    169c:	08 95       	ret

0000169e <IrSensor_GetDir>:
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    16aa:	c1 e3       	ldi	r28, 0x31	; 49
    16ac:	d5 e0       	ldi	r29, 0x05	; 5
    16ae:	8c 83       	std	Y+4, r24	; 0x04
    16b0:	61 e0       	ldi	r22, 0x01	; 1
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    16b8:	8b 83       	std	Y+3, r24	; 0x03
    16ba:	62 e0       	ldi	r22, 0x02	; 2
    16bc:	82 e0       	ldi	r24, 0x02	; 2
    16be:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    16c2:	8a 83       	std	Y+2, r24	; 0x02
    16c4:	63 e0       	ldi	r22, 0x03	; 3
    16c6:	82 e0       	ldi	r24, 0x02	; 2
    16c8:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	08 95       	ret

000016d4 <Buzzer_voidInit>:
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	63 e0       	ldi	r22, 0x03	; 3
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    16de:	08 95       	ret

000016e0 <RoverTransmit_Init>:
			_delay_ms(100);
}

/********** Function to Initialize Data Transmission From Rover ********/
void RoverTransmit_Init(void){
	UART_voidInit();
    16e0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <UART_voidInit>
    16e4:	08 95       	ret

000016e6 <SendNumber>:
}
void SendNumber(u16 num) {
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <SendNumber+0x8>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <SendNumber+0xa>
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <SendNumber+0xc>
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	ac 01       	movw	r20, r24
	char buffer[6]; // Buffer to hold the string representation of the number
	u8 i = 0;
	if (num == 0) {
    16f8:	89 2b       	or	r24, r25
    16fa:	91 f5       	brne	.+100    	; 0x1760 <SendNumber+0x7a>
		UART_voidTX('0');
    16fc:	80 e3       	ldi	r24, 0x30	; 48
    16fe:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
    1702:	3f c0       	rjmp	.+126    	; 0x1782 <SendNumber+0x9c>
		return;
	}

	// Convert number to string manually
	while (num != 0) {
		buffer[i++] = (num % 10) + '0';
    1704:	9a 01       	movw	r18, r20
    1706:	ad ec       	ldi	r26, 0xCD	; 205
    1708:	bc ec       	ldi	r27, 0xCC	; 204
    170a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__umulhisi3>
    170e:	96 95       	lsr	r25
    1710:	87 95       	ror	r24
    1712:	96 95       	lsr	r25
    1714:	87 95       	ror	r24
    1716:	96 95       	lsr	r25
    1718:	87 95       	ror	r24
    171a:	9c 01       	movw	r18, r24
    171c:	22 0f       	add	r18, r18
    171e:	33 1f       	adc	r19, r19
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	82 0f       	add	r24, r18
    172e:	93 1f       	adc	r25, r19
    1730:	9a 01       	movw	r18, r20
    1732:	28 1b       	sub	r18, r24
    1734:	39 0b       	sbc	r19, r25
    1736:	c9 01       	movw	r24, r18
    1738:	e1 e0       	ldi	r30, 0x01	; 1
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	ec 0f       	add	r30, r28
    173e:	fd 1f       	adc	r31, r29
    1740:	e1 0f       	add	r30, r17
    1742:	f1 1d       	adc	r31, r1
    1744:	80 5d       	subi	r24, 0xD0	; 208
    1746:	80 83       	st	Z, r24
		num /= 10;
    1748:	9a 01       	movw	r18, r20
    174a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__umulhisi3>
    174e:	ac 01       	movw	r20, r24
    1750:	56 95       	lsr	r21
    1752:	47 95       	ror	r20
    1754:	56 95       	lsr	r21
    1756:	47 95       	ror	r20
    1758:	56 95       	lsr	r21
    175a:	47 95       	ror	r20
		return;
	}

	// Convert number to string manually
	while (num != 0) {
		buffer[i++] = (num % 10) + '0';
    175c:	1f 5f       	subi	r17, 0xFF	; 255
    175e:	01 c0       	rjmp	.+2      	; 0x1762 <SendNumber+0x7c>
    1760:	10 e0       	ldi	r17, 0x00	; 0
		UART_voidTX('0');
		return;
	}

	// Convert number to string manually
	while (num != 0) {
    1762:	41 15       	cp	r20, r1
    1764:	51 05       	cpc	r21, r1
    1766:	71 f6       	brne	.-100    	; 0x1704 <SendNumber+0x1e>
    1768:	0a c0       	rjmp	.+20     	; 0x177e <SendNumber+0x98>
		num /= 10;
	}

	// Send the string in the correct order
	while (i > 0) {
		UART_voidTX(buffer[--i]);
    176a:	11 50       	subi	r17, 0x01	; 1
    176c:	e1 e0       	ldi	r30, 0x01	; 1
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	ec 0f       	add	r30, r28
    1772:	fd 1f       	adc	r31, r29
    1774:	e1 0f       	add	r30, r17
    1776:	f1 1d       	adc	r31, r1
    1778:	80 81       	ld	r24, Z
    177a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
		buffer[i++] = (num % 10) + '0';
		num /= 10;
	}

	// Send the string in the correct order
	while (i > 0) {
    177e:	11 11       	cpse	r17, r1
    1780:	f4 cf       	rjmp	.-24     	; 0x176a <SendNumber+0x84>
		UART_voidTX(buffer[--i]);
	}
}
    1782:	26 96       	adiw	r28, 0x06	; 6
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	08 95       	ret

00001796 <RoverTransmitStatus>:
/********** Function to Transmit Rover Status  ********/
void RoverTransmitStatus(void){
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
	
	UART_voidTX('D');
    179a:	84 e4       	ldi	r24, 0x44	; 68
    179c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	UART_voidTX(':');
    17a0:	8a e3       	ldi	r24, 0x3A	; 58
    17a2:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	SendNumber(Rover_state.Distance);  // Function to send number
    17a6:	c1 e3       	ldi	r28, 0x31	; 49
    17a8:	d5 e0       	ldi	r29, 0x05	; 5
    17aa:	88 81       	ld	r24, Y
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <SendNumber>
	UART_voidTX('F');
    17b2:	86 e4       	ldi	r24, 0x46	; 70
    17b4:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	UART_voidTX(':');
    17b8:	8a e3       	ldi	r24, 0x3A	; 58
    17ba:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	SendNumber(Rover_state.F_Obj);    // Function to send number
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <SendNumber>
	UART_voidTX('B');
    17c6:	82 e4       	ldi	r24, 0x42	; 66
    17c8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	UART_voidTX(':');
    17cc:	8a e3       	ldi	r24, 0x3A	; 58
    17ce:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	SendNumber(Rover_state.B_Obj);    // Function to send number
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <SendNumber>
	UART_voidTX('R');
    17da:	82 e5       	ldi	r24, 0x52	; 82
    17dc:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	UART_voidTX(':');
    17e0:	8a e3       	ldi	r24, 0x3A	; 58
    17e2:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	SendNumber(Rover_state.R_Obj);    // Function to send number
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <SendNumber>
	UART_voidTX('L');
    17ee:	8c e4       	ldi	r24, 0x4C	; 76
    17f0:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	UART_voidTX(':');
    17f4:	8a e3       	ldi	r24, 0x3A	; 58
    17f6:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	SendNumber(Rover_state.L_Obj);    // Function to send number
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <SendNumber>
	UART_voidTX('D');
    1802:	84 e4       	ldi	r24, 0x44	; 68
    1804:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	UART_voidTX('i');
    1808:	89 e6       	ldi	r24, 0x69	; 105
    180a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	UART_voidTX('r');
    180e:	82 e7       	ldi	r24, 0x72	; 114
    1810:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	UART_voidTX(':');
    1814:	8a e3       	ldi	r24, 0x3A	; 58
    1816:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_voidTX>
	SendNumber(Rover_state.Direction);  // Function to send number
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <SendNumber>
	
}
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	08 95       	ret

00001828 <vTask_RoverInit>:

void vTask_RoverInit(void){
	
	Radar_LCD_Init();
    1828:	0e 94 72 09 	call	0x12e4	; 0x12e4 <Radar_LCD_Init>
	Rover_voidMotorsInit();
    182c:	0e 94 a4 09 	call	0x1348	; 0x1348 <Rover_voidMotorsInit>
	IrSensor_voidInit();
    1830:	0e 94 3a 0b 	call	0x1674	; 0x1674 <IrSensor_voidInit>
	Buzzer_voidInit();
    1834:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <Buzzer_voidInit>
	RoverTransmit_Init();
    1838:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <RoverTransmit_Init>

	// Once initialization is complete, delete this task
	vTaskDelete(NULL);
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 12 06 	call	0xc24	; 0xc24 <vTaskDelete>
    1844:	08 95       	ret

00001846 <vTask_RoverMove>:
	
	

	while(1){
		// Check if the front is clear (IR sensor or ultrasonic distance)
		if (Rover_state.F_Obj == 1 && Rover_state.Distance > 10) {
    1846:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <Rover_state+0x1>
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	b9 f4       	brne	.+46     	; 0x187c <vTask_RoverMove+0x36>
    184e:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <Rover_state>
    1852:	8b 30       	cpi	r24, 0x0B	; 11
    1854:	98 f0       	brcs	.+38     	; 0x187c <vTask_RoverMove+0x36>
			Rover_voidMOVFWD(50);
    1856:	82 e3       	ldi	r24, 0x32	; 50
    1858:	0e 94 be 09 	call	0x137c	; 0x137c <Rover_voidMOVFWD>
			while (Rover_state.F_Obj == 1 && Rover_state.Distance > 10) {
    185c:	04 c0       	rjmp	.+8      	; 0x1866 <vTask_RoverMove+0x20>
				vTaskDelay(pdMS_TO_TICKS(100));
    185e:	82 e2       	ldi	r24, 0x22	; 34
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskDelay>

	while(1){
		// Check if the front is clear (IR sensor or ultrasonic distance)
		if (Rover_state.F_Obj == 1 && Rover_state.Distance > 10) {
			Rover_voidMOVFWD(50);
			while (Rover_state.F_Obj == 1 && Rover_state.Distance > 10) {
    1866:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <Rover_state+0x1>
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	21 f4       	brne	.+8      	; 0x1876 <vTask_RoverMove+0x30>
    186e:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <Rover_state>
    1872:	8b 30       	cpi	r24, 0x0B	; 11
    1874:	a0 f7       	brcc	.-24     	; 0x185e <vTask_RoverMove+0x18>
				vTaskDelay(pdMS_TO_TICKS(100));
			}
			Rover_voidStop();
    1876:	0e 94 36 0a 	call	0x146c	; 0x146c <Rover_voidStop>
    187a:	44 c0       	rjmp	.+136    	; 0x1904 <vTask_RoverMove+0xbe>
			} else {
			Rover_voidMOVBCWD(55);
    187c:	87 e3       	ldi	r24, 0x37	; 55
    187e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Rover_voidMOVBCWD>
			vTaskDelay(pdMS_TO_TICKS(500));
    1882:	89 e2       	ldi	r24, 0x29	; 41
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskDelay>
			Rover_voidStop();
    188a:	0e 94 36 0a 	call	0x146c	; 0x146c <Rover_voidStop>

			if (Rover_state.L_Obj != 1 && Rover_state.R_Obj == 1) {
    188e:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <Rover_state+0x2>
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	61 f0       	breq	.+24     	; 0x18ae <vTask_RoverMove+0x68>
    1896:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <Rover_state+0x3>
    189a:	91 30       	cpi	r25, 0x01	; 1
    189c:	41 f4       	brne	.+16     	; 0x18ae <vTask_RoverMove+0x68>
				Rover_voidMOVRW(85);
    189e:	85 e5       	ldi	r24, 0x55	; 85
    18a0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <Rover_voidMOVRW>
				vTaskDelay(pdMS_TO_TICKS(1750));
    18a4:	8e e2       	ldi	r24, 0x2E	; 46
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskDelay>
    18ac:	21 c0       	rjmp	.+66     	; 0x18f0 <vTask_RoverMove+0xaa>
				} else if (Rover_state.R_Obj != 1 && Rover_state.L_Obj == 1) {
    18ae:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <Rover_state+0x3>
    18b2:	91 30       	cpi	r25, 0x01	; 1
    18b4:	51 f0       	breq	.+20     	; 0x18ca <vTask_RoverMove+0x84>
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	41 f4       	brne	.+16     	; 0x18ca <vTask_RoverMove+0x84>
				Rover_voidMOVLF(85);
    18ba:	85 e5       	ldi	r24, 0x55	; 85
    18bc:	0e 94 18 0a 	call	0x1430	; 0x1430 <Rover_voidMOVLF>
				vTaskDelay(pdMS_TO_TICKS(1750));
    18c0:	8e e2       	ldi	r24, 0x2E	; 46
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskDelay>
    18c8:	13 c0       	rjmp	.+38     	; 0x18f0 <vTask_RoverMove+0xaa>
				} else if (Rover_state.L_Obj == 1) {
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	41 f4       	brne	.+16     	; 0x18de <vTask_RoverMove+0x98>
				Rover_voidMOVLF(85);
    18ce:	85 e5       	ldi	r24, 0x55	; 85
    18d0:	0e 94 18 0a 	call	0x1430	; 0x1430 <Rover_voidMOVLF>
				vTaskDelay(pdMS_TO_TICKS(1750));
    18d4:	8e e2       	ldi	r24, 0x2E	; 46
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskDelay>
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <vTask_RoverMove+0xaa>
				} else if (Rover_state.R_Obj == 1) {
    18de:	91 30       	cpi	r25, 0x01	; 1
    18e0:	39 f4       	brne	.+14     	; 0x18f0 <vTask_RoverMove+0xaa>
				Rover_voidMOVRW(85);
    18e2:	85 e5       	ldi	r24, 0x55	; 85
    18e4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <Rover_voidMOVRW>
				vTaskDelay(pdMS_TO_TICKS(1750));
    18e8:	8e e2       	ldi	r24, 0x2E	; 46
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskDelay>
			}

			vTaskDelay(pdMS_TO_TICKS(500));
    18f0:	89 e2       	ldi	r24, 0x29	; 41
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskDelay>
			Rover_voidStop();
    18f8:	0e 94 36 0a 	call	0x146c	; 0x146c <Rover_voidStop>
			vTaskDelay(pdMS_TO_TICKS(50));
    18fc:	82 e3       	ldi	r24, 0x32	; 50
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskDelay>
		}
		vTaskDelay(pdMS_TO_TICKS(100));
    1904:	82 e2       	ldi	r24, 0x22	; 34
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskDelay>
	}
    190c:	9c cf       	rjmp	.-200    	; 0x1846 <vTask_RoverMove>

0000190e <vTask_DataDisplay>:

void vTask_DataDisplay(void){
	
	
	while(1){
		ROVER_LCD_PrintStatus(&Rover_state);
    190e:	81 e3       	ldi	r24, 0x31	; 49
    1910:	95 e0       	ldi	r25, 0x05	; 5
    1912:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <ROVER_LCD_PrintStatus>
		vTaskDelay(pdMS_TO_TICKS(150));
    1916:	82 e1       	ldi	r24, 0x12	; 18
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskDelay>
    191e:	f7 cf       	rjmp	.-18     	; 0x190e <vTask_DataDisplay>

00001920 <vTask_SensorRead>:
	}
	
}

void vTask_SensorRead(void){
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	00 d0       	rcall	.+0      	; 0x1926 <vTask_SensorRead+0x6>
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
	
	u8 angle_1 = 0, angle_2 = 90;
    192a:	19 82       	std	Y+1, r1	; 0x01
    192c:	8a e5       	ldi	r24, 0x5A	; 90
    192e:	8a 83       	std	Y+2, r24	; 0x02
	while(1){
		
		IrSensor_GetDir();
    1930:	0e 94 4f 0b 	call	0x169e	; 0x169e <IrSensor_GetDir>
		UltraSonic_Sendpulse();
    1934:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <UltraSonic_Sendpulse>
		Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
    1938:	85 ee       	ldi	r24, 0xE5	; 229
    193a:	9d e0       	ldi	r25, 0x0D	; 13
    193c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <UltraSonic_Calc_Distance>
    1940:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <Rover_state>
		Radar_LCD_Sweep(&angle_1,&angle_2);
    1944:	be 01       	movw	r22, r28
    1946:	6e 5f       	subi	r22, 0xFE	; 254
    1948:	7f 4f       	sbci	r23, 0xFF	; 255
    194a:	ce 01       	movw	r24, r28
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <Radar_LCD_Sweep>
		vTaskDelay(pdMS_TO_TICKS(150));
    1952:	82 e1       	ldi	r24, 0x12	; 18
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskDelay>
    195a:	ea cf       	rjmp	.-44     	; 0x1930 <vTask_SensorRead+0x10>

0000195c <vTask_BT_SendStatus>:
	
}

void vTask_BT_SendStatus(void){
	while(1){
		RoverTransmitStatus();
    195c:	0e 94 cb 0b 	call	0x1796	; 0x1796 <RoverTransmitStatus>
		vTaskDelay(pdMS_TO_TICKS(150));
    1960:	82 e1       	ldi	r24, 0x12	; 18
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskDelay>
    1968:	f9 cf       	rjmp	.-14     	; 0x195c <vTask_BT_SendStatus>

0000196a <Servo_Init>:
void Servo_Init(void){
	
	
	// Initialize Timer1 for Fast PWM mode
	
	DIO_voidSetPinDir(PWM_PORT,PWM_PIN,OUTPUT);
    196a:	41 e0       	ldi	r20, 0x01	; 1
    196c:	65 e0       	ldi	r22, 0x05	; 5
    196e:	83 e0       	ldi	r24, 0x03	; 3
    1970:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
	// Set initial angle to 0 degrees
	 TIMER1_voidFastPWMICR1();
    1974:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <TIMER1_voidFastPWMICR1>
    1978:	08 95       	ret

0000197a <Servo_SetAngle>:
	
	
}
void Servo_SetAngle(u8 angle){
	
	u16 ocr_val =angle*23+1000 ;
    197a:	27 e1       	ldi	r18, 0x17	; 23
    197c:	82 9f       	mul	r24, r18
    197e:	c0 01       	movw	r24, r0
    1980:	11 24       	eor	r1, r1
	
	
	TIMER1_voidSetOCRVal(ocr_val);
    1982:	88 51       	subi	r24, 0x18	; 24
    1984:	9c 4f       	sbci	r25, 0xFC	; 252
    1986:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <TIMER1_voidSetOCRVal>
    198a:	08 95       	ret

0000198c <__vector_11>:
    198c:	1f 92       	push	r1
    198e:	0f 92       	push	r0
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	0f 92       	push	r0
    1994:	11 24       	eor	r1, r1
    1996:	2f 93       	push	r18
    1998:	3f 93       	push	r19
    199a:	4f 93       	push	r20
    199c:	5f 93       	push	r21
    199e:	6f 93       	push	r22
    19a0:	7f 93       	push	r23
    19a2:	8f 93       	push	r24
    19a4:	9f 93       	push	r25
    19a6:	af 93       	push	r26
    19a8:	bf 93       	push	r27
    19aa:	ef 93       	push	r30
    19ac:	ff 93       	push	r31
    19ae:	e0 91 2b 05 	lds	r30, 0x052B	; 0x80052b <OVF_ptr>
    19b2:	f0 91 2c 05 	lds	r31, 0x052C	; 0x80052c <OVF_ptr+0x1>
    19b6:	09 95       	icall
    19b8:	ff 91       	pop	r31
    19ba:	ef 91       	pop	r30
    19bc:	bf 91       	pop	r27
    19be:	af 91       	pop	r26
    19c0:	9f 91       	pop	r25
    19c2:	8f 91       	pop	r24
    19c4:	7f 91       	pop	r23
    19c6:	6f 91       	pop	r22
    19c8:	5f 91       	pop	r21
    19ca:	4f 91       	pop	r20
    19cc:	3f 91       	pop	r19
    19ce:	2f 91       	pop	r18
    19d0:	0f 90       	pop	r0
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	0f 90       	pop	r0
    19d6:	1f 90       	pop	r1
    19d8:	18 95       	reti

000019da <__vector_10>:
    19da:	1f 92       	push	r1
    19dc:	0f 92       	push	r0
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	0f 92       	push	r0
    19e2:	11 24       	eor	r1, r1
    19e4:	2f 93       	push	r18
    19e6:	3f 93       	push	r19
    19e8:	4f 93       	push	r20
    19ea:	5f 93       	push	r21
    19ec:	6f 93       	push	r22
    19ee:	7f 93       	push	r23
    19f0:	8f 93       	push	r24
    19f2:	9f 93       	push	r25
    19f4:	af 93       	push	r26
    19f6:	bf 93       	push	r27
    19f8:	ef 93       	push	r30
    19fa:	ff 93       	push	r31
    19fc:	e0 91 29 05 	lds	r30, 0x0529	; 0x800529 <CTC_ptr>
    1a00:	f0 91 2a 05 	lds	r31, 0x052A	; 0x80052a <CTC_ptr+0x1>
    1a04:	09 95       	icall
    1a06:	ff 91       	pop	r31
    1a08:	ef 91       	pop	r30
    1a0a:	bf 91       	pop	r27
    1a0c:	af 91       	pop	r26
    1a0e:	9f 91       	pop	r25
    1a10:	8f 91       	pop	r24
    1a12:	7f 91       	pop	r23
    1a14:	6f 91       	pop	r22
    1a16:	5f 91       	pop	r21
    1a18:	4f 91       	pop	r20
    1a1a:	3f 91       	pop	r19
    1a1c:	2f 91       	pop	r18
    1a1e:	0f 90       	pop	r0
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	0f 90       	pop	r0
    1a24:	1f 90       	pop	r1
    1a26:	18 95       	reti

00001a28 <TIMER1_voidFastPWMICR1>:
    1a28:	8f b5       	in	r24, 0x2f	; 47
    1a2a:	90 b7       	in	r25, 0x30	; 48
    1a2c:	8e 7f       	andi	r24, 0xFE	; 254
    1a2e:	90 bf       	out	0x30, r25	; 48
    1a30:	8f bd       	out	0x2f, r24	; 47
    1a32:	8f b5       	in	r24, 0x2f	; 47
    1a34:	90 b7       	in	r25, 0x30	; 48
    1a36:	82 60       	ori	r24, 0x02	; 2
    1a38:	90 bf       	out	0x30, r25	; 48
    1a3a:	8f bd       	out	0x2f, r24	; 47
    1a3c:	8e b5       	in	r24, 0x2e	; 46
    1a3e:	9f b5       	in	r25, 0x2f	; 47
    1a40:	88 60       	ori	r24, 0x08	; 8
    1a42:	9f bd       	out	0x2f, r25	; 47
    1a44:	8e bd       	out	0x2e, r24	; 46
    1a46:	8e b5       	in	r24, 0x2e	; 46
    1a48:	9f b5       	in	r25, 0x2f	; 47
    1a4a:	80 61       	ori	r24, 0x10	; 16
    1a4c:	9f bd       	out	0x2f, r25	; 47
    1a4e:	8e bd       	out	0x2e, r24	; 46
    1a50:	8f b5       	in	r24, 0x2f	; 47
    1a52:	90 b7       	in	r25, 0x30	; 48
    1a54:	80 68       	ori	r24, 0x80	; 128
    1a56:	90 bf       	out	0x30, r25	; 48
    1a58:	8f bd       	out	0x2f, r24	; 47
    1a5a:	8f b5       	in	r24, 0x2f	; 47
    1a5c:	90 b7       	in	r25, 0x30	; 48
    1a5e:	8f 7b       	andi	r24, 0xBF	; 191
    1a60:	90 bf       	out	0x30, r25	; 48
    1a62:	8f bd       	out	0x2f, r24	; 47
    1a64:	8f b5       	in	r24, 0x2f	; 47
    1a66:	90 b7       	in	r25, 0x30	; 48
    1a68:	80 62       	ori	r24, 0x20	; 32
    1a6a:	90 bf       	out	0x30, r25	; 48
    1a6c:	8f bd       	out	0x2f, r24	; 47
    1a6e:	8f b5       	in	r24, 0x2f	; 47
    1a70:	90 b7       	in	r25, 0x30	; 48
    1a72:	8f 7e       	andi	r24, 0xEF	; 239
    1a74:	90 bf       	out	0x30, r25	; 48
    1a76:	8f bd       	out	0x2f, r24	; 47
    1a78:	8e b5       	in	r24, 0x2e	; 46
    1a7a:	9f b5       	in	r25, 0x2f	; 47
    1a7c:	8e 7f       	andi	r24, 0xFE	; 254
    1a7e:	9f bd       	out	0x2f, r25	; 47
    1a80:	8e bd       	out	0x2e, r24	; 46
    1a82:	8e b5       	in	r24, 0x2e	; 46
    1a84:	9f b5       	in	r25, 0x2f	; 47
    1a86:	82 60       	ori	r24, 0x02	; 2
    1a88:	9f bd       	out	0x2f, r25	; 47
    1a8a:	8e bd       	out	0x2e, r24	; 46
    1a8c:	8e b5       	in	r24, 0x2e	; 46
    1a8e:	9f b5       	in	r25, 0x2f	; 47
    1a90:	8b 7f       	andi	r24, 0xFB	; 251
    1a92:	9f bd       	out	0x2f, r25	; 47
    1a94:	8e bd       	out	0x2e, r24	; 46
    1a96:	80 e4       	ldi	r24, 0x40	; 64
    1a98:	9c e9       	ldi	r25, 0x9C	; 156
    1a9a:	97 bd       	out	0x27, r25	; 39
    1a9c:	86 bd       	out	0x26, r24	; 38
    1a9e:	8f ef       	ldi	r24, 0xFF	; 255
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	99 bd       	out	0x29, r25	; 41
    1aa4:	88 bd       	out	0x28, r24	; 40
    1aa6:	08 95       	ret

00001aa8 <TIMER1_voidSetOCRVal>:
    1aa8:	9b bd       	out	0x2b, r25	; 43
    1aaa:	8a bd       	out	0x2a, r24	; 42
    1aac:	08 95       	ret

00001aae <TIMER2_voidFastPWM>:
    1aae:	95 b5       	in	r25, 0x25	; 37
    1ab0:	98 7f       	andi	r25, 0xF8	; 248
    1ab2:	95 bd       	out	0x25, r25	; 37
    1ab4:	95 b5       	in	r25, 0x25	; 37
    1ab6:	93 60       	ori	r25, 0x03	; 3
    1ab8:	95 bd       	out	0x25, r25	; 37
    1aba:	95 b5       	in	r25, 0x25	; 37
    1abc:	98 60       	ori	r25, 0x08	; 8
    1abe:	95 bd       	out	0x25, r25	; 37
    1ac0:	95 b5       	in	r25, 0x25	; 37
    1ac2:	90 64       	ori	r25, 0x40	; 64
    1ac4:	95 bd       	out	0x25, r25	; 37
    1ac6:	95 b5       	in	r25, 0x25	; 37
    1ac8:	90 62       	ori	r25, 0x20	; 32
    1aca:	95 bd       	out	0x25, r25	; 37
    1acc:	95 b5       	in	r25, 0x25	; 37
    1ace:	9f 7e       	andi	r25, 0xEF	; 239
    1ad0:	95 bd       	out	0x25, r25	; 37
    1ad2:	68 2f       	mov	r22, r24
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__floatsisf>
    1ade:	23 e3       	ldi	r18, 0x33	; 51
    1ae0:	33 e3       	ldi	r19, 0x33	; 51
    1ae2:	43 e2       	ldi	r20, 0x23	; 35
    1ae4:	50 e4       	ldi	r21, 0x40	; 64
    1ae6:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__mulsf3>
    1aea:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fixunssfsi>
    1aee:	63 bd       	out	0x23, r22	; 35
    1af0:	08 95       	ret

00001af2 <__vector_5>:
    1af2:	1f 92       	push	r1
    1af4:	0f 92       	push	r0
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	0f 92       	push	r0
    1afa:	11 24       	eor	r1, r1
    1afc:	2f 93       	push	r18
    1afe:	3f 93       	push	r19
    1b00:	4f 93       	push	r20
    1b02:	5f 93       	push	r21
    1b04:	6f 93       	push	r22
    1b06:	7f 93       	push	r23
    1b08:	8f 93       	push	r24
    1b0a:	9f 93       	push	r25
    1b0c:	af 93       	push	r26
    1b0e:	bf 93       	push	r27
    1b10:	ef 93       	push	r30
    1b12:	ff 93       	push	r31
    1b14:	e0 91 2f 05 	lds	r30, 0x052F	; 0x80052f <OVF_ptr>
    1b18:	f0 91 30 05 	lds	r31, 0x0530	; 0x800530 <OVF_ptr+0x1>
    1b1c:	09 95       	icall
    1b1e:	ff 91       	pop	r31
    1b20:	ef 91       	pop	r30
    1b22:	bf 91       	pop	r27
    1b24:	af 91       	pop	r26
    1b26:	9f 91       	pop	r25
    1b28:	8f 91       	pop	r24
    1b2a:	7f 91       	pop	r23
    1b2c:	6f 91       	pop	r22
    1b2e:	5f 91       	pop	r21
    1b30:	4f 91       	pop	r20
    1b32:	3f 91       	pop	r19
    1b34:	2f 91       	pop	r18
    1b36:	0f 90       	pop	r0
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	0f 90       	pop	r0
    1b3c:	1f 90       	pop	r1
    1b3e:	18 95       	reti

00001b40 <__vector_4>:
    1b40:	1f 92       	push	r1
    1b42:	0f 92       	push	r0
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	0f 92       	push	r0
    1b48:	11 24       	eor	r1, r1
    1b4a:	2f 93       	push	r18
    1b4c:	3f 93       	push	r19
    1b4e:	4f 93       	push	r20
    1b50:	5f 93       	push	r21
    1b52:	6f 93       	push	r22
    1b54:	7f 93       	push	r23
    1b56:	8f 93       	push	r24
    1b58:	9f 93       	push	r25
    1b5a:	af 93       	push	r26
    1b5c:	bf 93       	push	r27
    1b5e:	ef 93       	push	r30
    1b60:	ff 93       	push	r31
    1b62:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <CTC_ptr>
    1b66:	f0 91 2e 05 	lds	r31, 0x052E	; 0x80052e <CTC_ptr+0x1>
    1b6a:	09 95       	icall
    1b6c:	ff 91       	pop	r31
    1b6e:	ef 91       	pop	r30
    1b70:	bf 91       	pop	r27
    1b72:	af 91       	pop	r26
    1b74:	9f 91       	pop	r25
    1b76:	8f 91       	pop	r24
    1b78:	7f 91       	pop	r23
    1b7a:	6f 91       	pop	r22
    1b7c:	5f 91       	pop	r21
    1b7e:	4f 91       	pop	r20
    1b80:	3f 91       	pop	r19
    1b82:	2f 91       	pop	r18
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	0f 90       	pop	r0
    1b8a:	1f 90       	pop	r1
    1b8c:	18 95       	reti

00001b8e <UART_voidInit>:
    1b8e:	86 e8       	ldi	r24, 0x86	; 134
    1b90:	80 bd       	out	0x20, r24	; 32
    1b92:	87 e6       	ldi	r24, 0x67	; 103
    1b94:	89 b9       	out	0x09, r24	; 9
    1b96:	8a b1       	in	r24, 0x0a	; 10
    1b98:	88 60       	ori	r24, 0x08	; 8
    1b9a:	8a b9       	out	0x0a, r24	; 10
    1b9c:	8a b1       	in	r24, 0x0a	; 10
    1b9e:	80 61       	ori	r24, 0x10	; 16
    1ba0:	8a b9       	out	0x0a, r24	; 10
    1ba2:	08 95       	ret

00001ba4 <UART_voidTX>:
    1ba4:	8c b9       	out	0x0c, r24	; 12
    1ba6:	5d 9b       	sbis	0x0b, 5	; 11
    1ba8:	fe cf       	rjmp	.-4      	; 0x1ba6 <UART_voidTX+0x2>
    1baa:	08 95       	ret

00001bac <UltraSonic_Sendpulse>:
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	64 e0       	ldi	r22, 0x04	; 4
    1bb0:	82 e0       	ldi	r24, 0x02	; 2
    1bb2:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bb6:	85 e3       	ldi	r24, 0x35	; 53
    1bb8:	8a 95       	dec	r24
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <UltraSonic_Sendpulse+0xc>
    1bbc:	00 00       	nop
    1bbe:	40 e0       	ldi	r20, 0x00	; 0
    1bc0:	64 e0       	ldi	r22, 0x04	; 4
    1bc2:	82 e0       	ldi	r24, 0x02	; 2
    1bc4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1bc8:	08 95       	ret

00001bca <UltraSonic_Read_Echo>:
    1bca:	cf 93       	push	r28
    1bcc:	12 be       	out	0x32, r1	; 50
    1bce:	83 e0       	ldi	r24, 0x03	; 3
    1bd0:	83 bf       	out	0x33, r24	; 51
    1bd2:	65 e0       	ldi	r22, 0x05	; 5
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    1bda:	88 23       	and	r24, r24
    1bdc:	d1 f3       	breq	.-12     	; 0x1bd2 <UltraSonic_Read_Echo+0x8>
    1bde:	c0 e0       	ldi	r28, 0x00	; 0
    1be0:	07 c0       	rjmp	.+14     	; 0x1bf0 <UltraSonic_Read_Echo+0x26>
    1be2:	08 b6       	in	r0, 0x38	; 56
    1be4:	00 fe       	sbrs	r0, 0
    1be6:	04 c0       	rjmp	.+8      	; 0x1bf0 <UltraSonic_Read_Echo+0x26>
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	88 bf       	out	0x38, r24	; 56
    1bec:	cf 5f       	subi	r28, 0xFF	; 255
    1bee:	12 be       	out	0x32, r1	; 50
    1bf0:	65 e0       	ldi	r22, 0x05	; 5
    1bf2:	82 e0       	ldi	r24, 0x02	; 2
    1bf4:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	99 f3       	breq	.-26     	; 0x1be2 <UltraSonic_Read_Echo+0x18>
    1bfc:	8c 2f       	mov	r24, r28
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	98 2f       	mov	r25, r24
    1c02:	88 27       	eor	r24, r24
    1c04:	22 b7       	in	r18, 0x32	; 50
    1c06:	13 be       	out	0x33, r1	; 51
    1c08:	82 0f       	add	r24, r18
    1c0a:	91 1d       	adc	r25, r1
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <UltraSonic_Calc_Distance>:
    1c10:	fc 01       	movw	r30, r24
    1c12:	09 95       	icall
    1c14:	9c 01       	movw	r18, r24
    1c16:	a8 e2       	ldi	r26, 0x28	; 40
    1c18:	b7 e8       	ldi	r27, 0x87	; 135
    1c1a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__umulhisi3>
    1c1e:	20 e2       	ldi	r18, 0x20	; 32
    1c20:	31 ea       	ldi	r19, 0xA1	; 161
    1c22:	47 e0       	ldi	r20, 0x07	; 7
    1c24:	50 e0       	ldi	r21, 0x00	; 0
    1c26:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__udivmodsi4>
    1c2a:	8f ee       	ldi	r24, 0xEF	; 239
    1c2c:	82 0f       	add	r24, r18
    1c2e:	08 95       	ret

00001c30 <__fixunssfsi>:
    1c30:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__fp_splitA>
    1c34:	88 f0       	brcs	.+34     	; 0x1c58 <__fixunssfsi+0x28>
    1c36:	9f 57       	subi	r25, 0x7F	; 127
    1c38:	98 f0       	brcs	.+38     	; 0x1c60 <__fixunssfsi+0x30>
    1c3a:	b9 2f       	mov	r27, r25
    1c3c:	99 27       	eor	r25, r25
    1c3e:	b7 51       	subi	r27, 0x17	; 23
    1c40:	b0 f0       	brcs	.+44     	; 0x1c6e <__fixunssfsi+0x3e>
    1c42:	e1 f0       	breq	.+56     	; 0x1c7c <__fixunssfsi+0x4c>
    1c44:	66 0f       	add	r22, r22
    1c46:	77 1f       	adc	r23, r23
    1c48:	88 1f       	adc	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	1a f0       	brmi	.+6      	; 0x1c54 <__fixunssfsi+0x24>
    1c4e:	ba 95       	dec	r27
    1c50:	c9 f7       	brne	.-14     	; 0x1c44 <__fixunssfsi+0x14>
    1c52:	14 c0       	rjmp	.+40     	; 0x1c7c <__fixunssfsi+0x4c>
    1c54:	b1 30       	cpi	r27, 0x01	; 1
    1c56:	91 f0       	breq	.+36     	; 0x1c7c <__fixunssfsi+0x4c>
    1c58:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_zero>
    1c5c:	b1 e0       	ldi	r27, 0x01	; 1
    1c5e:	08 95       	ret
    1c60:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__fp_zero>
    1c64:	67 2f       	mov	r22, r23
    1c66:	78 2f       	mov	r23, r24
    1c68:	88 27       	eor	r24, r24
    1c6a:	b8 5f       	subi	r27, 0xF8	; 248
    1c6c:	39 f0       	breq	.+14     	; 0x1c7c <__fixunssfsi+0x4c>
    1c6e:	b9 3f       	cpi	r27, 0xF9	; 249
    1c70:	cc f3       	brlt	.-14     	; 0x1c64 <__fixunssfsi+0x34>
    1c72:	86 95       	lsr	r24
    1c74:	77 95       	ror	r23
    1c76:	67 95       	ror	r22
    1c78:	b3 95       	inc	r27
    1c7a:	d9 f7       	brne	.-10     	; 0x1c72 <__fixunssfsi+0x42>
    1c7c:	3e f4       	brtc	.+14     	; 0x1c8c <__fixunssfsi+0x5c>
    1c7e:	90 95       	com	r25
    1c80:	80 95       	com	r24
    1c82:	70 95       	com	r23
    1c84:	61 95       	neg	r22
    1c86:	7f 4f       	sbci	r23, 0xFF	; 255
    1c88:	8f 4f       	sbci	r24, 0xFF	; 255
    1c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8c:	08 95       	ret

00001c8e <__floatunsisf>:
    1c8e:	e8 94       	clt
    1c90:	09 c0       	rjmp	.+18     	; 0x1ca4 <__floatsisf+0x12>

00001c92 <__floatsisf>:
    1c92:	97 fb       	bst	r25, 7
    1c94:	3e f4       	brtc	.+14     	; 0x1ca4 <__floatsisf+0x12>
    1c96:	90 95       	com	r25
    1c98:	80 95       	com	r24
    1c9a:	70 95       	com	r23
    1c9c:	61 95       	neg	r22
    1c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca4:	99 23       	and	r25, r25
    1ca6:	a9 f0       	breq	.+42     	; 0x1cd2 <__floatsisf+0x40>
    1ca8:	f9 2f       	mov	r31, r25
    1caa:	96 e9       	ldi	r25, 0x96	; 150
    1cac:	bb 27       	eor	r27, r27
    1cae:	93 95       	inc	r25
    1cb0:	f6 95       	lsr	r31
    1cb2:	87 95       	ror	r24
    1cb4:	77 95       	ror	r23
    1cb6:	67 95       	ror	r22
    1cb8:	b7 95       	ror	r27
    1cba:	f1 11       	cpse	r31, r1
    1cbc:	f8 cf       	rjmp	.-16     	; 0x1cae <__floatsisf+0x1c>
    1cbe:	fa f4       	brpl	.+62     	; 0x1cfe <__floatsisf+0x6c>
    1cc0:	bb 0f       	add	r27, r27
    1cc2:	11 f4       	brne	.+4      	; 0x1cc8 <__floatsisf+0x36>
    1cc4:	60 ff       	sbrs	r22, 0
    1cc6:	1b c0       	rjmp	.+54     	; 0x1cfe <__floatsisf+0x6c>
    1cc8:	6f 5f       	subi	r22, 0xFF	; 255
    1cca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ccc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cce:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd0:	16 c0       	rjmp	.+44     	; 0x1cfe <__floatsisf+0x6c>
    1cd2:	88 23       	and	r24, r24
    1cd4:	11 f0       	breq	.+4      	; 0x1cda <__floatsisf+0x48>
    1cd6:	96 e9       	ldi	r25, 0x96	; 150
    1cd8:	11 c0       	rjmp	.+34     	; 0x1cfc <__floatsisf+0x6a>
    1cda:	77 23       	and	r23, r23
    1cdc:	21 f0       	breq	.+8      	; 0x1ce6 <__floatsisf+0x54>
    1cde:	9e e8       	ldi	r25, 0x8E	; 142
    1ce0:	87 2f       	mov	r24, r23
    1ce2:	76 2f       	mov	r23, r22
    1ce4:	05 c0       	rjmp	.+10     	; 0x1cf0 <__floatsisf+0x5e>
    1ce6:	66 23       	and	r22, r22
    1ce8:	71 f0       	breq	.+28     	; 0x1d06 <__floatsisf+0x74>
    1cea:	96 e8       	ldi	r25, 0x86	; 134
    1cec:	86 2f       	mov	r24, r22
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	2a f0       	brmi	.+10     	; 0x1cfe <__floatsisf+0x6c>
    1cf4:	9a 95       	dec	r25
    1cf6:	66 0f       	add	r22, r22
    1cf8:	77 1f       	adc	r23, r23
    1cfa:	88 1f       	adc	r24, r24
    1cfc:	da f7       	brpl	.-10     	; 0x1cf4 <__floatsisf+0x62>
    1cfe:	88 0f       	add	r24, r24
    1d00:	96 95       	lsr	r25
    1d02:	87 95       	ror	r24
    1d04:	97 f9       	bld	r25, 7
    1d06:	08 95       	ret

00001d08 <__fp_split3>:
    1d08:	57 fd       	sbrc	r21, 7
    1d0a:	90 58       	subi	r25, 0x80	; 128
    1d0c:	44 0f       	add	r20, r20
    1d0e:	55 1f       	adc	r21, r21
    1d10:	59 f0       	breq	.+22     	; 0x1d28 <__fp_splitA+0x10>
    1d12:	5f 3f       	cpi	r21, 0xFF	; 255
    1d14:	71 f0       	breq	.+28     	; 0x1d32 <__fp_splitA+0x1a>
    1d16:	47 95       	ror	r20

00001d18 <__fp_splitA>:
    1d18:	88 0f       	add	r24, r24
    1d1a:	97 fb       	bst	r25, 7
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	61 f0       	breq	.+24     	; 0x1d38 <__fp_splitA+0x20>
    1d20:	9f 3f       	cpi	r25, 0xFF	; 255
    1d22:	79 f0       	breq	.+30     	; 0x1d42 <__fp_splitA+0x2a>
    1d24:	87 95       	ror	r24
    1d26:	08 95       	ret
    1d28:	12 16       	cp	r1, r18
    1d2a:	13 06       	cpc	r1, r19
    1d2c:	14 06       	cpc	r1, r20
    1d2e:	55 1f       	adc	r21, r21
    1d30:	f2 cf       	rjmp	.-28     	; 0x1d16 <__fp_split3+0xe>
    1d32:	46 95       	lsr	r20
    1d34:	f1 df       	rcall	.-30     	; 0x1d18 <__fp_splitA>
    1d36:	08 c0       	rjmp	.+16     	; 0x1d48 <__fp_splitA+0x30>
    1d38:	16 16       	cp	r1, r22
    1d3a:	17 06       	cpc	r1, r23
    1d3c:	18 06       	cpc	r1, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	f1 cf       	rjmp	.-30     	; 0x1d24 <__fp_splitA+0xc>
    1d42:	86 95       	lsr	r24
    1d44:	71 05       	cpc	r23, r1
    1d46:	61 05       	cpc	r22, r1
    1d48:	08 94       	sec
    1d4a:	08 95       	ret

00001d4c <__fp_zero>:
    1d4c:	e8 94       	clt

00001d4e <__fp_szero>:
    1d4e:	bb 27       	eor	r27, r27
    1d50:	66 27       	eor	r22, r22
    1d52:	77 27       	eor	r23, r23
    1d54:	cb 01       	movw	r24, r22
    1d56:	97 f9       	bld	r25, 7
    1d58:	08 95       	ret

00001d5a <__mulsf3>:
    1d5a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__mulsf3x>
    1d5e:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__fp_round>
    1d62:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__fp_pscA>
    1d66:	38 f0       	brcs	.+14     	; 0x1d76 <__mulsf3+0x1c>
    1d68:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__fp_pscB>
    1d6c:	20 f0       	brcs	.+8      	; 0x1d76 <__mulsf3+0x1c>
    1d6e:	95 23       	and	r25, r21
    1d70:	11 f0       	breq	.+4      	; 0x1d76 <__mulsf3+0x1c>
    1d72:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__fp_inf>
    1d76:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__fp_nan>
    1d7a:	11 24       	eor	r1, r1
    1d7c:	0c 94 a7 0e 	jmp	0x1d4e	; 0x1d4e <__fp_szero>

00001d80 <__mulsf3x>:
    1d80:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__fp_split3>
    1d84:	70 f3       	brcs	.-36     	; 0x1d62 <__mulsf3+0x8>

00001d86 <__mulsf3_pse>:
    1d86:	95 9f       	mul	r25, r21
    1d88:	c1 f3       	breq	.-16     	; 0x1d7a <__mulsf3+0x20>
    1d8a:	95 0f       	add	r25, r21
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	55 1f       	adc	r21, r21
    1d90:	62 9f       	mul	r22, r18
    1d92:	f0 01       	movw	r30, r0
    1d94:	72 9f       	mul	r23, r18
    1d96:	bb 27       	eor	r27, r27
    1d98:	f0 0d       	add	r31, r0
    1d9a:	b1 1d       	adc	r27, r1
    1d9c:	63 9f       	mul	r22, r19
    1d9e:	aa 27       	eor	r26, r26
    1da0:	f0 0d       	add	r31, r0
    1da2:	b1 1d       	adc	r27, r1
    1da4:	aa 1f       	adc	r26, r26
    1da6:	64 9f       	mul	r22, r20
    1da8:	66 27       	eor	r22, r22
    1daa:	b0 0d       	add	r27, r0
    1dac:	a1 1d       	adc	r26, r1
    1dae:	66 1f       	adc	r22, r22
    1db0:	82 9f       	mul	r24, r18
    1db2:	22 27       	eor	r18, r18
    1db4:	b0 0d       	add	r27, r0
    1db6:	a1 1d       	adc	r26, r1
    1db8:	62 1f       	adc	r22, r18
    1dba:	73 9f       	mul	r23, r19
    1dbc:	b0 0d       	add	r27, r0
    1dbe:	a1 1d       	adc	r26, r1
    1dc0:	62 1f       	adc	r22, r18
    1dc2:	83 9f       	mul	r24, r19
    1dc4:	a0 0d       	add	r26, r0
    1dc6:	61 1d       	adc	r22, r1
    1dc8:	22 1f       	adc	r18, r18
    1dca:	74 9f       	mul	r23, r20
    1dcc:	33 27       	eor	r19, r19
    1dce:	a0 0d       	add	r26, r0
    1dd0:	61 1d       	adc	r22, r1
    1dd2:	23 1f       	adc	r18, r19
    1dd4:	84 9f       	mul	r24, r20
    1dd6:	60 0d       	add	r22, r0
    1dd8:	21 1d       	adc	r18, r1
    1dda:	82 2f       	mov	r24, r18
    1ddc:	76 2f       	mov	r23, r22
    1dde:	6a 2f       	mov	r22, r26
    1de0:	11 24       	eor	r1, r1
    1de2:	9f 57       	subi	r25, 0x7F	; 127
    1de4:	50 40       	sbci	r21, 0x00	; 0
    1de6:	9a f0       	brmi	.+38     	; 0x1e0e <__mulsf3_pse+0x88>
    1de8:	f1 f0       	breq	.+60     	; 0x1e26 <__mulsf3_pse+0xa0>
    1dea:	88 23       	and	r24, r24
    1dec:	4a f0       	brmi	.+18     	; 0x1e00 <__mulsf3_pse+0x7a>
    1dee:	ee 0f       	add	r30, r30
    1df0:	ff 1f       	adc	r31, r31
    1df2:	bb 1f       	adc	r27, r27
    1df4:	66 1f       	adc	r22, r22
    1df6:	77 1f       	adc	r23, r23
    1df8:	88 1f       	adc	r24, r24
    1dfa:	91 50       	subi	r25, 0x01	; 1
    1dfc:	50 40       	sbci	r21, 0x00	; 0
    1dfe:	a9 f7       	brne	.-22     	; 0x1dea <__mulsf3_pse+0x64>
    1e00:	9e 3f       	cpi	r25, 0xFE	; 254
    1e02:	51 05       	cpc	r21, r1
    1e04:	80 f0       	brcs	.+32     	; 0x1e26 <__mulsf3_pse+0xa0>
    1e06:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__fp_inf>
    1e0a:	0c 94 a7 0e 	jmp	0x1d4e	; 0x1d4e <__fp_szero>
    1e0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e10:	e4 f3       	brlt	.-8      	; 0x1e0a <__mulsf3_pse+0x84>
    1e12:	98 3e       	cpi	r25, 0xE8	; 232
    1e14:	d4 f3       	brlt	.-12     	; 0x1e0a <__mulsf3_pse+0x84>
    1e16:	86 95       	lsr	r24
    1e18:	77 95       	ror	r23
    1e1a:	67 95       	ror	r22
    1e1c:	b7 95       	ror	r27
    1e1e:	f7 95       	ror	r31
    1e20:	e7 95       	ror	r30
    1e22:	9f 5f       	subi	r25, 0xFF	; 255
    1e24:	c1 f7       	brne	.-16     	; 0x1e16 <__mulsf3_pse+0x90>
    1e26:	fe 2b       	or	r31, r30
    1e28:	88 0f       	add	r24, r24
    1e2a:	91 1d       	adc	r25, r1
    1e2c:	96 95       	lsr	r25
    1e2e:	87 95       	ror	r24
    1e30:	97 f9       	bld	r25, 7
    1e32:	08 95       	ret

00001e34 <__fp_inf>:
    1e34:	97 f9       	bld	r25, 7
    1e36:	9f 67       	ori	r25, 0x7F	; 127
    1e38:	80 e8       	ldi	r24, 0x80	; 128
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	08 95       	ret

00001e40 <__fp_nan>:
    1e40:	9f ef       	ldi	r25, 0xFF	; 255
    1e42:	80 ec       	ldi	r24, 0xC0	; 192
    1e44:	08 95       	ret

00001e46 <__fp_pscA>:
    1e46:	00 24       	eor	r0, r0
    1e48:	0a 94       	dec	r0
    1e4a:	16 16       	cp	r1, r22
    1e4c:	17 06       	cpc	r1, r23
    1e4e:	18 06       	cpc	r1, r24
    1e50:	09 06       	cpc	r0, r25
    1e52:	08 95       	ret

00001e54 <__fp_pscB>:
    1e54:	00 24       	eor	r0, r0
    1e56:	0a 94       	dec	r0
    1e58:	12 16       	cp	r1, r18
    1e5a:	13 06       	cpc	r1, r19
    1e5c:	14 06       	cpc	r1, r20
    1e5e:	05 06       	cpc	r0, r21
    1e60:	08 95       	ret

00001e62 <__fp_round>:
    1e62:	09 2e       	mov	r0, r25
    1e64:	03 94       	inc	r0
    1e66:	00 0c       	add	r0, r0
    1e68:	11 f4       	brne	.+4      	; 0x1e6e <__fp_round+0xc>
    1e6a:	88 23       	and	r24, r24
    1e6c:	52 f0       	brmi	.+20     	; 0x1e82 <__fp_round+0x20>
    1e6e:	bb 0f       	add	r27, r27
    1e70:	40 f4       	brcc	.+16     	; 0x1e82 <__fp_round+0x20>
    1e72:	bf 2b       	or	r27, r31
    1e74:	11 f4       	brne	.+4      	; 0x1e7a <__fp_round+0x18>
    1e76:	60 ff       	sbrs	r22, 0
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <__fp_round+0x20>
    1e7a:	6f 5f       	subi	r22, 0xFF	; 255
    1e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e80:	9f 4f       	sbci	r25, 0xFF	; 255
    1e82:	08 95       	ret

00001e84 <__udivmodsi4>:
    1e84:	a1 e2       	ldi	r26, 0x21	; 33
    1e86:	1a 2e       	mov	r1, r26
    1e88:	aa 1b       	sub	r26, r26
    1e8a:	bb 1b       	sub	r27, r27
    1e8c:	fd 01       	movw	r30, r26
    1e8e:	0d c0       	rjmp	.+26     	; 0x1eaa <__udivmodsi4_ep>

00001e90 <__udivmodsi4_loop>:
    1e90:	aa 1f       	adc	r26, r26
    1e92:	bb 1f       	adc	r27, r27
    1e94:	ee 1f       	adc	r30, r30
    1e96:	ff 1f       	adc	r31, r31
    1e98:	a2 17       	cp	r26, r18
    1e9a:	b3 07       	cpc	r27, r19
    1e9c:	e4 07       	cpc	r30, r20
    1e9e:	f5 07       	cpc	r31, r21
    1ea0:	20 f0       	brcs	.+8      	; 0x1eaa <__udivmodsi4_ep>
    1ea2:	a2 1b       	sub	r26, r18
    1ea4:	b3 0b       	sbc	r27, r19
    1ea6:	e4 0b       	sbc	r30, r20
    1ea8:	f5 0b       	sbc	r31, r21

00001eaa <__udivmodsi4_ep>:
    1eaa:	66 1f       	adc	r22, r22
    1eac:	77 1f       	adc	r23, r23
    1eae:	88 1f       	adc	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	1a 94       	dec	r1
    1eb4:	69 f7       	brne	.-38     	; 0x1e90 <__udivmodsi4_loop>
    1eb6:	60 95       	com	r22
    1eb8:	70 95       	com	r23
    1eba:	80 95       	com	r24
    1ebc:	90 95       	com	r25
    1ebe:	9b 01       	movw	r18, r22
    1ec0:	ac 01       	movw	r20, r24
    1ec2:	bd 01       	movw	r22, r26
    1ec4:	cf 01       	movw	r24, r30
    1ec6:	08 95       	ret

00001ec8 <__umulhisi3>:
    1ec8:	a2 9f       	mul	r26, r18
    1eca:	b0 01       	movw	r22, r0
    1ecc:	b3 9f       	mul	r27, r19
    1ece:	c0 01       	movw	r24, r0
    1ed0:	a3 9f       	mul	r26, r19
    1ed2:	70 0d       	add	r23, r0
    1ed4:	81 1d       	adc	r24, r1
    1ed6:	11 24       	eor	r1, r1
    1ed8:	91 1d       	adc	r25, r1
    1eda:	b2 9f       	mul	r27, r18
    1edc:	70 0d       	add	r23, r0
    1ede:	81 1d       	adc	r24, r1
    1ee0:	11 24       	eor	r1, r1
    1ee2:	91 1d       	adc	r25, r1
    1ee4:	08 95       	ret

00001ee6 <_exit>:
    1ee6:	f8 94       	cli

00001ee8 <__stop_program>:
    1ee8:	ff cf       	rjmp	.-2      	; 0x1ee8 <__stop_program>
