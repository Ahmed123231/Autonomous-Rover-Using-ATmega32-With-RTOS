
Rover_Test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00001d2c  00001dc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000065f  008000a8  008000a8  00001e08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005c8  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000056b7  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000169b  00000000  00000000  00007af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003070  00000000  00000000  0000918e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001058  00000000  00000000  0000c200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001918  00000000  00000000  0000d258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000415c  00000000  00000000  0000eb70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f8  00000000  00000000  00012ccc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_1>
       8:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_2>
       c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_3>
      10:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__vector_4>
      14:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__vector_10>
      2c:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 30       	cpi	r26, 0x07	; 7
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <main>
      8a:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDir>:
      92:	41 30       	cpi	r20, 0x01	; 1
      94:	a1 f5       	brne	.+104    	; 0xfe <DIO_voidSetPinDir+0x6c>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	89 f0       	breq	.+34     	; 0xbc <DIO_voidSetPinDir+0x2a>
      9a:	28 f0       	brcs	.+10     	; 0xa6 <DIO_voidSetPinDir+0x14>
      9c:	82 30       	cpi	r24, 0x02	; 2
      9e:	c9 f0       	breq	.+50     	; 0xd2 <DIO_voidSetPinDir+0x40>
      a0:	83 30       	cpi	r24, 0x03	; 3
      a2:	11 f1       	breq	.+68     	; 0xe8 <DIO_voidSetPinDir+0x56>
      a4:	08 95       	ret
      a6:	2a b3       	in	r18, 0x1a	; 26
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_voidSetPinDir+0x20>
      ae:	88 0f       	add	r24, r24
      b0:	99 1f       	adc	r25, r25
      b2:	6a 95       	dec	r22
      b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_voidSetPinDir+0x1c>
      b6:	82 2b       	or	r24, r18
      b8:	8a bb       	out	0x1a, r24	; 26
      ba:	08 95       	ret
      bc:	27 b3       	in	r18, 0x17	; 23
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_voidSetPinDir+0x36>
      c4:	88 0f       	add	r24, r24
      c6:	99 1f       	adc	r25, r25
      c8:	6a 95       	dec	r22
      ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_voidSetPinDir+0x32>
      cc:	82 2b       	or	r24, r18
      ce:	87 bb       	out	0x17, r24	; 23
      d0:	08 95       	ret
      d2:	24 b3       	in	r18, 0x14	; 20
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_voidSetPinDir+0x4c>
      da:	88 0f       	add	r24, r24
      dc:	99 1f       	adc	r25, r25
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_voidSetPinDir+0x48>
      e2:	82 2b       	or	r24, r18
      e4:	84 bb       	out	0x14, r24	; 20
      e6:	08 95       	ret
      e8:	21 b3       	in	r18, 0x11	; 17
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPinDir+0x62>
      f0:	88 0f       	add	r24, r24
      f2:	99 1f       	adc	r25, r25
      f4:	6a 95       	dec	r22
      f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPinDir+0x5e>
      f8:	82 2b       	or	r24, r18
      fa:	81 bb       	out	0x11, r24	; 17
      fc:	08 95       	ret
      fe:	41 11       	cpse	r20, r1
     100:	37 c0       	rjmp	.+110    	; 0x170 <DIO_voidSetPinDir+0xde>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	91 f0       	breq	.+36     	; 0x12a <DIO_voidSetPinDir+0x98>
     106:	28 f0       	brcs	.+10     	; 0x112 <DIO_voidSetPinDir+0x80>
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	d9 f0       	breq	.+54     	; 0x142 <DIO_voidSetPinDir+0xb0>
     10c:	83 30       	cpi	r24, 0x03	; 3
     10e:	29 f1       	breq	.+74     	; 0x15a <DIO_voidSetPinDir+0xc8>
     110:	08 95       	ret
     112:	2a b3       	in	r18, 0x1a	; 26
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinDir+0x8c>
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	6a 95       	dec	r22
     120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinDir+0x88>
     122:	80 95       	com	r24
     124:	82 23       	and	r24, r18
     126:	8a bb       	out	0x1a, r24	; 26
     128:	08 95       	ret
     12a:	27 b3       	in	r18, 0x17	; 23
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_voidSetPinDir+0xa4>
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_voidSetPinDir+0xa0>
     13a:	80 95       	com	r24
     13c:	82 23       	and	r24, r18
     13e:	87 bb       	out	0x17, r24	; 23
     140:	08 95       	ret
     142:	24 b3       	in	r18, 0x14	; 20
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_voidSetPinDir+0xbc>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	6a 95       	dec	r22
     150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_voidSetPinDir+0xb8>
     152:	80 95       	com	r24
     154:	82 23       	and	r24, r18
     156:	84 bb       	out	0x14, r24	; 20
     158:	08 95       	ret
     15a:	21 b3       	in	r18, 0x11	; 17
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_voidSetPinDir+0xd4>
     162:	88 0f       	add	r24, r24
     164:	99 1f       	adc	r25, r25
     166:	6a 95       	dec	r22
     168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_voidSetPinDir+0xd0>
     16a:	80 95       	com	r24
     16c:	82 23       	and	r24, r18
     16e:	81 bb       	out	0x11, r24	; 17
     170:	08 95       	ret

00000172 <DIO_voidSetPinVal>:
     172:	41 30       	cpi	r20, 0x01	; 1
     174:	a1 f5       	brne	.+104    	; 0x1de <DIO_voidSetPinVal+0x6c>
     176:	81 30       	cpi	r24, 0x01	; 1
     178:	89 f0       	breq	.+34     	; 0x19c <DIO_voidSetPinVal+0x2a>
     17a:	28 f0       	brcs	.+10     	; 0x186 <DIO_voidSetPinVal+0x14>
     17c:	82 30       	cpi	r24, 0x02	; 2
     17e:	c9 f0       	breq	.+50     	; 0x1b2 <DIO_voidSetPinVal+0x40>
     180:	83 30       	cpi	r24, 0x03	; 3
     182:	11 f1       	breq	.+68     	; 0x1c8 <DIO_voidSetPinVal+0x56>
     184:	08 95       	ret
     186:	2b b3       	in	r18, 0x1b	; 27
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_voidSetPinVal+0x20>
     18e:	88 0f       	add	r24, r24
     190:	99 1f       	adc	r25, r25
     192:	6a 95       	dec	r22
     194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_voidSetPinVal+0x1c>
     196:	82 2b       	or	r24, r18
     198:	8b bb       	out	0x1b, r24	; 27
     19a:	08 95       	ret
     19c:	28 b3       	in	r18, 0x18	; 24
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_voidSetPinVal+0x36>
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	6a 95       	dec	r22
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_voidSetPinVal+0x32>
     1ac:	82 2b       	or	r24, r18
     1ae:	88 bb       	out	0x18, r24	; 24
     1b0:	08 95       	ret
     1b2:	25 b3       	in	r18, 0x15	; 21
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_voidSetPinVal+0x4c>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	6a 95       	dec	r22
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_voidSetPinVal+0x48>
     1c2:	82 2b       	or	r24, r18
     1c4:	85 bb       	out	0x15, r24	; 21
     1c6:	08 95       	ret
     1c8:	22 b3       	in	r18, 0x12	; 18
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_voidSetPinVal+0x62>
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	6a 95       	dec	r22
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_voidSetPinVal+0x5e>
     1d8:	82 2b       	or	r24, r18
     1da:	82 bb       	out	0x12, r24	; 18
     1dc:	08 95       	ret
     1de:	41 11       	cpse	r20, r1
     1e0:	37 c0       	rjmp	.+110    	; 0x250 <DIO_voidSetPinVal+0xde>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	91 f0       	breq	.+36     	; 0x20a <DIO_voidSetPinVal+0x98>
     1e6:	28 f0       	brcs	.+10     	; 0x1f2 <DIO_voidSetPinVal+0x80>
     1e8:	82 30       	cpi	r24, 0x02	; 2
     1ea:	d9 f0       	breq	.+54     	; 0x222 <DIO_voidSetPinVal+0xb0>
     1ec:	83 30       	cpi	r24, 0x03	; 3
     1ee:	29 f1       	breq	.+74     	; 0x23a <DIO_voidSetPinVal+0xc8>
     1f0:	08 95       	ret
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_voidSetPinVal+0x8c>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	6a 95       	dec	r22
     200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_voidSetPinVal+0x88>
     202:	80 95       	com	r24
     204:	82 23       	and	r24, r18
     206:	8b bb       	out	0x1b, r24	; 27
     208:	08 95       	ret
     20a:	28 b3       	in	r18, 0x18	; 24
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_voidSetPinVal+0xa4>
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	6a 95       	dec	r22
     218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_voidSetPinVal+0xa0>
     21a:	80 95       	com	r24
     21c:	82 23       	and	r24, r18
     21e:	88 bb       	out	0x18, r24	; 24
     220:	08 95       	ret
     222:	25 b3       	in	r18, 0x15	; 21
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinVal+0xbc>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinVal+0xb8>
     232:	80 95       	com	r24
     234:	82 23       	and	r24, r18
     236:	85 bb       	out	0x15, r24	; 21
     238:	08 95       	ret
     23a:	22 b3       	in	r18, 0x12	; 18
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_voidSetPinVal+0xd4>
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	6a 95       	dec	r22
     248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_voidSetPinVal+0xd0>
     24a:	80 95       	com	r24
     24c:	82 23       	and	r24, r18
     24e:	82 bb       	out	0x12, r24	; 18
     250:	08 95       	ret

00000252 <DIO_u8GetPinVal>:
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	79 f0       	breq	.+30     	; 0x274 <DIO_u8GetPinVal+0x22>
     256:	28 f0       	brcs	.+10     	; 0x262 <DIO_u8GetPinVal+0x10>
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	a9 f0       	breq	.+42     	; 0x286 <DIO_u8GetPinVal+0x34>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	e1 f0       	breq	.+56     	; 0x298 <DIO_u8GetPinVal+0x46>
     260:	24 c0       	rjmp	.+72     	; 0x2aa <DIO_u8GetPinVal+0x58>
     262:	89 b3       	in	r24, 0x19	; 25
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_u8GetPinVal+0x1a>
     268:	95 95       	asr	r25
     26a:	87 95       	ror	r24
     26c:	6a 95       	dec	r22
     26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_u8GetPinVal+0x16>
     270:	81 70       	andi	r24, 0x01	; 1
     272:	08 95       	ret
     274:	86 b3       	in	r24, 0x16	; 22
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_u8GetPinVal+0x2c>
     27a:	95 95       	asr	r25
     27c:	87 95       	ror	r24
     27e:	6a 95       	dec	r22
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_u8GetPinVal+0x28>
     282:	81 70       	andi	r24, 0x01	; 1
     284:	08 95       	ret
     286:	83 b3       	in	r24, 0x13	; 19
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_u8GetPinVal+0x3e>
     28c:	95 95       	asr	r25
     28e:	87 95       	ror	r24
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_u8GetPinVal+0x3a>
     294:	81 70       	andi	r24, 0x01	; 1
     296:	08 95       	ret
     298:	80 b3       	in	r24, 0x10	; 16
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8GetPinVal+0x50>
     29e:	95 95       	asr	r25
     2a0:	87 95       	ror	r24
     2a2:	6a 95       	dec	r22
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_u8GetPinVal+0x4c>
     2a6:	81 70       	andi	r24, 0x01	; 1
     2a8:	08 95       	ret
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	08 95       	ret

000002ae <__vector_1>:
     2ae:	1f 92       	push	r1
     2b0:	0f 92       	push	r0
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	0f 92       	push	r0
     2b6:	11 24       	eor	r1, r1
     2b8:	2f 93       	push	r18
     2ba:	3f 93       	push	r19
     2bc:	4f 93       	push	r20
     2be:	5f 93       	push	r21
     2c0:	6f 93       	push	r22
     2c2:	7f 93       	push	r23
     2c4:	8f 93       	push	r24
     2c6:	9f 93       	push	r25
     2c8:	af 93       	push	r26
     2ca:	bf 93       	push	r27
     2cc:	ef 93       	push	r30
     2ce:	ff 93       	push	r31
     2d0:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <INT_0_PTR>
     2d4:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <INT_0_PTR+0x1>
     2d8:	09 95       	icall
     2da:	ff 91       	pop	r31
     2dc:	ef 91       	pop	r30
     2de:	bf 91       	pop	r27
     2e0:	af 91       	pop	r26
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	7f 91       	pop	r23
     2e8:	6f 91       	pop	r22
     2ea:	5f 91       	pop	r21
     2ec:	4f 91       	pop	r20
     2ee:	3f 91       	pop	r19
     2f0:	2f 91       	pop	r18
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <__vector_2>:
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	2f 93       	push	r18
     308:	3f 93       	push	r19
     30a:	4f 93       	push	r20
     30c:	5f 93       	push	r21
     30e:	6f 93       	push	r22
     310:	7f 93       	push	r23
     312:	8f 93       	push	r24
     314:	9f 93       	push	r25
     316:	af 93       	push	r26
     318:	bf 93       	push	r27
     31a:	ef 93       	push	r30
     31c:	ff 93       	push	r31
     31e:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <INT_1_PTR>
     322:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <INT_1_PTR+0x1>
     326:	09 95       	icall
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	7f 91       	pop	r23
     336:	6f 91       	pop	r22
     338:	5f 91       	pop	r21
     33a:	4f 91       	pop	r20
     33c:	3f 91       	pop	r19
     33e:	2f 91       	pop	r18
     340:	0f 90       	pop	r0
     342:	0f be       	out	0x3f, r0	; 63
     344:	0f 90       	pop	r0
     346:	1f 90       	pop	r1
     348:	18 95       	reti

0000034a <__vector_3>:
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	2f 93       	push	r18
     356:	3f 93       	push	r19
     358:	4f 93       	push	r20
     35a:	5f 93       	push	r21
     35c:	6f 93       	push	r22
     35e:	7f 93       	push	r23
     360:	8f 93       	push	r24
     362:	9f 93       	push	r25
     364:	af 93       	push	r26
     366:	bf 93       	push	r27
     368:	ef 93       	push	r30
     36a:	ff 93       	push	r31
     36c:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <__data_end>
     370:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <__data_end+0x1>
     374:	09 95       	icall
     376:	ff 91       	pop	r31
     378:	ef 91       	pop	r30
     37a:	bf 91       	pop	r27
     37c:	af 91       	pop	r26
     37e:	9f 91       	pop	r25
     380:	8f 91       	pop	r24
     382:	7f 91       	pop	r23
     384:	6f 91       	pop	r22
     386:	5f 91       	pop	r21
     388:	4f 91       	pop	r20
     38a:	3f 91       	pop	r19
     38c:	2f 91       	pop	r18
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
     392:	0f 90       	pop	r0
     394:	1f 90       	pop	r1
     396:	18 95       	reti

00000398 <prvHeapInit>:
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     398:	e3 eb       	ldi	r30, 0xB3	; 179
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	88 eb       	ldi	r24, 0xB8	; 184
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
	xStart.xBlockSize = ( size_t ) 0;
     3a4:	13 82       	std	Z+3, r1	; 0x03
     3a6:	12 82       	std	Z+2, r1	; 0x02

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     3a8:	ef ea       	ldi	r30, 0xAF	; 175
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	8b ed       	ldi	r24, 0xDB	; 219
     3ae:	95 e0       	ldi	r25, 0x05	; 5
     3b0:	93 83       	std	Z+3, r25	; 0x03
     3b2:	82 83       	std	Z+2, r24	; 0x02
	xEnd.pxNextFreeBlock = NULL;
     3b4:	11 82       	std	Z+1, r1	; 0x01
     3b6:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     3b8:	a7 eb       	ldi	r26, 0xB7	; 183
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	14 96       	adiw	r26, 0x04	; 4
     3be:	9c 93       	st	X, r25
     3c0:	8e 93       	st	-X, r24
     3c2:	13 97       	sbiw	r26, 0x03	; 3
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     3c4:	12 96       	adiw	r26, 0x02	; 2
     3c6:	fc 93       	st	X, r31
     3c8:	ee 93       	st	-X, r30
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	08 95       	ret

000003ce <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     3d8:	0e 94 3a 06 	call	0xc74	; 0xc74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     3dc:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <xHeapHasBeenInitialised.2078>
     3e0:	81 11       	cpse	r24, r1
     3e2:	05 c0       	rjmp	.+10     	; 0x3ee <pvPortMalloc+0x20>
		{
			prvHeapInit();
     3e4:	0e 94 cc 01 	call	0x398	; 0x398 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <xHeapHasBeenInitialised.2078>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     3ee:	20 97       	sbiw	r28, 0x00	; 0
     3f0:	09 f0       	breq	.+2      	; 0x3f4 <pvPortMalloc+0x26>
		{
			xWantedSize += heapSTRUCT_SIZE;
     3f2:	24 96       	adiw	r28, 0x04	; 4
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     3f4:	ce 01       	movw	r24, r28
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	8a 3d       	cpi	r24, 0xDA	; 218
     3fa:	95 40       	sbci	r25, 0x05	; 5
     3fc:	08 f0       	brcs	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	56 c0       	rjmp	.+172    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     400:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <xStart>
     404:	f0 91 b4 00 	lds	r31, 0x00B4	; 0x8000b4 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     408:	a3 eb       	ldi	r26, 0xB3	; 179
     40a:	b0 e0       	ldi	r27, 0x00	; 0
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
			{
				pxPreviousBlock = pxBlock;
     40e:	df 01       	movw	r26, r30
				pxBlock = pxBlock->pxNextFreeBlock;
     410:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     412:	82 81       	ldd	r24, Z+2	; 0x02
     414:	93 81       	ldd	r25, Z+3	; 0x03
     416:	8c 17       	cp	r24, r28
     418:	9d 07       	cpc	r25, r29
     41a:	20 f4       	brcc	.+8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     41c:	80 81       	ld	r24, Z
     41e:	91 81       	ldd	r25, Z+1	; 0x01
     420:	00 97       	sbiw	r24, 0x00	; 0
     422:	a9 f7       	brne	.-22     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	ef 3a       	cpi	r30, 0xAF	; 175
     428:	f8 07       	cpc	r31, r24
     42a:	09 f4       	brne	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42c:	42 c0       	rjmp	.+132    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     42e:	0d 91       	ld	r16, X+
     430:	1c 91       	ld	r17, X
     432:	11 97       	sbiw	r26, 0x01	; 1
     434:	0c 5f       	subi	r16, 0xFC	; 252
     436:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     438:	80 81       	ld	r24, Z
     43a:	91 81       	ldd	r25, Z+1	; 0x01
     43c:	8d 93       	st	X+, r24
     43e:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     440:	82 81       	ldd	r24, Z+2	; 0x02
     442:	93 81       	ldd	r25, Z+3	; 0x03
     444:	8c 1b       	sub	r24, r28
     446:	9d 0b       	sbc	r25, r29
     448:	89 30       	cpi	r24, 0x09	; 9
     44a:	91 05       	cpc	r25, r1
     44c:	10 f1       	brcs	.+68     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     44e:	af 01       	movw	r20, r30
     450:	4c 0f       	add	r20, r28
     452:	5d 1f       	adc	r21, r29

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     454:	da 01       	movw	r26, r20
     456:	13 96       	adiw	r26, 0x03	; 3
     458:	9c 93       	st	X, r25
     45a:	8e 93       	st	-X, r24
     45c:	12 97       	sbiw	r26, 0x02	; 2
					pxBlock->xBlockSize = xWantedSize;
     45e:	d3 83       	std	Z+3, r29	; 0x03
     460:	c2 83       	std	Z+2, r28	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     462:	12 96       	adiw	r26, 0x02	; 2
     464:	2d 91       	ld	r18, X+
     466:	3c 91       	ld	r19, X
     468:	13 97       	sbiw	r26, 0x03	; 3
     46a:	63 eb       	ldi	r22, 0xB3	; 179
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	01 c0       	rjmp	.+2      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     470:	bd 01       	movw	r22, r26
     472:	eb 01       	movw	r28, r22
     474:	a8 81       	ld	r26, Y
     476:	b9 81       	ldd	r27, Y+1	; 0x01
     478:	12 96       	adiw	r26, 0x02	; 2
     47a:	8d 91       	ld	r24, X+
     47c:	9c 91       	ld	r25, X
     47e:	13 97       	sbiw	r26, 0x03	; 3
     480:	82 17       	cp	r24, r18
     482:	93 07       	cpc	r25, r19
     484:	a8 f3       	brcs	.-22     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     486:	ea 01       	movw	r28, r20
     488:	b9 83       	std	Y+1, r27	; 0x01
     48a:	a8 83       	st	Y, r26
     48c:	db 01       	movw	r26, r22
     48e:	4d 93       	st	X+, r20
     490:	5c 93       	st	X, r21
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     492:	22 81       	ldd	r18, Z+2	; 0x02
     494:	33 81       	ldd	r19, Z+3	; 0x03
     496:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     49a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     49e:	82 1b       	sub	r24, r18
     4a0:	93 0b       	sbc	r25, r19
     4a2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	10 e0       	ldi	r17, 0x00	; 0
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b2:	00 e0       	ldi	r16, 0x00	; 0
     4b4:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     4b6:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     4ba:	c8 01       	movw	r24, r16
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	08 95       	ret

000004c6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     4ce:	00 97       	sbiw	r24, 0x00	; 0
     4d0:	41 f1       	breq	.+80     	; 0x522 <vPortFree+0x5c>
     4d2:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     4d4:	8c 01       	movw	r16, r24
     4d6:	04 50       	subi	r16, 0x04	; 4
     4d8:	11 09       	sbc	r17, r1

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     4da:	0e 94 3a 06 	call	0xc74	; 0xc74 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     4de:	f8 01       	movw	r30, r16
     4e0:	42 81       	ldd	r20, Z+2	; 0x02
     4e2:	53 81       	ldd	r21, Z+3	; 0x03
     4e4:	a3 eb       	ldi	r26, 0xB3	; 179
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <vPortFree+0x26>
     4ea:	df 01       	movw	r26, r30
     4ec:	ed 91       	ld	r30, X+
     4ee:	fc 91       	ld	r31, X
     4f0:	11 97       	sbiw	r26, 0x01	; 1
     4f2:	22 81       	ldd	r18, Z+2	; 0x02
     4f4:	33 81       	ldd	r19, Z+3	; 0x03
     4f6:	24 17       	cp	r18, r20
     4f8:	35 07       	cpc	r19, r21
     4fa:	b8 f3       	brcs	.-18     	; 0x4ea <vPortFree+0x24>
     4fc:	24 97       	sbiw	r28, 0x04	; 4
     4fe:	f9 83       	std	Y+1, r31	; 0x01
     500:	e8 83       	st	Y, r30
     502:	0d 93       	st	X+, r16
     504:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
     506:	8a 81       	ldd	r24, Y+2	; 0x02
     508:	9b 81       	ldd	r25, Y+3	; 0x03
     50a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     50e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     512:	82 0f       	add	r24, r18
     514:	93 1f       	adc	r25, r19
     516:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     51a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     51e:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>
	}
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     52c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     52e:	03 96       	adiw	r24, 0x03	; 3
     530:	92 83       	std	Z+2, r25	; 0x02
     532:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     534:	2f ef       	ldi	r18, 0xFF	; 255
     536:	3f ef       	ldi	r19, 0xFF	; 255
     538:	34 83       	std	Z+4, r19	; 0x04
     53a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     53c:	96 83       	std	Z+6, r25	; 0x06
     53e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     540:	90 87       	std	Z+8, r25	; 0x08
     542:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     544:	10 82       	st	Z, r1
     546:	08 95       	ret

00000548 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     548:	fc 01       	movw	r30, r24
     54a:	11 86       	std	Z+9, r1	; 0x09
     54c:	10 86       	std	Z+8, r1	; 0x08
     54e:	08 95       	ret

00000550 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	9c 01       	movw	r18, r24
     556:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     558:	dc 01       	movw	r26, r24
     55a:	11 96       	adiw	r26, 0x01	; 1
     55c:	cd 91       	ld	r28, X+
     55e:	dc 91       	ld	r29, X
     560:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     562:	d3 83       	std	Z+3, r29	; 0x03
     564:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     566:	8c 81       	ldd	r24, Y+4	; 0x04
     568:	9d 81       	ldd	r25, Y+5	; 0x05
     56a:	95 83       	std	Z+5, r25	; 0x05
     56c:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     56e:	8c 81       	ldd	r24, Y+4	; 0x04
     570:	9d 81       	ldd	r25, Y+5	; 0x05
     572:	dc 01       	movw	r26, r24
     574:	13 96       	adiw	r26, 0x03	; 3
     576:	7c 93       	st	X, r23
     578:	6e 93       	st	-X, r22
     57a:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     57c:	7d 83       	std	Y+5, r23	; 0x05
     57e:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     580:	31 87       	std	Z+9, r19	; 0x09
     582:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     584:	f9 01       	movw	r30, r18
     586:	80 81       	ld	r24, Z
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	80 83       	st	Z, r24
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     598:	48 81       	ld	r20, Y
     59a:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     59c:	4f 3f       	cpi	r20, 0xFF	; 255
     59e:	2f ef       	ldi	r18, 0xFF	; 255
     5a0:	52 07       	cpc	r21, r18
     5a2:	21 f4       	brne	.+8      	; 0x5ac <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     5a4:	fc 01       	movw	r30, r24
     5a6:	a7 81       	ldd	r26, Z+7	; 0x07
     5a8:	b0 85       	ldd	r27, Z+8	; 0x08
     5aa:	0d c0       	rjmp	.+26     	; 0x5c6 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5ac:	dc 01       	movw	r26, r24
     5ae:	13 96       	adiw	r26, 0x03	; 3
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <vListInsert+0x22>
     5b2:	df 01       	movw	r26, r30
     5b4:	12 96       	adiw	r26, 0x02	; 2
     5b6:	ed 91       	ld	r30, X+
     5b8:	fc 91       	ld	r31, X
     5ba:	13 97       	sbiw	r26, 0x03	; 3
     5bc:	20 81       	ld	r18, Z
     5be:	31 81       	ldd	r19, Z+1	; 0x01
     5c0:	42 17       	cp	r20, r18
     5c2:	53 07       	cpc	r21, r19
     5c4:	b0 f7       	brcc	.-20     	; 0x5b2 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     5c6:	12 96       	adiw	r26, 0x02	; 2
     5c8:	ed 91       	ld	r30, X+
     5ca:	fc 91       	ld	r31, X
     5cc:	13 97       	sbiw	r26, 0x03	; 3
     5ce:	fb 83       	std	Y+3, r31	; 0x03
     5d0:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5d2:	d5 83       	std	Z+5, r29	; 0x05
     5d4:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     5d6:	bd 83       	std	Y+5, r27	; 0x05
     5d8:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     5da:	13 96       	adiw	r26, 0x03	; 3
     5dc:	dc 93       	st	X, r29
     5de:	ce 93       	st	-X, r28
     5e0:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     5e2:	99 87       	std	Y+9, r25	; 0x09
     5e4:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 81       	ld	r18, Z
     5ea:	2f 5f       	subi	r18, 0xFF	; 255
     5ec:	20 83       	st	Z, r18
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     5fa:	a0 85       	ldd	r26, Z+8	; 0x08
     5fc:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5fe:	c2 81       	ldd	r28, Z+2	; 0x02
     600:	d3 81       	ldd	r29, Z+3	; 0x03
     602:	84 81       	ldd	r24, Z+4	; 0x04
     604:	95 81       	ldd	r25, Z+5	; 0x05
     606:	9d 83       	std	Y+5, r25	; 0x05
     608:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     60a:	c4 81       	ldd	r28, Z+4	; 0x04
     60c:	d5 81       	ldd	r29, Z+5	; 0x05
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	9b 83       	std	Y+3, r25	; 0x03
     614:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     616:	11 96       	adiw	r26, 0x01	; 1
     618:	8d 91       	ld	r24, X+
     61a:	9c 91       	ld	r25, X
     61c:	12 97       	sbiw	r26, 0x02	; 2
     61e:	e8 17       	cp	r30, r24
     620:	f9 07       	cpc	r31, r25
     622:	31 f4       	brne	.+12     	; 0x630 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     624:	84 81       	ldd	r24, Z+4	; 0x04
     626:	95 81       	ldd	r25, Z+5	; 0x05
     628:	12 96       	adiw	r26, 0x02	; 2
     62a:	9c 93       	st	X, r25
     62c:	8e 93       	st	-X, r24
     62e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     630:	11 86       	std	Z+9, r1	; 0x09
     632:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     634:	8c 91       	ld	r24, X
     636:	81 50       	subi	r24, 0x01	; 1
     638:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <prvSetupTimerInterrupt>:
	{
		vTaskSwitchContext();
	}
	portRESTORE_CONTEXT();

	asm volatile ( "ret" );
     640:	1b bc       	out	0x2b, r1	; 43
     642:	8d e8       	ldi	r24, 0x8D	; 141
     644:	8a bd       	out	0x2a, r24	; 42
     646:	8b e0       	ldi	r24, 0x0B	; 11
     648:	8e bd       	out	0x2e, r24	; 46
     64a:	89 b7       	in	r24, 0x39	; 57
     64c:	80 61       	ori	r24, 0x10	; 16
     64e:	89 bf       	out	0x39, r24	; 57
     650:	08 95       	ret

00000652 <pxPortInitialiseStack>:
     652:	31 e1       	ldi	r19, 0x11	; 17
     654:	fc 01       	movw	r30, r24
     656:	30 83       	st	Z, r19
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	22 e2       	ldi	r18, 0x22	; 34
     65c:	20 83       	st	Z, r18
     65e:	31 97       	sbiw	r30, 0x01	; 1
     660:	a3 e3       	ldi	r26, 0x33	; 51
     662:	a0 83       	st	Z, r26
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	60 83       	st	Z, r22
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	70 83       	st	Z, r23
     66c:	31 97       	sbiw	r30, 0x01	; 1
     66e:	10 82       	st	Z, r1
     670:	31 97       	sbiw	r30, 0x01	; 1
     672:	60 e8       	ldi	r22, 0x80	; 128
     674:	60 83       	st	Z, r22
     676:	31 97       	sbiw	r30, 0x01	; 1
     678:	10 82       	st	Z, r1
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	62 e0       	ldi	r22, 0x02	; 2
     67e:	60 83       	st	Z, r22
     680:	31 97       	sbiw	r30, 0x01	; 1
     682:	63 e0       	ldi	r22, 0x03	; 3
     684:	60 83       	st	Z, r22
     686:	31 97       	sbiw	r30, 0x01	; 1
     688:	64 e0       	ldi	r22, 0x04	; 4
     68a:	60 83       	st	Z, r22
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	65 e0       	ldi	r22, 0x05	; 5
     690:	60 83       	st	Z, r22
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	66 e0       	ldi	r22, 0x06	; 6
     696:	60 83       	st	Z, r22
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	60 83       	st	Z, r22
     69e:	31 97       	sbiw	r30, 0x01	; 1
     6a0:	68 e0       	ldi	r22, 0x08	; 8
     6a2:	60 83       	st	Z, r22
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	69 e0       	ldi	r22, 0x09	; 9
     6a8:	60 83       	st	Z, r22
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	60 e1       	ldi	r22, 0x10	; 16
     6ae:	60 83       	st	Z, r22
     6b0:	31 97       	sbiw	r30, 0x01	; 1
     6b2:	30 83       	st	Z, r19
     6b4:	31 97       	sbiw	r30, 0x01	; 1
     6b6:	32 e1       	ldi	r19, 0x12	; 18
     6b8:	30 83       	st	Z, r19
     6ba:	31 97       	sbiw	r30, 0x01	; 1
     6bc:	33 e1       	ldi	r19, 0x13	; 19
     6be:	30 83       	st	Z, r19
     6c0:	31 97       	sbiw	r30, 0x01	; 1
     6c2:	34 e1       	ldi	r19, 0x14	; 20
     6c4:	30 83       	st	Z, r19
     6c6:	31 97       	sbiw	r30, 0x01	; 1
     6c8:	35 e1       	ldi	r19, 0x15	; 21
     6ca:	30 83       	st	Z, r19
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	36 e1       	ldi	r19, 0x16	; 22
     6d0:	30 83       	st	Z, r19
     6d2:	31 97       	sbiw	r30, 0x01	; 1
     6d4:	37 e1       	ldi	r19, 0x17	; 23
     6d6:	30 83       	st	Z, r19
     6d8:	31 97       	sbiw	r30, 0x01	; 1
     6da:	38 e1       	ldi	r19, 0x18	; 24
     6dc:	30 83       	st	Z, r19
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	39 e1       	ldi	r19, 0x19	; 25
     6e2:	30 83       	st	Z, r19
     6e4:	31 97       	sbiw	r30, 0x01	; 1
     6e6:	30 e2       	ldi	r19, 0x20	; 32
     6e8:	30 83       	st	Z, r19
     6ea:	31 97       	sbiw	r30, 0x01	; 1
     6ec:	31 e2       	ldi	r19, 0x21	; 33
     6ee:	30 83       	st	Z, r19
     6f0:	31 97       	sbiw	r30, 0x01	; 1
     6f2:	20 83       	st	Z, r18
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	23 e2       	ldi	r18, 0x23	; 35
     6f8:	20 83       	st	Z, r18
     6fa:	31 97       	sbiw	r30, 0x01	; 1
     6fc:	40 83       	st	Z, r20
     6fe:	31 97       	sbiw	r30, 0x01	; 1
     700:	50 83       	st	Z, r21
     702:	31 97       	sbiw	r30, 0x01	; 1
     704:	26 e2       	ldi	r18, 0x26	; 38
     706:	20 83       	st	Z, r18
     708:	31 97       	sbiw	r30, 0x01	; 1
     70a:	27 e2       	ldi	r18, 0x27	; 39
     70c:	20 83       	st	Z, r18
     70e:	31 97       	sbiw	r30, 0x01	; 1
     710:	28 e2       	ldi	r18, 0x28	; 40
     712:	20 83       	st	Z, r18
     714:	31 97       	sbiw	r30, 0x01	; 1
     716:	29 e2       	ldi	r18, 0x29	; 41
     718:	20 83       	st	Z, r18
     71a:	31 97       	sbiw	r30, 0x01	; 1
     71c:	20 e3       	ldi	r18, 0x30	; 48
     71e:	20 83       	st	Z, r18
     720:	31 97       	sbiw	r30, 0x01	; 1
     722:	21 e3       	ldi	r18, 0x31	; 49
     724:	20 83       	st	Z, r18
     726:	86 97       	sbiw	r24, 0x26	; 38
     728:	08 95       	ret

0000072a <xPortStartScheduler>:
     72a:	0e 94 20 03 	call	0x640	; 0x640 <prvSetupTimerInterrupt>
     72e:	a0 91 f7 06 	lds	r26, 0x06F7	; 0x8006f7 <pxCurrentTCB>
     732:	b0 91 f8 06 	lds	r27, 0x06F8	; 0x8006f8 <pxCurrentTCB+0x1>
     736:	cd 91       	ld	r28, X+
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	dd 91       	ld	r29, X+
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	bf 91       	pop	r27
     748:	af 91       	pop	r26
     74a:	9f 91       	pop	r25
     74c:	8f 91       	pop	r24
     74e:	7f 91       	pop	r23
     750:	6f 91       	pop	r22
     752:	5f 91       	pop	r21
     754:	4f 91       	pop	r20
     756:	3f 91       	pop	r19
     758:	2f 91       	pop	r18
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	bf 90       	pop	r11
     768:	af 90       	pop	r10
     76a:	9f 90       	pop	r9
     76c:	8f 90       	pop	r8
     76e:	7f 90       	pop	r7
     770:	6f 90       	pop	r6
     772:	5f 90       	pop	r5
     774:	4f 90       	pop	r4
     776:	3f 90       	pop	r3
     778:	2f 90       	pop	r2
     77a:	1f 90       	pop	r1
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	0f 90       	pop	r0
     782:	08 95       	ret
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	08 95       	ret

00000788 <vPortYield>:
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	0f 92       	push	r0
     790:	1f 92       	push	r1
     792:	11 24       	eor	r1, r1
     794:	2f 92       	push	r2
     796:	3f 92       	push	r3
     798:	4f 92       	push	r4
     79a:	5f 92       	push	r5
     79c:	6f 92       	push	r6
     79e:	7f 92       	push	r7
     7a0:	8f 92       	push	r8
     7a2:	9f 92       	push	r9
     7a4:	af 92       	push	r10
     7a6:	bf 92       	push	r11
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	2f 93       	push	r18
     7b6:	3f 93       	push	r19
     7b8:	4f 93       	push	r20
     7ba:	5f 93       	push	r21
     7bc:	6f 93       	push	r22
     7be:	7f 93       	push	r23
     7c0:	8f 93       	push	r24
     7c2:	9f 93       	push	r25
     7c4:	af 93       	push	r26
     7c6:	bf 93       	push	r27
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	ef 93       	push	r30
     7ce:	ff 93       	push	r31
     7d0:	a0 91 f7 06 	lds	r26, 0x06F7	; 0x8006f7 <pxCurrentTCB>
     7d4:	b0 91 f8 06 	lds	r27, 0x06F8	; 0x8006f8 <pxCurrentTCB+0x1>
     7d8:	0d b6       	in	r0, 0x3d	; 61
     7da:	0d 92       	st	X+, r0
     7dc:	0e b6       	in	r0, 0x3e	; 62
     7de:	0d 92       	st	X+, r0
     7e0:	0e 94 7d 07 	call	0xefa	; 0xefa <vTaskSwitchContext>
     7e4:	a0 91 f7 06 	lds	r26, 0x06F7	; 0x8006f7 <pxCurrentTCB>
     7e8:	b0 91 f8 06 	lds	r27, 0x06F8	; 0x8006f8 <pxCurrentTCB+0x1>
     7ec:	cd 91       	ld	r28, X+
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	dd 91       	ld	r29, X+
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	ff 91       	pop	r31
     7f6:	ef 91       	pop	r30
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	bf 91       	pop	r27
     7fe:	af 91       	pop	r26
     800:	9f 91       	pop	r25
     802:	8f 91       	pop	r24
     804:	7f 91       	pop	r23
     806:	6f 91       	pop	r22
     808:	5f 91       	pop	r21
     80a:	4f 91       	pop	r20
     80c:	3f 91       	pop	r19
     80e:	2f 91       	pop	r18
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	bf 90       	pop	r11
     81e:	af 90       	pop	r10
     820:	9f 90       	pop	r9
     822:	8f 90       	pop	r8
     824:	7f 90       	pop	r7
     826:	6f 90       	pop	r6
     828:	5f 90       	pop	r5
     82a:	4f 90       	pop	r4
     82c:	3f 90       	pop	r3
     82e:	2f 90       	pop	r2
     830:	1f 90       	pop	r1
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0
     838:	08 95       	ret

0000083a <__vector_7>:
	 * tick count.  We don't need to switch context, this can only be done by
	 * manual calls to taskYIELD();
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal ) );
	void TIMER1_COMPA_vect( void )
	{
     83a:	1f 92       	push	r1
     83c:	0f 92       	push	r0
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	0f 92       	push	r0
     842:	11 24       	eor	r1, r1
     844:	2f 93       	push	r18
     846:	3f 93       	push	r19
     848:	4f 93       	push	r20
     84a:	5f 93       	push	r21
     84c:	6f 93       	push	r22
     84e:	7f 93       	push	r23
     850:	8f 93       	push	r24
     852:	9f 93       	push	r25
     854:	af 93       	push	r26
     856:	bf 93       	push	r27
     858:	ef 93       	push	r30
     85a:	ff 93       	push	r31
		xTaskIncrementTick();
     85c:	0e 94 40 06 	call	0xc80	; 0xc80 <xTaskIncrementTick>
	}
     860:	ff 91       	pop	r31
     862:	ef 91       	pop	r30
     864:	bf 91       	pop	r27
     866:	af 91       	pop	r26
     868:	9f 91       	pop	r25
     86a:	8f 91       	pop	r24
     86c:	7f 91       	pop	r23
     86e:	6f 91       	pop	r22
     870:	5f 91       	pop	r21
     872:	4f 91       	pop	r20
     874:	3f 91       	pop	r19
     876:	2f 91       	pop	r18
     878:	0f 90       	pop	r0
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	0f 90       	pop	r0
     87e:	1f 90       	pop	r1
     880:	18 95       	reti

00000882 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     882:	e0 91 bf 06 	lds	r30, 0x06BF	; 0x8006bf <pxDelayedTaskList>
     886:	f0 91 c0 06 	lds	r31, 0x06C0	; 0x8006c0 <pxDelayedTaskList+0x1>
     88a:	80 81       	ld	r24, Z
     88c:	81 11       	cpse	r24, r1
     88e:	07 c0       	rjmp	.+14     	; 0x89e <prvResetNextTaskUnblockTime+0x1c>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	9f ef       	ldi	r25, 0xFF	; 255
     894:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <xNextTaskUnblockTime+0x1>
     898:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <xNextTaskUnblockTime>
     89c:	08 95       	ret
     89e:	e0 91 bf 06 	lds	r30, 0x06BF	; 0x8006bf <pxDelayedTaskList>
     8a2:	f0 91 c0 06 	lds	r31, 0x06C0	; 0x8006c0 <pxDelayedTaskList+0x1>
     8a6:	05 80       	ldd	r0, Z+5	; 0x05
     8a8:	f6 81       	ldd	r31, Z+6	; 0x06
     8aa:	e0 2d       	mov	r30, r0
     8ac:	06 80       	ldd	r0, Z+6	; 0x06
     8ae:	f7 81       	ldd	r31, Z+7	; 0x07
     8b0:	e0 2d       	mov	r30, r0
     8b2:	82 81       	ldd	r24, Z+2	; 0x02
     8b4:	93 81       	ldd	r25, Z+3	; 0x03
     8b6:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <xNextTaskUnblockTime+0x1>
     8ba:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <xNextTaskUnblockTime>
     8be:	08 95       	ret

000008c0 <prvDeleteTCB>:
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	ec 01       	movw	r28, r24
     8c6:	8f 89       	ldd	r24, Y+23	; 0x17
     8c8:	98 8d       	ldd	r25, Y+24	; 0x18
     8ca:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vPortFree>
     8ce:	ce 01       	movw	r24, r28
     8d0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vPortFree>
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <prvInitialiseNewTask>:
     8da:	6f 92       	push	r6
     8dc:	7f 92       	push	r7
     8de:	8f 92       	push	r8
     8e0:	9f 92       	push	r9
     8e2:	af 92       	push	r10
     8e4:	bf 92       	push	r11
     8e6:	cf 92       	push	r12
     8e8:	df 92       	push	r13
     8ea:	ef 92       	push	r14
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	4c 01       	movw	r8, r24
     8fa:	f5 01       	movw	r30, r10
     8fc:	87 89       	ldd	r24, Z+23	; 0x17
     8fe:	90 8d       	ldd	r25, Z+24	; 0x18
     900:	21 50       	subi	r18, 0x01	; 1
     902:	31 09       	sbc	r19, r1
     904:	3c 01       	movw	r6, r24
     906:	62 0e       	add	r6, r18
     908:	73 1e       	adc	r7, r19
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	0f c0       	rjmp	.+30     	; 0x92c <prvInitialiseNewTask+0x52>
     90e:	82 2f       	mov	r24, r18
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	fb 01       	movw	r30, r22
     914:	e8 0f       	add	r30, r24
     916:	f9 1f       	adc	r31, r25
     918:	30 81       	ld	r19, Z
     91a:	d5 01       	movw	r26, r10
     91c:	a8 0f       	add	r26, r24
     91e:	b9 1f       	adc	r27, r25
     920:	59 96       	adiw	r26, 0x19	; 25
     922:	3c 93       	st	X, r19
     924:	80 81       	ld	r24, Z
     926:	88 23       	and	r24, r24
     928:	19 f0       	breq	.+6      	; 0x930 <prvInitialiseNewTask+0x56>
     92a:	2f 5f       	subi	r18, 0xFF	; 255
     92c:	20 31       	cpi	r18, 0x10	; 16
     92e:	78 f3       	brcs	.-34     	; 0x90e <prvInitialiseNewTask+0x34>
     930:	f5 01       	movw	r30, r10
     932:	10 a6       	std	Z+40, r1	; 0x28
     934:	f3 e0       	ldi	r31, 0x03	; 3
     936:	fe 15       	cp	r31, r14
     938:	20 f4       	brcc	.+8      	; 0x942 <prvInitialiseNewTask+0x68>
     93a:	0f 2e       	mov	r0, r31
     93c:	f3 e0       	ldi	r31, 0x03	; 3
     93e:	ef 2e       	mov	r14, r31
     940:	f0 2d       	mov	r31, r0
     942:	f5 01       	movw	r30, r10
     944:	e6 8a       	std	Z+22, r14	; 0x16
     946:	c5 01       	movw	r24, r10
     948:	02 96       	adiw	r24, 0x02	; 2
     94a:	0e 94 a4 02 	call	0x548	; 0x548 <vListInitialiseItem>
     94e:	c5 01       	movw	r24, r10
     950:	0c 96       	adiw	r24, 0x0c	; 12
     952:	0e 94 a4 02 	call	0x548	; 0x548 <vListInitialiseItem>
     956:	f5 01       	movw	r30, r10
     958:	b1 86       	std	Z+9, r11	; 0x09
     95a:	a0 86       	std	Z+8, r10	; 0x08
     95c:	84 e0       	ldi	r24, 0x04	; 4
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	8e 19       	sub	r24, r14
     962:	91 09       	sbc	r25, r1
     964:	95 87       	std	Z+13, r25	; 0x0d
     966:	84 87       	std	Z+12, r24	; 0x0c
     968:	b3 8a       	std	Z+19, r11	; 0x13
     96a:	a2 8a       	std	Z+18, r10	; 0x12
     96c:	11 a6       	std	Z+41, r1	; 0x29
     96e:	12 a6       	std	Z+42, r1	; 0x2a
     970:	13 a6       	std	Z+43, r1	; 0x2b
     972:	14 a6       	std	Z+44, r1	; 0x2c
     974:	15 a6       	std	Z+45, r1	; 0x2d
     976:	a8 01       	movw	r20, r16
     978:	b4 01       	movw	r22, r8
     97a:	c3 01       	movw	r24, r6
     97c:	0e 94 29 03 	call	0x652	; 0x652 <pxPortInitialiseStack>
     980:	f5 01       	movw	r30, r10
     982:	91 83       	std	Z+1, r25	; 0x01
     984:	80 83       	st	Z, r24
     986:	c1 14       	cp	r12, r1
     988:	d1 04       	cpc	r13, r1
     98a:	19 f0       	breq	.+6      	; 0x992 <prvInitialiseNewTask+0xb8>
     98c:	f6 01       	movw	r30, r12
     98e:	b1 82       	std	Z+1, r11	; 0x01
     990:	a0 82       	st	Z, r10
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	cf 90       	pop	r12
     9a0:	bf 90       	pop	r11
     9a2:	af 90       	pop	r10
     9a4:	9f 90       	pop	r9
     9a6:	8f 90       	pop	r8
     9a8:	7f 90       	pop	r7
     9aa:	6f 90       	pop	r6
     9ac:	08 95       	ret

000009ae <prvInitialiseTaskLists>:
     9ae:	cf 93       	push	r28
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
     9b2:	10 c0       	rjmp	.+32     	; 0x9d4 <prvInitialiseTaskLists+0x26>
     9b4:	8c 2f       	mov	r24, r28
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	9c 01       	movw	r18, r24
     9ba:	22 0f       	add	r18, r18
     9bc:	33 1f       	adc	r19, r19
     9be:	22 0f       	add	r18, r18
     9c0:	33 1f       	adc	r19, r19
     9c2:	22 0f       	add	r18, r18
     9c4:	33 1f       	adc	r19, r19
     9c6:	82 0f       	add	r24, r18
     9c8:	93 1f       	adc	r25, r19
     9ca:	8d 52       	subi	r24, 0x2D	; 45
     9cc:	99 4f       	sbci	r25, 0xF9	; 249
     9ce:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     9d2:	cf 5f       	subi	r28, 0xFF	; 255
     9d4:	c4 30       	cpi	r28, 0x04	; 4
     9d6:	70 f3       	brcs	.-36     	; 0x9b4 <prvInitialiseTaskLists+0x6>
     9d8:	8a ec       	ldi	r24, 0xCA	; 202
     9da:	96 e0       	ldi	r25, 0x06	; 6
     9dc:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     9e0:	81 ec       	ldi	r24, 0xC1	; 193
     9e2:	96 e0       	ldi	r25, 0x06	; 6
     9e4:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     9e8:	84 eb       	ldi	r24, 0xB4	; 180
     9ea:	96 e0       	ldi	r25, 0x06	; 6
     9ec:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     9f0:	8b ea       	ldi	r24, 0xAB	; 171
     9f2:	96 e0       	ldi	r25, 0x06	; 6
     9f4:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     9f8:	81 ea       	ldi	r24, 0xA1	; 161
     9fa:	96 e0       	ldi	r25, 0x06	; 6
     9fc:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a00:	8a ec       	ldi	r24, 0xCA	; 202
     a02:	96 e0       	ldi	r25, 0x06	; 6
     a04:	90 93 c0 06 	sts	0x06C0, r25	; 0x8006c0 <pxDelayedTaskList+0x1>
     a08:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <pxDelayedTaskList>
     a0c:	81 ec       	ldi	r24, 0xC1	; 193
     a0e:	96 e0       	ldi	r25, 0x06	; 6
     a10:	90 93 be 06 	sts	0x06BE, r25	; 0x8006be <pxOverflowDelayedTaskList+0x1>
     a14:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <pxOverflowDelayedTaskList>
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <prvAddNewTaskToReadyList>:
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	ec 01       	movw	r28, r24
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	0f 92       	push	r0
     a28:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <uxCurrentNumberOfTasks>
     a2c:	8f 5f       	subi	r24, 0xFF	; 255
     a2e:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <uxCurrentNumberOfTasks>
     a32:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <pxCurrentTCB>
     a36:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <pxCurrentTCB+0x1>
     a3a:	89 2b       	or	r24, r25
     a3c:	59 f4       	brne	.+22     	; 0xa54 <prvAddNewTaskToReadyList+0x38>
     a3e:	d0 93 f8 06 	sts	0x06F8, r29	; 0x8006f8 <pxCurrentTCB+0x1>
     a42:	c0 93 f7 06 	sts	0x06F7, r28	; 0x8006f7 <pxCurrentTCB>
     a46:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <uxCurrentNumberOfTasks>
     a4a:	81 30       	cpi	r24, 0x01	; 1
     a4c:	99 f4       	brne	.+38     	; 0xa74 <prvAddNewTaskToReadyList+0x58>
     a4e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <prvInitialiseTaskLists>
     a52:	10 c0       	rjmp	.+32     	; 0xa74 <prvAddNewTaskToReadyList+0x58>
     a54:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <xSchedulerRunning>
     a58:	81 11       	cpse	r24, r1
     a5a:	0c c0       	rjmp	.+24     	; 0xa74 <prvAddNewTaskToReadyList+0x58>
     a5c:	e0 91 f7 06 	lds	r30, 0x06F7	; 0x8006f7 <pxCurrentTCB>
     a60:	f0 91 f8 06 	lds	r31, 0x06F8	; 0x8006f8 <pxCurrentTCB+0x1>
     a64:	96 89       	ldd	r25, Z+22	; 0x16
     a66:	8e 89       	ldd	r24, Y+22	; 0x16
     a68:	89 17       	cp	r24, r25
     a6a:	20 f0       	brcs	.+8      	; 0xa74 <prvAddNewTaskToReadyList+0x58>
     a6c:	d0 93 f8 06 	sts	0x06F8, r29	; 0x8006f8 <pxCurrentTCB+0x1>
     a70:	c0 93 f7 06 	sts	0x06F7, r28	; 0x8006f7 <pxCurrentTCB>
     a74:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <uxTaskNumber>
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <uxTaskNumber>
     a7e:	2e 89       	ldd	r18, Y+22	; 0x16
     a80:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <uxTopReadyPriority>
     a84:	82 17       	cp	r24, r18
     a86:	10 f4       	brcc	.+4      	; 0xa8c <prvAddNewTaskToReadyList+0x70>
     a88:	20 93 9d 06 	sts	0x069D, r18	; 0x80069d <uxTopReadyPriority>
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	be 01       	movw	r22, r28
     a90:	6e 5f       	subi	r22, 0xFE	; 254
     a92:	7f 4f       	sbci	r23, 0xFF	; 255
     a94:	c9 01       	movw	r24, r18
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	82 0f       	add	r24, r18
     aa4:	93 1f       	adc	r25, r19
     aa6:	8d 52       	subi	r24, 0x2D	; 45
     aa8:	99 4f       	sbci	r25, 0xF9	; 249
     aaa:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     aae:	0f 90       	pop	r0
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <xSchedulerRunning>
     ab6:	88 23       	and	r24, r24
     ab8:	21 f0       	breq	.+8      	; 0xac2 <prvAddNewTaskToReadyList+0xa6>
     aba:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <pxCurrentTCB>
     abe:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <pxCurrentTCB+0x1>
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <prvAddCurrentTaskToDelayedList>:
     ac8:	ff 92       	push	r15
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	ec 01       	movw	r28, r24
     ad4:	f6 2e       	mov	r15, r22
     ad6:	00 91 9e 06 	lds	r16, 0x069E	; 0x80069e <xTickCount>
     ada:	10 91 9f 06 	lds	r17, 0x069F	; 0x80069f <xTickCount+0x1>
     ade:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <pxCurrentTCB>
     ae2:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <pxCurrentTCB+0x1>
     ae6:	02 96       	adiw	r24, 0x02	; 2
     ae8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     aec:	cf 3f       	cpi	r28, 0xFF	; 255
     aee:	8f ef       	ldi	r24, 0xFF	; 255
     af0:	d8 07       	cpc	r29, r24
     af2:	69 f4       	brne	.+26     	; 0xb0e <prvAddCurrentTaskToDelayedList+0x46>
     af4:	ff 20       	and	r15, r15
     af6:	59 f0       	breq	.+22     	; 0xb0e <prvAddCurrentTaskToDelayedList+0x46>
     af8:	60 91 f7 06 	lds	r22, 0x06F7	; 0x8006f7 <pxCurrentTCB>
     afc:	70 91 f8 06 	lds	r23, 0x06F8	; 0x8006f8 <pxCurrentTCB+0x1>
     b00:	6e 5f       	subi	r22, 0xFE	; 254
     b02:	7f 4f       	sbci	r23, 0xFF	; 255
     b04:	81 ea       	ldi	r24, 0xA1	; 161
     b06:	96 e0       	ldi	r25, 0x06	; 6
     b08:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     b0c:	2f c0       	rjmp	.+94     	; 0xb6c <prvAddCurrentTaskToDelayedList+0xa4>
     b0e:	c0 0f       	add	r28, r16
     b10:	d1 1f       	adc	r29, r17
     b12:	e0 91 f7 06 	lds	r30, 0x06F7	; 0x8006f7 <pxCurrentTCB>
     b16:	f0 91 f8 06 	lds	r31, 0x06F8	; 0x8006f8 <pxCurrentTCB+0x1>
     b1a:	d3 83       	std	Z+3, r29	; 0x03
     b1c:	c2 83       	std	Z+2, r28	; 0x02
     b1e:	c0 17       	cp	r28, r16
     b20:	d1 07       	cpc	r29, r17
     b22:	68 f4       	brcc	.+26     	; 0xb3e <prvAddCurrentTaskToDelayedList+0x76>
     b24:	60 91 f7 06 	lds	r22, 0x06F7	; 0x8006f7 <pxCurrentTCB>
     b28:	70 91 f8 06 	lds	r23, 0x06F8	; 0x8006f8 <pxCurrentTCB+0x1>
     b2c:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <pxOverflowDelayedTaskList>
     b30:	90 91 be 06 	lds	r25, 0x06BE	; 0x8006be <pxOverflowDelayedTaskList+0x1>
     b34:	6e 5f       	subi	r22, 0xFE	; 254
     b36:	7f 4f       	sbci	r23, 0xFF	; 255
     b38:	0e 94 c9 02 	call	0x592	; 0x592 <vListInsert>
     b3c:	17 c0       	rjmp	.+46     	; 0xb6c <prvAddCurrentTaskToDelayedList+0xa4>
     b3e:	60 91 f7 06 	lds	r22, 0x06F7	; 0x8006f7 <pxCurrentTCB>
     b42:	70 91 f8 06 	lds	r23, 0x06F8	; 0x8006f8 <pxCurrentTCB+0x1>
     b46:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <pxDelayedTaskList>
     b4a:	90 91 c0 06 	lds	r25, 0x06C0	; 0x8006c0 <pxDelayedTaskList+0x1>
     b4e:	6e 5f       	subi	r22, 0xFE	; 254
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	0e 94 c9 02 	call	0x592	; 0x592 <vListInsert>
     b56:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <xNextTaskUnblockTime>
     b5a:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <xNextTaskUnblockTime+0x1>
     b5e:	c8 17       	cp	r28, r24
     b60:	d9 07       	cpc	r29, r25
     b62:	20 f4       	brcc	.+8      	; 0xb6c <prvAddCurrentTaskToDelayedList+0xa4>
     b64:	d0 93 97 06 	sts	0x0697, r29	; 0x800697 <xNextTaskUnblockTime+0x1>
     b68:	c0 93 96 06 	sts	0x0696, r28	; 0x800696 <xNextTaskUnblockTime>
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	ff 90       	pop	r15
     b76:	08 95       	ret

00000b78 <xTaskCreate>:
     b78:	2f 92       	push	r2
     b7a:	3f 92       	push	r3
     b7c:	4f 92       	push	r4
     b7e:	5f 92       	push	r5
     b80:	6f 92       	push	r6
     b82:	7f 92       	push	r7
     b84:	8f 92       	push	r8
     b86:	9f 92       	push	r9
     b88:	af 92       	push	r10
     b8a:	bf 92       	push	r11
     b8c:	cf 92       	push	r12
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	3c 01       	movw	r6, r24
     b9e:	1b 01       	movw	r2, r22
     ba0:	5a 01       	movw	r10, r20
     ba2:	29 01       	movw	r4, r18
     ba4:	ca 01       	movw	r24, r20
     ba6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <pvPortMalloc>
     baa:	6c 01       	movw	r12, r24
     bac:	89 2b       	or	r24, r25
     bae:	71 f0       	breq	.+28     	; 0xbcc <xTaskCreate+0x54>
     bb0:	8e e2       	ldi	r24, 0x2E	; 46
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <pvPortMalloc>
     bb8:	ec 01       	movw	r28, r24
     bba:	89 2b       	or	r24, r25
     bbc:	19 f0       	breq	.+6      	; 0xbc4 <xTaskCreate+0x4c>
     bbe:	d8 8e       	std	Y+24, r13	; 0x18
     bc0:	cf 8a       	std	Y+23, r12	; 0x17
     bc2:	06 c0       	rjmp	.+12     	; 0xbd0 <xTaskCreate+0x58>
     bc4:	c6 01       	movw	r24, r12
     bc6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vPortFree>
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <xTaskCreate+0x58>
     bcc:	c0 e0       	ldi	r28, 0x00	; 0
     bce:	d0 e0       	ldi	r29, 0x00	; 0
     bd0:	20 97       	sbiw	r28, 0x00	; 0
     bd2:	91 f0       	breq	.+36     	; 0xbf8 <xTaskCreate+0x80>
     bd4:	95 01       	movw	r18, r10
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	81 2c       	mov	r8, r1
     bdc:	91 2c       	mov	r9, r1
     bde:	5e 01       	movw	r10, r28
     be0:	67 01       	movw	r12, r14
     be2:	e0 2e       	mov	r14, r16
     be4:	82 01       	movw	r16, r4
     be6:	b1 01       	movw	r22, r2
     be8:	c3 01       	movw	r24, r6
     bea:	0e 94 6d 04 	call	0x8da	; 0x8da <prvInitialiseNewTask>
     bee:	ce 01       	movw	r24, r28
     bf0:	0e 94 0e 05 	call	0xa1c	; 0xa1c <prvAddNewTaskToReadyList>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <xTaskCreate+0x82>
     bf8:	8f ef       	ldi	r24, 0xFF	; 255
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	bf 90       	pop	r11
     c0c:	af 90       	pop	r10
     c0e:	9f 90       	pop	r9
     c10:	8f 90       	pop	r8
     c12:	7f 90       	pop	r7
     c14:	6f 90       	pop	r6
     c16:	5f 90       	pop	r5
     c18:	4f 90       	pop	r4
     c1a:	3f 90       	pop	r3
     c1c:	2f 90       	pop	r2
     c1e:	08 95       	ret

00000c20 <vTaskStartScheduler>:
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	0f 2e       	mov	r0, r31
     c28:	f4 e9       	ldi	r31, 0x94	; 148
     c2a:	ef 2e       	mov	r14, r31
     c2c:	f6 e0       	ldi	r31, 0x06	; 6
     c2e:	ff 2e       	mov	r15, r31
     c30:	f0 2d       	mov	r31, r0
     c32:	00 e0       	ldi	r16, 0x00	; 0
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	4a ef       	ldi	r20, 0xFA	; 250
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	62 e6       	ldi	r22, 0x62	; 98
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	88 e7       	ldi	r24, 0x78	; 120
     c42:	97 e0       	ldi	r25, 0x07	; 7
     c44:	0e 94 bc 05 	call	0xb78	; 0xb78 <xTaskCreate>
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	81 f4       	brne	.+32     	; 0xc6c <vTaskStartScheduler+0x4c>
     c4c:	f8 94       	cli
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	9f ef       	ldi	r25, 0xFF	; 255
     c52:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <xNextTaskUnblockTime+0x1>
     c56:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <xNextTaskUnblockTime>
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <xSchedulerRunning>
     c60:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <xTickCount+0x1>
     c64:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <xTickCount>
     c68:	0e 94 95 03 	call	0x72a	; 0x72a <xPortStartScheduler>
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	08 95       	ret

00000c74 <vTaskSuspendAll>:
     c74:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxSchedulerSuspended>
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <uxSchedulerSuspended>
     c7e:	08 95       	ret

00000c80 <xTaskIncrementTick>:
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxSchedulerSuspended>
     c90:	81 11       	cpse	r24, r1
     c92:	73 c0       	rjmp	.+230    	; 0xd7a <xTaskIncrementTick+0xfa>
     c94:	e0 90 9e 06 	lds	r14, 0x069E	; 0x80069e <xTickCount>
     c98:	f0 90 9f 06 	lds	r15, 0x069F	; 0x80069f <xTickCount+0x1>
     c9c:	8f ef       	ldi	r24, 0xFF	; 255
     c9e:	e8 1a       	sub	r14, r24
     ca0:	f8 0a       	sbc	r15, r24
     ca2:	f0 92 9f 06 	sts	0x069F, r15	; 0x80069f <xTickCount+0x1>
     ca6:	e0 92 9e 06 	sts	0x069E, r14	; 0x80069e <xTickCount>
     caa:	e1 14       	cp	r14, r1
     cac:	f1 04       	cpc	r15, r1
     cae:	b9 f4       	brne	.+46     	; 0xcde <xTaskIncrementTick+0x5e>
     cb0:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <pxDelayedTaskList>
     cb4:	90 91 c0 06 	lds	r25, 0x06C0	; 0x8006c0 <pxDelayedTaskList+0x1>
     cb8:	20 91 bd 06 	lds	r18, 0x06BD	; 0x8006bd <pxOverflowDelayedTaskList>
     cbc:	30 91 be 06 	lds	r19, 0x06BE	; 0x8006be <pxOverflowDelayedTaskList+0x1>
     cc0:	30 93 c0 06 	sts	0x06C0, r19	; 0x8006c0 <pxDelayedTaskList+0x1>
     cc4:	20 93 bf 06 	sts	0x06BF, r18	; 0x8006bf <pxDelayedTaskList>
     cc8:	90 93 be 06 	sts	0x06BE, r25	; 0x8006be <pxOverflowDelayedTaskList+0x1>
     ccc:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <pxOverflowDelayedTaskList>
     cd0:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <xNumOfOverflows>
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <xNumOfOverflows>
     cda:	0e 94 41 04 	call	0x882	; 0x882 <prvResetNextTaskUnblockTime>
     cde:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <xNextTaskUnblockTime>
     ce2:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <xNextTaskUnblockTime+0x1>
     ce6:	e8 16       	cp	r14, r24
     ce8:	f9 06       	cpc	r15, r25
     cea:	08 f4       	brcc	.+2      	; 0xcee <xTaskIncrementTick+0x6e>
     cec:	4b c0       	rjmp	.+150    	; 0xd84 <xTaskIncrementTick+0x104>
     cee:	e0 91 bf 06 	lds	r30, 0x06BF	; 0x8006bf <pxDelayedTaskList>
     cf2:	f0 91 c0 06 	lds	r31, 0x06C0	; 0x8006c0 <pxDelayedTaskList+0x1>
     cf6:	80 81       	ld	r24, Z
     cf8:	81 11       	cpse	r24, r1
     cfa:	07 c0       	rjmp	.+14     	; 0xd0a <xTaskIncrementTick+0x8a>
     cfc:	8f ef       	ldi	r24, 0xFF	; 255
     cfe:	9f ef       	ldi	r25, 0xFF	; 255
     d00:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <xNextTaskUnblockTime+0x1>
     d04:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <xNextTaskUnblockTime>
     d08:	3d c0       	rjmp	.+122    	; 0xd84 <xTaskIncrementTick+0x104>
     d0a:	e0 91 bf 06 	lds	r30, 0x06BF	; 0x8006bf <pxDelayedTaskList>
     d0e:	f0 91 c0 06 	lds	r31, 0x06C0	; 0x8006c0 <pxDelayedTaskList+0x1>
     d12:	05 80       	ldd	r0, Z+5	; 0x05
     d14:	f6 81       	ldd	r31, Z+6	; 0x06
     d16:	e0 2d       	mov	r30, r0
     d18:	c6 81       	ldd	r28, Z+6	; 0x06
     d1a:	d7 81       	ldd	r29, Z+7	; 0x07
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	9b 81       	ldd	r25, Y+3	; 0x03
     d20:	e8 16       	cp	r14, r24
     d22:	f9 06       	cpc	r15, r25
     d24:	28 f4       	brcc	.+10     	; 0xd30 <xTaskIncrementTick+0xb0>
     d26:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <xNextTaskUnblockTime+0x1>
     d2a:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <xNextTaskUnblockTime>
     d2e:	2a c0       	rjmp	.+84     	; 0xd84 <xTaskIncrementTick+0x104>
     d30:	8e 01       	movw	r16, r28
     d32:	0e 5f       	subi	r16, 0xFE	; 254
     d34:	1f 4f       	sbci	r17, 0xFF	; 255
     d36:	c8 01       	movw	r24, r16
     d38:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     d3c:	8c 89       	ldd	r24, Y+20	; 0x14
     d3e:	9d 89       	ldd	r25, Y+21	; 0x15
     d40:	89 2b       	or	r24, r25
     d42:	21 f0       	breq	.+8      	; 0xd4c <xTaskIncrementTick+0xcc>
     d44:	ce 01       	movw	r24, r28
     d46:	0c 96       	adiw	r24, 0x0c	; 12
     d48:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     d4c:	8e 89       	ldd	r24, Y+22	; 0x16
     d4e:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <uxTopReadyPriority>
     d52:	98 17       	cp	r25, r24
     d54:	10 f4       	brcc	.+4      	; 0xd5a <xTaskIncrementTick+0xda>
     d56:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <uxTopReadyPriority>
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	9c 01       	movw	r18, r24
     d5e:	22 0f       	add	r18, r18
     d60:	33 1f       	adc	r19, r19
     d62:	22 0f       	add	r18, r18
     d64:	33 1f       	adc	r19, r19
     d66:	22 0f       	add	r18, r18
     d68:	33 1f       	adc	r19, r19
     d6a:	82 0f       	add	r24, r18
     d6c:	93 1f       	adc	r25, r19
     d6e:	b8 01       	movw	r22, r16
     d70:	8d 52       	subi	r24, 0x2D	; 45
     d72:	99 4f       	sbci	r25, 0xF9	; 249
     d74:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     d78:	ba cf       	rjmp	.-140    	; 0xcee <xTaskIncrementTick+0x6e>
     d7a:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <uxPendedTicks>
     d7e:	8f 5f       	subi	r24, 0xFF	; 255
     d80:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <uxPendedTicks>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	08 95       	ret

00000d94 <xTaskResumeAll>:
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	0f 92       	push	r0
     da2:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxSchedulerSuspended>
     da6:	81 50       	subi	r24, 0x01	; 1
     da8:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <uxSchedulerSuspended>
     dac:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxSchedulerSuspended>
     db0:	81 11       	cpse	r24, r1
     db2:	52 c0       	rjmp	.+164    	; 0xe58 <xTaskResumeAll+0xc4>
     db4:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <uxCurrentNumberOfTasks>
     db8:	81 11       	cpse	r24, r1
     dba:	33 c0       	rjmp	.+102    	; 0xe22 <xTaskResumeAll+0x8e>
     dbc:	4d c0       	rjmp	.+154    	; 0xe58 <xTaskResumeAll+0xc4>
     dbe:	e0 91 b9 06 	lds	r30, 0x06B9	; 0x8006b9 <xPendingReadyList+0x5>
     dc2:	f0 91 ba 06 	lds	r31, 0x06BA	; 0x8006ba <xPendingReadyList+0x6>
     dc6:	c6 81       	ldd	r28, Z+6	; 0x06
     dc8:	d7 81       	ldd	r29, Z+7	; 0x07
     dca:	ce 01       	movw	r24, r28
     dcc:	0c 96       	adiw	r24, 0x0c	; 12
     dce:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     dd2:	8e 01       	movw	r16, r28
     dd4:	0e 5f       	subi	r16, 0xFE	; 254
     dd6:	1f 4f       	sbci	r17, 0xFF	; 255
     dd8:	c8 01       	movw	r24, r16
     dda:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     dde:	8e 89       	ldd	r24, Y+22	; 0x16
     de0:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <uxTopReadyPriority>
     de4:	98 17       	cp	r25, r24
     de6:	10 f4       	brcc	.+4      	; 0xdec <xTaskResumeAll+0x58>
     de8:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <uxTopReadyPriority>
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	9c 01       	movw	r18, r24
     df0:	22 0f       	add	r18, r18
     df2:	33 1f       	adc	r19, r19
     df4:	22 0f       	add	r18, r18
     df6:	33 1f       	adc	r19, r19
     df8:	22 0f       	add	r18, r18
     dfa:	33 1f       	adc	r19, r19
     dfc:	82 0f       	add	r24, r18
     dfe:	93 1f       	adc	r25, r19
     e00:	b8 01       	movw	r22, r16
     e02:	8d 52       	subi	r24, 0x2D	; 45
     e04:	99 4f       	sbci	r25, 0xF9	; 249
     e06:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     e0a:	9e 89       	ldd	r25, Y+22	; 0x16
     e0c:	e0 91 f7 06 	lds	r30, 0x06F7	; 0x8006f7 <pxCurrentTCB>
     e10:	f0 91 f8 06 	lds	r31, 0x06F8	; 0x8006f8 <pxCurrentTCB+0x1>
     e14:	86 89       	ldd	r24, Z+22	; 0x16
     e16:	98 17       	cp	r25, r24
     e18:	30 f0       	brcs	.+12     	; 0xe26 <xTaskResumeAll+0x92>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <xYieldPending>
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <xTaskResumeAll+0x92>
     e22:	c0 e0       	ldi	r28, 0x00	; 0
     e24:	d0 e0       	ldi	r29, 0x00	; 0
     e26:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <xPendingReadyList>
     e2a:	81 11       	cpse	r24, r1
     e2c:	c8 cf       	rjmp	.-112    	; 0xdbe <xTaskResumeAll+0x2a>
     e2e:	cd 2b       	or	r28, r29
     e30:	11 f0       	breq	.+4      	; 0xe36 <xTaskResumeAll+0xa2>
     e32:	0e 94 41 04 	call	0x882	; 0x882 <prvResetNextTaskUnblockTime>
     e36:	c0 91 9b 06 	lds	r28, 0x069B	; 0x80069b <uxPendedTicks>
     e3a:	cc 23       	and	r28, r28
     e3c:	59 f0       	breq	.+22     	; 0xe54 <xTaskResumeAll+0xc0>
     e3e:	0e 94 40 06 	call	0xc80	; 0xc80 <xTaskIncrementTick>
     e42:	88 23       	and	r24, r24
     e44:	19 f0       	breq	.+6      	; 0xe4c <xTaskResumeAll+0xb8>
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <xYieldPending>
     e4c:	c1 50       	subi	r28, 0x01	; 1
     e4e:	b9 f7       	brne	.-18     	; 0xe3e <xTaskResumeAll+0xaa>
     e50:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <uxPendedTicks>
     e54:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <xYieldPending>
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	08 95       	ret

00000e68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
     e6e:	89 2b       	or	r24, r25
     e70:	49 f0       	breq	.+18     	; 0xe84 <vTaskDelay+0x1c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
     e72:	0e 94 3a 06 	call	0xc74	; 0xc74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	ce 01       	movw	r24, r28
     e7a:	0e 94 64 05 	call	0xac8	; 0xac8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
     e7e:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <vTaskDelay+0x1e>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
     e84:	80 e0       	ldi	r24, 0x00	; 0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     e86:	81 11       	cpse	r24, r1
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <vTaskDelay+0x26>
		{
			portYIELD_WITHIN_API();
     e8a:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
     e98:	24 c0       	rjmp	.+72     	; 0xee2 <prvCheckTasksWaitingTermination+0x4e>
		{
			vTaskSuspendAll();
     e9a:	0e 94 3a 06 	call	0xc74	; 0xc74 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     e9e:	c0 91 ab 06 	lds	r28, 0x06AB	; 0x8006ab <xTasksWaitingTermination>
			}
			( void ) xTaskResumeAll();
     ea2:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
     ea6:	cc 23       	and	r28, r28
     ea8:	e1 f0       	breq	.+56     	; 0xee2 <prvCheckTasksWaitingTermination+0x4e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
     eb0:	e0 91 b0 06 	lds	r30, 0x06B0	; 0x8006b0 <xTasksWaitingTermination+0x5>
     eb4:	f0 91 b1 06 	lds	r31, 0x06B1	; 0x8006b1 <xTasksWaitingTermination+0x6>
     eb8:	c6 81       	ldd	r28, Z+6	; 0x06
     eba:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     ebc:	ce 01       	movw	r24, r28
     ebe:	02 96       	adiw	r24, 0x02	; 2
     ec0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
					--uxCurrentNumberOfTasks;
     ec4:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <uxCurrentNumberOfTasks>
     ec8:	81 50       	subi	r24, 0x01	; 1
     eca:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <uxCurrentNumberOfTasks>
					--uxDeletedTasksWaitingCleanUp;
     ece:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxDeletedTasksWaitingCleanUp>
     ed2:	81 50       	subi	r24, 0x01	; 1
     ed4:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <uxDeletedTasksWaitingCleanUp>
				}
				taskEXIT_CRITICAL();
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
     edc:	ce 01       	movw	r24, r28
     ede:	0e 94 60 04 	call	0x8c0	; 0x8c0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
     ee2:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxDeletedTasksWaitingCleanUp>
     ee6:	81 11       	cpse	r24, r1
     ee8:	d8 cf       	rjmp	.-80     	; 0xe9a <prvCheckTasksWaitingTermination+0x6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	08 95       	ret

00000ef0 <prvIdleTask>:

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
     ef0:	0e 94 4a 07 	call	0xe94	; 0xe94 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
     ef4:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
     ef8:	fb cf       	rjmp	.-10     	; 0xef0 <prvIdleTask>

00000efa <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     efa:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxSchedulerSuspended>
     efe:	88 23       	and	r24, r24
     f00:	21 f0       	breq	.+8      	; 0xf0a <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <xYieldPending>
     f08:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
     f0a:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
     f0e:	20 91 9d 06 	lds	r18, 0x069D	; 0x80069d <uxTopReadyPriority>
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <vTaskSwitchContext+0x1c>
     f14:	21 50       	subi	r18, 0x01	; 1
     f16:	82 2f       	mov	r24, r18
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	fc 01       	movw	r30, r24
     f1c:	ee 0f       	add	r30, r30
     f1e:	ff 1f       	adc	r31, r31
     f20:	ee 0f       	add	r30, r30
     f22:	ff 1f       	adc	r31, r31
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	e8 0f       	add	r30, r24
     f2a:	f9 1f       	adc	r31, r25
     f2c:	ed 52       	subi	r30, 0x2D	; 45
     f2e:	f9 4f       	sbci	r31, 0xF9	; 249
     f30:	30 81       	ld	r19, Z
     f32:	33 23       	and	r19, r19
     f34:	79 f3       	breq	.-34     	; 0xf14 <vTaskSwitchContext+0x1a>
     f36:	ac 01       	movw	r20, r24
     f38:	44 0f       	add	r20, r20
     f3a:	55 1f       	adc	r21, r21
     f3c:	44 0f       	add	r20, r20
     f3e:	55 1f       	adc	r21, r21
     f40:	44 0f       	add	r20, r20
     f42:	55 1f       	adc	r21, r21
     f44:	48 0f       	add	r20, r24
     f46:	59 1f       	adc	r21, r25
     f48:	df 01       	movw	r26, r30
     f4a:	01 80       	ldd	r0, Z+1	; 0x01
     f4c:	f2 81       	ldd	r31, Z+2	; 0x02
     f4e:	e0 2d       	mov	r30, r0
     f50:	02 80       	ldd	r0, Z+2	; 0x02
     f52:	f3 81       	ldd	r31, Z+3	; 0x03
     f54:	e0 2d       	mov	r30, r0
     f56:	12 96       	adiw	r26, 0x02	; 2
     f58:	fc 93       	st	X, r31
     f5a:	ee 93       	st	-X, r30
     f5c:	11 97       	sbiw	r26, 0x01	; 1
     f5e:	4a 52       	subi	r20, 0x2A	; 42
     f60:	59 4f       	sbci	r21, 0xF9	; 249
     f62:	e4 17       	cp	r30, r20
     f64:	f5 07       	cpc	r31, r21
     f66:	29 f4       	brne	.+10     	; 0xf72 <vTaskSwitchContext+0x78>
     f68:	42 81       	ldd	r20, Z+2	; 0x02
     f6a:	53 81       	ldd	r21, Z+3	; 0x03
     f6c:	fd 01       	movw	r30, r26
     f6e:	52 83       	std	Z+2, r21	; 0x02
     f70:	41 83       	std	Z+1, r20	; 0x01
     f72:	fc 01       	movw	r30, r24
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	ee 0f       	add	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	8e 0f       	add	r24, r30
     f82:	9f 1f       	adc	r25, r31
     f84:	fc 01       	movw	r30, r24
     f86:	ed 52       	subi	r30, 0x2D	; 45
     f88:	f9 4f       	sbci	r31, 0xF9	; 249
     f8a:	01 80       	ldd	r0, Z+1	; 0x01
     f8c:	f2 81       	ldd	r31, Z+2	; 0x02
     f8e:	e0 2d       	mov	r30, r0
     f90:	86 81       	ldd	r24, Z+6	; 0x06
     f92:	97 81       	ldd	r25, Z+7	; 0x07
     f94:	90 93 f8 06 	sts	0x06F8, r25	; 0x8006f8 <pxCurrentTCB+0x1>
     f98:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <pxCurrentTCB>
     f9c:	20 93 9d 06 	sts	0x069D, r18	; 0x80069d <uxTopReadyPriority>
     fa0:	08 95       	ret

00000fa2 <LCD_voidSendLowerNibble>:
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	00 d0       	rcall	.+0      	; 0xfac <LCD_voidSendLowerNibble+0xa>
     fac:	00 d0       	rcall	.+0      	; 0xfae <LCD_voidSendLowerNibble+0xc>
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	08 2f       	mov	r16, r24
     fb4:	84 e0       	ldi	r24, 0x04	; 4
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	85 e0       	ldi	r24, 0x05	; 5
     fba:	8a 83       	std	Y+2, r24	; 0x02
     fbc:	86 e0       	ldi	r24, 0x06	; 6
     fbe:	8b 83       	std	Y+3, r24	; 0x03
     fc0:	87 e0       	ldi	r24, 0x07	; 7
     fc2:	8c 83       	std	Y+4, r24	; 0x04
     fc4:	10 e0       	ldi	r17, 0x00	; 0
     fc6:	14 c0       	rjmp	.+40     	; 0xff0 <LCD_voidSendLowerNibble+0x4e>
     fc8:	40 2f       	mov	r20, r16
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	01 2e       	mov	r0, r17
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <LCD_voidSendLowerNibble+0x32>
     fd0:	55 95       	asr	r21
     fd2:	47 95       	ror	r20
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <LCD_voidSendLowerNibble+0x2e>
     fd8:	41 70       	andi	r20, 0x01	; 1
     fda:	e1 e0       	ldi	r30, 0x01	; 1
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	ec 0f       	add	r30, r28
     fe0:	fd 1f       	adc	r31, r29
     fe2:	e1 0f       	add	r30, r17
     fe4:	f1 1d       	adc	r31, r1
     fe6:	60 81       	ld	r22, Z
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
     fee:	1f 5f       	subi	r17, 0xFF	; 255
     ff0:	14 30       	cpi	r17, 0x04	; 4
     ff2:	50 f3       	brcs	.-44     	; 0xfc8 <LCD_voidSendLowerNibble+0x26>
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	08 95       	ret

00001006 <LCD_voidSetEnable>:
    1006:	41 e0       	ldi	r20, 0x01	; 1
    1008:	63 e0       	ldi	r22, 0x03	; 3
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1010:	8f e3       	ldi	r24, 0x3F	; 63
    1012:	9f e1       	ldi	r25, 0x1F	; 31
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <LCD_voidSetEnable+0xe>
    1018:	00 c0       	rjmp	.+0      	; 0x101a <LCD_voidSetEnable+0x14>
    101a:	00 00       	nop
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	63 e0       	ldi	r22, 0x03	; 3
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1026:	08 95       	ret

00001028 <LCD_voidSendCommand>:
    1028:	cf 93       	push	r28
    102a:	c8 2f       	mov	r28, r24
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	62 e0       	ldi	r22, 0x02	; 2
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1040:	8c 2f       	mov	r24, r28
    1042:	82 95       	swap	r24
    1044:	8f 70       	andi	r24, 0x0F	; 15
    1046:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LCD_voidSendLowerNibble>
    104a:	0e 94 03 08 	call	0x1006	; 0x1006 <LCD_voidSetEnable>
    104e:	8c 2f       	mov	r24, r28
    1050:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LCD_voidSendLowerNibble>
    1054:	0e 94 03 08 	call	0x1006	; 0x1006 <LCD_voidSetEnable>
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <LCD_voidSendData>:
    105c:	cf 93       	push	r28
    105e:	c8 2f       	mov	r28, r24
    1060:	41 e0       	ldi	r20, 0x01	; 1
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	62 e0       	ldi	r22, 0x02	; 2
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1074:	8c 2f       	mov	r24, r28
    1076:	82 95       	swap	r24
    1078:	8f 70       	andi	r24, 0x0F	; 15
    107a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LCD_voidSendLowerNibble>
    107e:	0e 94 03 08 	call	0x1006	; 0x1006 <LCD_voidSetEnable>
    1082:	8c 2f       	mov	r24, r28
    1084:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LCD_voidSendLowerNibble>
    1088:	0e 94 03 08 	call	0x1006	; 0x1006 <LCD_voidSetEnable>
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <LCD_voidInit>:
    1090:	2f ef       	ldi	r18, 0xFF	; 255
    1092:	83 ef       	ldi	r24, 0xF3	; 243
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	21 50       	subi	r18, 0x01	; 1
    1098:	80 40       	sbci	r24, 0x00	; 0
    109a:	90 40       	sbci	r25, 0x00	; 0
    109c:	e1 f7       	brne	.-8      	; 0x1096 <LCD_voidInit+0x6>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <LCD_voidInit+0x10>
    10a0:	00 00       	nop
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LCD_voidSendLowerNibble>
    10a8:	0e 94 03 08 	call	0x1006	; 0x1006 <LCD_voidSetEnable>
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LCD_voidSendLowerNibble>
    10b2:	0e 94 03 08 	call	0x1006	; 0x1006 <LCD_voidSetEnable>
    10b6:	88 e0       	ldi	r24, 0x08	; 8
    10b8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LCD_voidSendLowerNibble>
    10bc:	0e 94 03 08 	call	0x1006	; 0x1006 <LCD_voidSetEnable>
    10c0:	8c e0       	ldi	r24, 0x0C	; 12
    10c2:	0e 94 14 08 	call	0x1028	; 0x1028 <LCD_voidSendCommand>
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	0e 94 14 08 	call	0x1028	; 0x1028 <LCD_voidSendCommand>
    10cc:	08 95       	ret

000010ce <LCD_voidSendString>:
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	ec 01       	movw	r28, r24
    10d4:	03 c0       	rjmp	.+6      	; 0x10dc <LCD_voidSendString+0xe>
    10d6:	0e 94 2e 08 	call	0x105c	; 0x105c <LCD_voidSendData>
    10da:	21 96       	adiw	r28, 0x01	; 1
    10dc:	88 81       	ld	r24, Y
    10de:	81 11       	cpse	r24, r1
    10e0:	fa cf       	rjmp	.-12     	; 0x10d6 <LCD_voidSendString+0x8>
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	08 95       	ret

000010e8 <LCD_voidSendNum>:
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	2e 97       	sbiw	r28, 0x0e	; 14
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	ac 01       	movw	r20, r24
    1100:	89 2b       	or	r24, r25
    1102:	d1 f5       	brne	.+116    	; 0x1178 <LCD_voidSendNum+0x90>
    1104:	80 e3       	ldi	r24, 0x30	; 48
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	11 e0       	ldi	r17, 0x01	; 1
    110e:	47 c0       	rjmp	.+142    	; 0x119e <LCD_voidSendNum+0xb6>
    1110:	9a 01       	movw	r18, r20
    1112:	ad ec       	ldi	r26, 0xCD	; 205
    1114:	bc ec       	ldi	r27, 0xCC	; 204
    1116:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__umulhisi3>
    111a:	96 95       	lsr	r25
    111c:	87 95       	ror	r24
    111e:	96 95       	lsr	r25
    1120:	87 95       	ror	r24
    1122:	96 95       	lsr	r25
    1124:	87 95       	ror	r24
    1126:	9c 01       	movw	r18, r24
    1128:	22 0f       	add	r18, r18
    112a:	33 1f       	adc	r19, r19
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	82 0f       	add	r24, r18
    113a:	93 1f       	adc	r25, r19
    113c:	9a 01       	movw	r18, r20
    113e:	28 1b       	sub	r18, r24
    1140:	39 0b       	sbc	r19, r25
    1142:	c9 01       	movw	r24, r18
    1144:	e1 2f       	mov	r30, r17
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	99 27       	eor	r25, r25
    114a:	c0 96       	adiw	r24, 0x30	; 48
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	21 e0       	ldi	r18, 0x01	; 1
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	2c 0f       	add	r18, r28
    1156:	3d 1f       	adc	r19, r29
    1158:	e2 0f       	add	r30, r18
    115a:	f3 1f       	adc	r31, r19
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	80 83       	st	Z, r24
    1160:	9a 01       	movw	r18, r20
    1162:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__umulhisi3>
    1166:	ac 01       	movw	r20, r24
    1168:	56 95       	lsr	r21
    116a:	47 95       	ror	r20
    116c:	56 95       	lsr	r21
    116e:	47 95       	ror	r20
    1170:	56 95       	lsr	r21
    1172:	47 95       	ror	r20
    1174:	1f 5f       	subi	r17, 0xFF	; 255
    1176:	01 c0       	rjmp	.+2      	; 0x117a <LCD_voidSendNum+0x92>
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	41 15       	cp	r20, r1
    117c:	51 05       	cpc	r21, r1
    117e:	41 f6       	brne	.-112    	; 0x1110 <LCD_voidSendNum+0x28>
    1180:	0e c0       	rjmp	.+28     	; 0x119e <LCD_voidSendNum+0xb6>
    1182:	11 50       	subi	r17, 0x01	; 1
    1184:	e1 2f       	mov	r30, r17
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	8c 0f       	add	r24, r28
    1192:	9d 1f       	adc	r25, r29
    1194:	e8 0f       	add	r30, r24
    1196:	f9 1f       	adc	r31, r25
    1198:	80 81       	ld	r24, Z
    119a:	0e 94 2e 08 	call	0x105c	; 0x105c <LCD_voidSendData>
    119e:	11 11       	cpse	r17, r1
    11a0:	f0 cf       	rjmp	.-32     	; 0x1182 <LCD_voidSendNum+0x9a>
    11a2:	2e 96       	adiw	r28, 0x0e	; 14
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	08 95       	ret

000011b6 <LCD_SetGridPos>:
    11b6:	90 e4       	ldi	r25, 0x40	; 64
    11b8:	69 9f       	mul	r22, r25
    11ba:	80 0d       	add	r24, r0
    11bc:	11 24       	eor	r1, r1
    11be:	80 68       	ori	r24, 0x80	; 128
    11c0:	0e 94 14 08 	call	0x1028	; 0x1028 <LCD_voidSendCommand>
    11c4:	08 95       	ret

000011c6 <main>:

int main(void)
{
			
			
			Radar_LCD_Init();
    11c6:	0e 94 13 09 	call	0x1226	; 0x1226 <Radar_LCD_Init>
			Rover_voidMotorsInit();
    11ca:	0e 94 45 09 	call	0x128a	; 0x128a <Rover_voidMotorsInit>
			IrSensor_voidInit();
    11ce:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <IrSensor_voidInit>
			Buzzer_voidInit();
    11d2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Buzzer_voidInit>
			RoverTransmit_Init();
    11d6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <RoverTransmit_Init>
		
			//xTaskCreate(vTask_RoverInit,"Initialize",configMINIMAL_STACK_SIZE,NULL,INIT_TASK_PRIORITY,NULL);
			
			xTaskCreate(vTask_UltraSonicSendData,"UltraS",configMINIMAL_STACK_SIZE,NULL,UltraSonic_TASK_PRIORITY,NULL);
    11da:	e1 2c       	mov	r14, r1
    11dc:	f1 2c       	mov	r15, r1
    11de:	04 e0       	ldi	r16, 0x04	; 4
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	4a ef       	ldi	r20, 0xFA	; 250
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	67 e6       	ldi	r22, 0x67	; 103
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	83 ed       	ldi	r24, 0xD3	; 211
    11ee:	9b e0       	ldi	r25, 0x0B	; 11
    11f0:	0e 94 bc 05 	call	0xb78	; 0xb78 <xTaskCreate>
			xTaskCreate(vTask_RoverMove,"Movem",configMINIMAL_STACK_SIZE,NULL,MOVEMENT_TASK_PRIORITY,NULL);
    11f4:	03 e0       	ldi	r16, 0x03	; 3
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	4a ef       	ldi	r20, 0xFA	; 250
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	6e e6       	ldi	r22, 0x6E	; 110
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	8a e4       	ldi	r24, 0x4A	; 74
    1204:	9b e0       	ldi	r25, 0x0B	; 11
    1206:	0e 94 bc 05 	call	0xb78	; 0xb78 <xTaskCreate>
			xTaskCreate(vTask_DataDisplay,"Displa",configMINIMAL_STACK_SIZE,NULL,DISPLAY_TASK_PRIORITY,NULL);
    120a:	02 e0       	ldi	r16, 0x02	; 2
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	4a ef       	ldi	r20, 0xFA	; 250
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	64 e7       	ldi	r22, 0x74	; 116
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	88 ec       	ldi	r24, 0xC8	; 200
    121a:	9b e0       	ldi	r25, 0x0B	; 11
    121c:	0e 94 bc 05 	call	0xb78	; 0xb78 <xTaskCreate>
			
		    
			vTaskStartScheduler();
    1220:	0e 94 10 06 	call	0xc20	; 0xc20 <vTaskStartScheduler>
    1224:	ff cf       	rjmp	.-2      	; 0x1224 <main+0x5e>

00001226 <Radar_LCD_Init>:
	
	while(1){
		
		IrSensor_GetDir();
		
		vTaskDelay(20);
    1226:	41 e0       	ldi	r20, 0x01	; 1
    1228:	64 e0       	ldi	r22, 0x04	; 4
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	65 e0       	ldi	r22, 0x05	; 5
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    123a:	41 e0       	ldi	r20, 0x01	; 1
    123c:	66 e0       	ldi	r22, 0x06	; 6
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1244:	41 e0       	ldi	r20, 0x01	; 1
    1246:	67 e0       	ldi	r22, 0x07	; 7
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    124e:	41 e0       	ldi	r20, 0x01	; 1
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1258:	41 e0       	ldi	r20, 0x01	; 1
    125a:	62 e0       	ldi	r22, 0x02	; 2
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1262:	41 e0       	ldi	r20, 0x01	; 1
    1264:	63 e0       	ldi	r22, 0x03	; 3
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    126c:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <Servo_Init>
    1270:	41 e0       	ldi	r20, 0x01	; 1
    1272:	64 e0       	ldi	r22, 0x04	; 4
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	65 e0       	ldi	r22, 0x05	; 5
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1284:	0e 94 48 08 	call	0x1090	; 0x1090 <LCD_voidInit>
    1288:	08 95       	ret

0000128a <Rover_voidMotorsInit>:
    128a:	41 e0       	ldi	r20, 0x01	; 1
    128c:	66 e0       	ldi	r22, 0x06	; 6
    128e:	82 e0       	ldi	r24, 0x02	; 2
    1290:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1294:	41 e0       	ldi	r20, 0x01	; 1
    1296:	67 e0       	ldi	r22, 0x07	; 7
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    129e:	41 e0       	ldi	r20, 0x01	; 1
    12a0:	62 e0       	ldi	r22, 0x02	; 2
    12a2:	83 e0       	ldi	r24, 0x03	; 3
    12a4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    12a8:	41 e0       	ldi	r20, 0x01	; 1
    12aa:	63 e0       	ldi	r22, 0x03	; 3
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	67 e0       	ldi	r22, 0x07	; 7
    12b6:	83 e0       	ldi	r24, 0x03	; 3
    12b8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    12bc:	08 95       	ret

000012be <Rover_voidMOVFWD>:
    12be:	cf 93       	push	r28
    12c0:	c8 2f       	mov	r28, r24
    12c2:	41 e0       	ldi	r20, 0x01	; 1
    12c4:	66 e0       	ldi	r22, 0x06	; 6
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	67 e0       	ldi	r22, 0x07	; 7
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    12d6:	41 e0       	ldi	r20, 0x01	; 1
    12d8:	62 e0       	ldi	r22, 0x02	; 2
    12da:	83 e0       	ldi	r24, 0x03	; 3
    12dc:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	63 e0       	ldi	r22, 0x03	; 3
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    12ea:	8c 2f       	mov	r24, r28
    12ec:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <TIMER2_voidFastPWM>
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <Rover_state+0x5>
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <Rover_voidMOVBCWD>:
    12fa:	cf 93       	push	r28
    12fc:	c8 2f       	mov	r28, r24
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	66 e0       	ldi	r22, 0x06	; 6
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1308:	41 e0       	ldi	r20, 0x01	; 1
    130a:	67 e0       	ldi	r22, 0x07	; 7
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	62 e0       	ldi	r22, 0x02	; 2
    1316:	83 e0       	ldi	r24, 0x03	; 3
    1318:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    131c:	41 e0       	ldi	r20, 0x01	; 1
    131e:	63 e0       	ldi	r22, 0x03	; 3
    1320:	83 e0       	ldi	r24, 0x03	; 3
    1322:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1326:	8c 2f       	mov	r24, r28
    1328:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <TIMER2_voidFastPWM>
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <Rover_state+0x5>
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <Rover_voidMOVRW>:
    1336:	cf 93       	push	r28
    1338:	c8 2f       	mov	r28, r24
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	66 e0       	ldi	r22, 0x06	; 6
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1344:	41 e0       	ldi	r20, 0x01	; 1
    1346:	67 e0       	ldi	r22, 0x07	; 7
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	62 e0       	ldi	r22, 0x02	; 2
    1352:	83 e0       	ldi	r24, 0x03	; 3
    1354:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	63 e0       	ldi	r22, 0x03	; 3
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1362:	8c 2f       	mov	r24, r28
    1364:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <TIMER2_voidFastPWM>
    1368:	83 e0       	ldi	r24, 0x03	; 3
    136a:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <Rover_state+0x5>
    136e:	cf 91       	pop	r28
    1370:	08 95       	ret

00001372 <Rover_voidMOVLF>:
    1372:	cf 93       	push	r28
    1374:	c8 2f       	mov	r28, r24
    1376:	41 e0       	ldi	r20, 0x01	; 1
    1378:	66 e0       	ldi	r22, 0x06	; 6
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	67 e0       	ldi	r22, 0x07	; 7
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	62 e0       	ldi	r22, 0x02	; 2
    138e:	83 e0       	ldi	r24, 0x03	; 3
    1390:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1394:	41 e0       	ldi	r20, 0x01	; 1
    1396:	63 e0       	ldi	r22, 0x03	; 3
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    139e:	8c 2f       	mov	r24, r28
    13a0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <TIMER2_voidFastPWM>
    13a4:	84 e0       	ldi	r24, 0x04	; 4
    13a6:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <Rover_state+0x5>
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <Rover_voidStop>:
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	66 e0       	ldi	r22, 0x06	; 6
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	67 e0       	ldi	r22, 0x07	; 7
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	62 e0       	ldi	r22, 0x02	; 2
    13c6:	83 e0       	ldi	r24, 0x03	; 3
    13c8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	63 e0       	ldi	r22, 0x03	; 3
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13d6:	85 e0       	ldi	r24, 0x05	; 5
    13d8:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <Rover_state+0x5>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <TIMER2_voidFastPWM>
    13e2:	08 95       	ret

000013e4 <ROVER_LCD_PrintStatus>:
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	ec 01       	movw	r28, r24
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_SetGridPos>
    13f2:	8b e7       	ldi	r24, 0x7B	; 123
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendString>
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	86 e0       	ldi	r24, 0x06	; 6
    13fe:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_SetGridPos>
    1402:	88 81       	ld	r24, Y
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 74 08 	call	0x10e8	; 0x10e8 <LCD_voidSendNum>
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	89 e0       	ldi	r24, 0x09	; 9
    140e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_SetGridPos>
    1412:	81 e8       	ldi	r24, 0x81	; 129
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendString>
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	8d e0       	ldi	r24, 0x0D	; 13
    141e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_SetGridPos>
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	a9 f0       	breq	.+42     	; 0x1452 <ROVER_LCD_PrintStatus+0x6e>
    1428:	28 f4       	brcc	.+10     	; 0x1434 <ROVER_LCD_PrintStatus+0x50>
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	41 f0       	breq	.+16     	; 0x143e <ROVER_LCD_PrintStatus+0x5a>
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	59 f0       	breq	.+22     	; 0x1448 <ROVER_LCD_PrintStatus+0x64>
    1432:	1e c0       	rjmp	.+60     	; 0x1470 <ROVER_LCD_PrintStatus+0x8c>
    1434:	84 30       	cpi	r24, 0x04	; 4
    1436:	91 f0       	breq	.+36     	; 0x145c <ROVER_LCD_PrintStatus+0x78>
    1438:	85 30       	cpi	r24, 0x05	; 5
    143a:	a9 f0       	breq	.+42     	; 0x1466 <ROVER_LCD_PrintStatus+0x82>
    143c:	19 c0       	rjmp	.+50     	; 0x1470 <ROVER_LCD_PrintStatus+0x8c>
    143e:	86 e8       	ldi	r24, 0x86	; 134
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendString>
    1446:	18 c0       	rjmp	.+48     	; 0x1478 <ROVER_LCD_PrintStatus+0x94>
    1448:	8a e8       	ldi	r24, 0x8A	; 138
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendString>
    1450:	13 c0       	rjmp	.+38     	; 0x1478 <ROVER_LCD_PrintStatus+0x94>
    1452:	8e e8       	ldi	r24, 0x8E	; 142
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendString>
    145a:	0e c0       	rjmp	.+28     	; 0x1478 <ROVER_LCD_PrintStatus+0x94>
    145c:	81 e9       	ldi	r24, 0x91	; 145
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendString>
    1464:	09 c0       	rjmp	.+18     	; 0x1478 <ROVER_LCD_PrintStatus+0x94>
    1466:	84 e9       	ldi	r24, 0x94	; 148
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendString>
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <ROVER_LCD_PrintStatus+0x94>
    1470:	89 e9       	ldi	r24, 0x99	; 153
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendString>
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_SetGridPos>
    1480:	8d e9       	ldi	r24, 0x9D	; 157
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendString>
    1488:	61 e0       	ldi	r22, 0x01	; 1
    148a:	84 e0       	ldi	r24, 0x04	; 4
    148c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_SetGridPos>
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	81 11       	cpse	r24, r1
    1494:	05 c0       	rjmp	.+10     	; 0x14a0 <ROVER_LCD_PrintStatus+0xbc>
    1496:	82 e9       	ldi	r24, 0x92	; 146
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendString>
    149e:	17 c0       	rjmp	.+46     	; 0x14ce <ROVER_LCD_PrintStatus+0xea>
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	81 11       	cpse	r24, r1
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <ROVER_LCD_PrintStatus+0xcc>
    14a6:	81 ea       	ldi	r24, 0xA1	; 161
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendString>
    14ae:	0f c0       	rjmp	.+30     	; 0x14ce <ROVER_LCD_PrintStatus+0xea>
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	81 11       	cpse	r24, r1
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <ROVER_LCD_PrintStatus+0xdc>
    14b6:	83 ea       	ldi	r24, 0xA3	; 163
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendString>
    14be:	07 c0       	rjmp	.+14     	; 0x14ce <ROVER_LCD_PrintStatus+0xea>
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	81 11       	cpse	r24, r1
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <ROVER_LCD_PrintStatus+0xea>
    14c6:	85 ea       	ldi	r24, 0xA5	; 165
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCD_voidSendString>
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <IrSensor_voidInit>:
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	63 e0       	ldi	r22, 0x03	; 3
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	61 e0       	ldi	r22, 0x01	; 1
    14ec:	82 e0       	ldi	r24, 0x02	; 2
    14ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	62 e0       	ldi	r22, 0x02	; 2
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    14fc:	08 95       	ret

000014fe <IrSensor_GetDir>:
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    150a:	c1 e0       	ldi	r28, 0x01	; 1
    150c:	d7 e0       	ldi	r29, 0x07	; 7
    150e:	8c 83       	std	Y+4, r24	; 0x04
    1510:	61 e0       	ldi	r22, 0x01	; 1
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    1518:	8b 83       	std	Y+3, r24	; 0x03
    151a:	62 e0       	ldi	r22, 0x02	; 2
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    1522:	8a 83       	std	Y+2, r24	; 0x02
    1524:	63 e0       	ldi	r22, 0x03	; 3
    1526:	82 e0       	ldi	r24, 0x02	; 2
    1528:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <Buzzer_voidInit>:
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	63 e0       	ldi	r22, 0x03	; 3
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    153e:	08 95       	ret

00001540 <RoverTransmit_Init>:
    1540:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <UART_voidInit>
    1544:	08 95       	ret

00001546 <SendNumber>:
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	00 d0       	rcall	.+0      	; 0x154e <SendNumber+0x8>
    154e:	00 d0       	rcall	.+0      	; 0x1550 <SendNumber+0xa>
    1550:	00 d0       	rcall	.+0      	; 0x1552 <SendNumber+0xc>
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	ac 01       	movw	r20, r24
    1558:	89 2b       	or	r24, r25
    155a:	91 f5       	brne	.+100    	; 0x15c0 <SendNumber+0x7a>
    155c:	80 e3       	ldi	r24, 0x30	; 48
    155e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    1562:	3f c0       	rjmp	.+126    	; 0x15e2 <SendNumber+0x9c>
    1564:	9a 01       	movw	r18, r20
    1566:	ad ec       	ldi	r26, 0xCD	; 205
    1568:	bc ec       	ldi	r27, 0xCC	; 204
    156a:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__umulhisi3>
    156e:	96 95       	lsr	r25
    1570:	87 95       	ror	r24
    1572:	96 95       	lsr	r25
    1574:	87 95       	ror	r24
    1576:	96 95       	lsr	r25
    1578:	87 95       	ror	r24
    157a:	9c 01       	movw	r18, r24
    157c:	22 0f       	add	r18, r18
    157e:	33 1f       	adc	r19, r19
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	82 0f       	add	r24, r18
    158e:	93 1f       	adc	r25, r19
    1590:	9a 01       	movw	r18, r20
    1592:	28 1b       	sub	r18, r24
    1594:	39 0b       	sbc	r19, r25
    1596:	c9 01       	movw	r24, r18
    1598:	e1 e0       	ldi	r30, 0x01	; 1
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	ec 0f       	add	r30, r28
    159e:	fd 1f       	adc	r31, r29
    15a0:	e1 0f       	add	r30, r17
    15a2:	f1 1d       	adc	r31, r1
    15a4:	80 5d       	subi	r24, 0xD0	; 208
    15a6:	80 83       	st	Z, r24
    15a8:	9a 01       	movw	r18, r20
    15aa:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__umulhisi3>
    15ae:	ac 01       	movw	r20, r24
    15b0:	56 95       	lsr	r21
    15b2:	47 95       	ror	r20
    15b4:	56 95       	lsr	r21
    15b6:	47 95       	ror	r20
    15b8:	56 95       	lsr	r21
    15ba:	47 95       	ror	r20
    15bc:	1f 5f       	subi	r17, 0xFF	; 255
    15be:	01 c0       	rjmp	.+2      	; 0x15c2 <SendNumber+0x7c>
    15c0:	10 e0       	ldi	r17, 0x00	; 0
    15c2:	41 15       	cp	r20, r1
    15c4:	51 05       	cpc	r21, r1
    15c6:	71 f6       	brne	.-100    	; 0x1564 <SendNumber+0x1e>
    15c8:	0a c0       	rjmp	.+20     	; 0x15de <SendNumber+0x98>
    15ca:	11 50       	subi	r17, 0x01	; 1
    15cc:	e1 e0       	ldi	r30, 0x01	; 1
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	ec 0f       	add	r30, r28
    15d2:	fd 1f       	adc	r31, r29
    15d4:	e1 0f       	add	r30, r17
    15d6:	f1 1d       	adc	r31, r1
    15d8:	80 81       	ld	r24, Z
    15da:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    15de:	11 11       	cpse	r17, r1
    15e0:	f4 cf       	rjmp	.-24     	; 0x15ca <SendNumber+0x84>
    15e2:	26 96       	adiw	r28, 0x06	; 6
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	08 95       	ret

000015f6 <RoverTransmitStatus>:
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	84 e4       	ldi	r24, 0x44	; 68
    15fc:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    1600:	8a e3       	ldi	r24, 0x3A	; 58
    1602:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    1606:	c1 e0       	ldi	r28, 0x01	; 1
    1608:	d7 e0       	ldi	r29, 0x07	; 7
    160a:	88 81       	ld	r24, Y
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <SendNumber>
    1612:	86 e4       	ldi	r24, 0x46	; 70
    1614:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    1618:	8a e3       	ldi	r24, 0x3A	; 58
    161a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 a3 0a 	call	0x1546	; 0x1546 <SendNumber>
    1626:	82 e4       	ldi	r24, 0x42	; 66
    1628:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    162c:	8a e3       	ldi	r24, 0x3A	; 58
    162e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 a3 0a 	call	0x1546	; 0x1546 <SendNumber>
    163a:	82 e5       	ldi	r24, 0x52	; 82
    163c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    1640:	8a e3       	ldi	r24, 0x3A	; 58
    1642:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 a3 0a 	call	0x1546	; 0x1546 <SendNumber>
    164e:	8c e4       	ldi	r24, 0x4C	; 76
    1650:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    1654:	8a e3       	ldi	r24, 0x3A	; 58
    1656:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <SendNumber>
    1662:	84 e4       	ldi	r24, 0x44	; 68
    1664:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    1668:	89 e6       	ldi	r24, 0x69	; 105
    166a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    166e:	82 e7       	ldi	r24, 0x72	; 114
    1670:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    1674:	8a e3       	ldi	r24, 0x3A	; 58
    1676:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <SendNumber>
    1682:	8d e0       	ldi	r24, 0x0D	; 13
    1684:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    1688:	8a e0       	ldi	r24, 0x0A	; 10
    168a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <UART_voidTX>
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <vTask_RoverMove>:
    1694:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <Rover_state+0x1>
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	09 f5       	brne	.+66     	; 0x16de <vTask_RoverMove+0x4a>
    169c:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <Rover_state>
    16a0:	8b 30       	cpi	r24, 0x0B	; 11
    16a2:	e8 f0       	brcs	.+58     	; 0x16de <vTask_RoverMove+0x4a>
    16a4:	87 e3       	ldi	r24, 0x37	; 55
    16a6:	0e 94 5f 09 	call	0x12be	; 0x12be <Rover_voidMOVFWD>
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <vTask_RoverMove+0x36>
    16ac:	8b e2       	ldi	r24, 0x2B	; 43
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 34 07 	call	0xe68	; 0xe68 <vTaskDelay>
    16b4:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <Rover_state+0x1>
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	21 f4       	brne	.+8      	; 0x16c4 <vTask_RoverMove+0x30>
    16bc:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <Rover_state>
    16c0:	8b 30       	cpi	r24, 0x0B	; 11
    16c2:	18 f4       	brcc	.+6      	; 0x16ca <vTask_RoverMove+0x36>
    16c4:	0e 94 d7 09 	call	0x13ae	; 0x13ae <Rover_voidStop>
    16c8:	5a c0       	rjmp	.+180    	; 0x177e <vTask_RoverMove+0xea>
    16ca:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <Rover_state+0x1>
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <vTask_RoverMove+0x40>
    16d2:	55 c0       	rjmp	.+170    	; 0x177e <vTask_RoverMove+0xea>
    16d4:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <Rover_state>
    16d8:	8b 30       	cpi	r24, 0x0B	; 11
    16da:	40 f7       	brcc	.-48     	; 0x16ac <vTask_RoverMove+0x18>
    16dc:	50 c0       	rjmp	.+160    	; 0x177e <vTask_RoverMove+0xea>
    16de:	0e 94 d7 09 	call	0x13ae	; 0x13ae <Rover_voidStop>
    16e2:	87 e1       	ldi	r24, 0x17	; 23
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 34 07 	call	0xe68	; 0xe68 <vTaskDelay>
    16ea:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <Rover_state+0x4>
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	41 f4       	brne	.+16     	; 0x1702 <vTask_RoverMove+0x6e>
    16f2:	87 e3       	ldi	r24, 0x37	; 55
    16f4:	0e 94 7d 09 	call	0x12fa	; 0x12fa <Rover_voidMOVBCWD>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 34 07 	call	0xe68	; 0xe68 <vTaskDelay>
    1700:	c9 cf       	rjmp	.-110    	; 0x1694 <vTask_RoverMove>
    1702:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <Rover_state+0x2>
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	61 f0       	breq	.+24     	; 0x1722 <vTask_RoverMove+0x8e>
    170a:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <Rover_state+0x3>
    170e:	91 30       	cpi	r25, 0x01	; 1
    1710:	41 f4       	brne	.+16     	; 0x1722 <vTask_RoverMove+0x8e>
    1712:	85 e5       	ldi	r24, 0x55	; 85
    1714:	0e 94 b9 09 	call	0x1372	; 0x1372 <Rover_voidMOVLF>
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 34 07 	call	0xe68	; 0xe68 <vTaskDelay>
    1720:	28 c0       	rjmp	.+80     	; 0x1772 <vTask_RoverMove+0xde>
    1722:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <Rover_state+0x3>
    1726:	91 30       	cpi	r25, 0x01	; 1
    1728:	51 f0       	breq	.+20     	; 0x173e <vTask_RoverMove+0xaa>
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	41 f4       	brne	.+16     	; 0x173e <vTask_RoverMove+0xaa>
    172e:	85 e5       	ldi	r24, 0x55	; 85
    1730:	0e 94 9b 09 	call	0x1336	; 0x1336 <Rover_voidMOVRW>
    1734:	83 e0       	ldi	r24, 0x03	; 3
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 34 07 	call	0xe68	; 0xe68 <vTaskDelay>
    173c:	1a c0       	rjmp	.+52     	; 0x1772 <vTask_RoverMove+0xde>
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	51 f0       	breq	.+20     	; 0x1756 <vTask_RoverMove+0xc2>
    1742:	91 30       	cpi	r25, 0x01	; 1
    1744:	41 f0       	breq	.+16     	; 0x1756 <vTask_RoverMove+0xc2>
    1746:	85 e5       	ldi	r24, 0x55	; 85
    1748:	0e 94 b9 09 	call	0x1372	; 0x1372 <Rover_voidMOVLF>
    174c:	83 e0       	ldi	r24, 0x03	; 3
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 34 07 	call	0xe68	; 0xe68 <vTaskDelay>
    1754:	0e c0       	rjmp	.+28     	; 0x1772 <vTask_RoverMove+0xde>
    1756:	87 e3       	ldi	r24, 0x37	; 55
    1758:	0e 94 7d 09 	call	0x12fa	; 0x12fa <Rover_voidMOVBCWD>
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 34 07 	call	0xe68	; 0xe68 <vTaskDelay>
    1764:	85 e5       	ldi	r24, 0x55	; 85
    1766:	0e 94 b9 09 	call	0x1372	; 0x1372 <Rover_voidMOVLF>
    176a:	83 e0       	ldi	r24, 0x03	; 3
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 34 07 	call	0xe68	; 0xe68 <vTaskDelay>
    1772:	0e 94 d7 09 	call	0x13ae	; 0x13ae <Rover_voidStop>
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0e 94 34 07 	call	0xe68	; 0xe68 <vTaskDelay>
    177e:	8b e2       	ldi	r24, 0x2B	; 43
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	0e 94 34 07 	call	0xe68	; 0xe68 <vTaskDelay>
    1786:	8b e2       	ldi	r24, 0x2B	; 43
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 34 07 	call	0xe68	; 0xe68 <vTaskDelay>
    178e:	82 cf       	rjmp	.-252    	; 0x1694 <vTask_RoverMove>

00001790 <vTask_DataDisplay>:
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	97 e0       	ldi	r25, 0x07	; 7
    1794:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <ROVER_LCD_PrintStatus>
    1798:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <RoverTransmitStatus>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	0e 94 34 07 	call	0xe68	; 0xe68 <vTaskDelay>
    17a4:	f5 cf       	rjmp	.-22     	; 0x1790 <vTask_DataDisplay>

000017a6 <vTask_UltraSonicSendData>:

void vTask_UltraSonicSendData(void){
	
	while(1){
		
	UltraSonic_Sendpulse();
    17a6:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <UltraSonic_Sendpulse>
	Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
    17aa:	86 e0       	ldi	r24, 0x06	; 6
    17ac:	9d e0       	ldi	r25, 0x0D	; 13
    17ae:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <UltraSonic_Calc_Distance>
    17b2:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <Rover_state>
	IrSensor_GetDir();
    17b6:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <IrSensor_GetDir>
	vTaskDelay(20);
    17ba:	84 e1       	ldi	r24, 0x14	; 20
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 34 07 	call	0xe68	; 0xe68 <vTaskDelay>
    17c2:	f1 cf       	rjmp	.-30     	; 0x17a6 <vTask_UltraSonicSendData>

000017c4 <Servo_Init>:
void Servo_Init(void){
	
	
	// Initialize Timer1 for Fast PWM mode
	
	DIO_voidSetPinDir(PWM_PORT,PWM_PIN,OUTPUT);
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	65 e0       	ldi	r22, 0x05	; 5
    17c8:	83 e0       	ldi	r24, 0x03	; 3
    17ca:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
	// Set initial angle to 0 degrees
	 TIMER1_voidFastPWMICR1();
    17ce:	0e 94 38 0c 	call	0x1870	; 0x1870 <TIMER1_voidFastPWMICR1>
    17d2:	08 95       	ret

000017d4 <__vector_11>:
    17d4:	1f 92       	push	r1
    17d6:	0f 92       	push	r0
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	0f 92       	push	r0
    17dc:	11 24       	eor	r1, r1
    17de:	2f 93       	push	r18
    17e0:	3f 93       	push	r19
    17e2:	4f 93       	push	r20
    17e4:	5f 93       	push	r21
    17e6:	6f 93       	push	r22
    17e8:	7f 93       	push	r23
    17ea:	8f 93       	push	r24
    17ec:	9f 93       	push	r25
    17ee:	af 93       	push	r26
    17f0:	bf 93       	push	r27
    17f2:	ef 93       	push	r30
    17f4:	ff 93       	push	r31
    17f6:	e0 91 fb 06 	lds	r30, 0x06FB	; 0x8006fb <OVF_ptr>
    17fa:	f0 91 fc 06 	lds	r31, 0x06FC	; 0x8006fc <OVF_ptr+0x1>
    17fe:	09 95       	icall
    1800:	ff 91       	pop	r31
    1802:	ef 91       	pop	r30
    1804:	bf 91       	pop	r27
    1806:	af 91       	pop	r26
    1808:	9f 91       	pop	r25
    180a:	8f 91       	pop	r24
    180c:	7f 91       	pop	r23
    180e:	6f 91       	pop	r22
    1810:	5f 91       	pop	r21
    1812:	4f 91       	pop	r20
    1814:	3f 91       	pop	r19
    1816:	2f 91       	pop	r18
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	0f 90       	pop	r0
    181e:	1f 90       	pop	r1
    1820:	18 95       	reti

00001822 <__vector_10>:
    1822:	1f 92       	push	r1
    1824:	0f 92       	push	r0
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	0f 92       	push	r0
    182a:	11 24       	eor	r1, r1
    182c:	2f 93       	push	r18
    182e:	3f 93       	push	r19
    1830:	4f 93       	push	r20
    1832:	5f 93       	push	r21
    1834:	6f 93       	push	r22
    1836:	7f 93       	push	r23
    1838:	8f 93       	push	r24
    183a:	9f 93       	push	r25
    183c:	af 93       	push	r26
    183e:	bf 93       	push	r27
    1840:	ef 93       	push	r30
    1842:	ff 93       	push	r31
    1844:	e0 91 f9 06 	lds	r30, 0x06F9	; 0x8006f9 <CTC_ptr>
    1848:	f0 91 fa 06 	lds	r31, 0x06FA	; 0x8006fa <CTC_ptr+0x1>
    184c:	09 95       	icall
    184e:	ff 91       	pop	r31
    1850:	ef 91       	pop	r30
    1852:	bf 91       	pop	r27
    1854:	af 91       	pop	r26
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	7f 91       	pop	r23
    185c:	6f 91       	pop	r22
    185e:	5f 91       	pop	r21
    1860:	4f 91       	pop	r20
    1862:	3f 91       	pop	r19
    1864:	2f 91       	pop	r18
    1866:	0f 90       	pop	r0
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	0f 90       	pop	r0
    186c:	1f 90       	pop	r1
    186e:	18 95       	reti

00001870 <TIMER1_voidFastPWMICR1>:
    1870:	8f b5       	in	r24, 0x2f	; 47
    1872:	90 b7       	in	r25, 0x30	; 48
    1874:	8e 7f       	andi	r24, 0xFE	; 254
    1876:	90 bf       	out	0x30, r25	; 48
    1878:	8f bd       	out	0x2f, r24	; 47
    187a:	8f b5       	in	r24, 0x2f	; 47
    187c:	90 b7       	in	r25, 0x30	; 48
    187e:	82 60       	ori	r24, 0x02	; 2
    1880:	90 bf       	out	0x30, r25	; 48
    1882:	8f bd       	out	0x2f, r24	; 47
    1884:	8e b5       	in	r24, 0x2e	; 46
    1886:	9f b5       	in	r25, 0x2f	; 47
    1888:	88 60       	ori	r24, 0x08	; 8
    188a:	9f bd       	out	0x2f, r25	; 47
    188c:	8e bd       	out	0x2e, r24	; 46
    188e:	8e b5       	in	r24, 0x2e	; 46
    1890:	9f b5       	in	r25, 0x2f	; 47
    1892:	80 61       	ori	r24, 0x10	; 16
    1894:	9f bd       	out	0x2f, r25	; 47
    1896:	8e bd       	out	0x2e, r24	; 46
    1898:	8f b5       	in	r24, 0x2f	; 47
    189a:	90 b7       	in	r25, 0x30	; 48
    189c:	80 68       	ori	r24, 0x80	; 128
    189e:	90 bf       	out	0x30, r25	; 48
    18a0:	8f bd       	out	0x2f, r24	; 47
    18a2:	8f b5       	in	r24, 0x2f	; 47
    18a4:	90 b7       	in	r25, 0x30	; 48
    18a6:	8f 7b       	andi	r24, 0xBF	; 191
    18a8:	90 bf       	out	0x30, r25	; 48
    18aa:	8f bd       	out	0x2f, r24	; 47
    18ac:	8f b5       	in	r24, 0x2f	; 47
    18ae:	90 b7       	in	r25, 0x30	; 48
    18b0:	80 62       	ori	r24, 0x20	; 32
    18b2:	90 bf       	out	0x30, r25	; 48
    18b4:	8f bd       	out	0x2f, r24	; 47
    18b6:	8f b5       	in	r24, 0x2f	; 47
    18b8:	90 b7       	in	r25, 0x30	; 48
    18ba:	8f 7e       	andi	r24, 0xEF	; 239
    18bc:	90 bf       	out	0x30, r25	; 48
    18be:	8f bd       	out	0x2f, r24	; 47
    18c0:	8e b5       	in	r24, 0x2e	; 46
    18c2:	9f b5       	in	r25, 0x2f	; 47
    18c4:	8e 7f       	andi	r24, 0xFE	; 254
    18c6:	9f bd       	out	0x2f, r25	; 47
    18c8:	8e bd       	out	0x2e, r24	; 46
    18ca:	8e b5       	in	r24, 0x2e	; 46
    18cc:	9f b5       	in	r25, 0x2f	; 47
    18ce:	82 60       	ori	r24, 0x02	; 2
    18d0:	9f bd       	out	0x2f, r25	; 47
    18d2:	8e bd       	out	0x2e, r24	; 46
    18d4:	8e b5       	in	r24, 0x2e	; 46
    18d6:	9f b5       	in	r25, 0x2f	; 47
    18d8:	8b 7f       	andi	r24, 0xFB	; 251
    18da:	9f bd       	out	0x2f, r25	; 47
    18dc:	8e bd       	out	0x2e, r24	; 46
    18de:	80 e4       	ldi	r24, 0x40	; 64
    18e0:	9c e9       	ldi	r25, 0x9C	; 156
    18e2:	97 bd       	out	0x27, r25	; 39
    18e4:	86 bd       	out	0x26, r24	; 38
    18e6:	8f ef       	ldi	r24, 0xFF	; 255
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	99 bd       	out	0x29, r25	; 41
    18ec:	88 bd       	out	0x28, r24	; 40
    18ee:	08 95       	ret

000018f0 <TIMER2_voidFastPWM>:
    18f0:	95 b5       	in	r25, 0x25	; 37
    18f2:	98 7f       	andi	r25, 0xF8	; 248
    18f4:	95 bd       	out	0x25, r25	; 37
    18f6:	95 b5       	in	r25, 0x25	; 37
    18f8:	93 60       	ori	r25, 0x03	; 3
    18fa:	95 bd       	out	0x25, r25	; 37
    18fc:	95 b5       	in	r25, 0x25	; 37
    18fe:	98 60       	ori	r25, 0x08	; 8
    1900:	95 bd       	out	0x25, r25	; 37
    1902:	95 b5       	in	r25, 0x25	; 37
    1904:	90 64       	ori	r25, 0x40	; 64
    1906:	95 bd       	out	0x25, r25	; 37
    1908:	95 b5       	in	r25, 0x25	; 37
    190a:	90 62       	ori	r25, 0x20	; 32
    190c:	95 bd       	out	0x25, r25	; 37
    190e:	95 b5       	in	r25, 0x25	; 37
    1910:	9f 7e       	andi	r25, 0xEF	; 239
    1912:	95 bd       	out	0x25, r25	; 37
    1914:	68 2f       	mov	r22, r24
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__floatsisf>
    1920:	23 e3       	ldi	r18, 0x33	; 51
    1922:	33 e3       	ldi	r19, 0x33	; 51
    1924:	43 e2       	ldi	r20, 0x23	; 35
    1926:	50 e4       	ldi	r21, 0x40	; 64
    1928:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__mulsf3>
    192c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fixunssfsi>
    1930:	63 bd       	out	0x23, r22	; 35
    1932:	08 95       	ret

00001934 <__vector_5>:
    1934:	1f 92       	push	r1
    1936:	0f 92       	push	r0
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	0f 92       	push	r0
    193c:	11 24       	eor	r1, r1
    193e:	2f 93       	push	r18
    1940:	3f 93       	push	r19
    1942:	4f 93       	push	r20
    1944:	5f 93       	push	r21
    1946:	6f 93       	push	r22
    1948:	7f 93       	push	r23
    194a:	8f 93       	push	r24
    194c:	9f 93       	push	r25
    194e:	af 93       	push	r26
    1950:	bf 93       	push	r27
    1952:	ef 93       	push	r30
    1954:	ff 93       	push	r31
    1956:	e0 91 ff 06 	lds	r30, 0x06FF	; 0x8006ff <OVF_ptr>
    195a:	f0 91 00 07 	lds	r31, 0x0700	; 0x800700 <OVF_ptr+0x1>
    195e:	09 95       	icall
    1960:	ff 91       	pop	r31
    1962:	ef 91       	pop	r30
    1964:	bf 91       	pop	r27
    1966:	af 91       	pop	r26
    1968:	9f 91       	pop	r25
    196a:	8f 91       	pop	r24
    196c:	7f 91       	pop	r23
    196e:	6f 91       	pop	r22
    1970:	5f 91       	pop	r21
    1972:	4f 91       	pop	r20
    1974:	3f 91       	pop	r19
    1976:	2f 91       	pop	r18
    1978:	0f 90       	pop	r0
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	0f 90       	pop	r0
    197e:	1f 90       	pop	r1
    1980:	18 95       	reti

00001982 <__vector_4>:
    1982:	1f 92       	push	r1
    1984:	0f 92       	push	r0
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	0f 92       	push	r0
    198a:	11 24       	eor	r1, r1
    198c:	2f 93       	push	r18
    198e:	3f 93       	push	r19
    1990:	4f 93       	push	r20
    1992:	5f 93       	push	r21
    1994:	6f 93       	push	r22
    1996:	7f 93       	push	r23
    1998:	8f 93       	push	r24
    199a:	9f 93       	push	r25
    199c:	af 93       	push	r26
    199e:	bf 93       	push	r27
    19a0:	ef 93       	push	r30
    19a2:	ff 93       	push	r31
    19a4:	e0 91 fd 06 	lds	r30, 0x06FD	; 0x8006fd <CTC_ptr>
    19a8:	f0 91 fe 06 	lds	r31, 0x06FE	; 0x8006fe <CTC_ptr+0x1>
    19ac:	09 95       	icall
    19ae:	ff 91       	pop	r31
    19b0:	ef 91       	pop	r30
    19b2:	bf 91       	pop	r27
    19b4:	af 91       	pop	r26
    19b6:	9f 91       	pop	r25
    19b8:	8f 91       	pop	r24
    19ba:	7f 91       	pop	r23
    19bc:	6f 91       	pop	r22
    19be:	5f 91       	pop	r21
    19c0:	4f 91       	pop	r20
    19c2:	3f 91       	pop	r19
    19c4:	2f 91       	pop	r18
    19c6:	0f 90       	pop	r0
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	0f 90       	pop	r0
    19cc:	1f 90       	pop	r1
    19ce:	18 95       	reti

000019d0 <UART_voidInit>:
    19d0:	86 e8       	ldi	r24, 0x86	; 134
    19d2:	80 bd       	out	0x20, r24	; 32
    19d4:	87 e6       	ldi	r24, 0x67	; 103
    19d6:	89 b9       	out	0x09, r24	; 9
    19d8:	8a b1       	in	r24, 0x0a	; 10
    19da:	88 60       	ori	r24, 0x08	; 8
    19dc:	8a b9       	out	0x0a, r24	; 10
    19de:	8a b1       	in	r24, 0x0a	; 10
    19e0:	80 61       	ori	r24, 0x10	; 16
    19e2:	8a b9       	out	0x0a, r24	; 10
    19e4:	08 95       	ret

000019e6 <UART_voidTX>:
    19e6:	8c b9       	out	0x0c, r24	; 12
    19e8:	5d 9b       	sbis	0x0b, 5	; 11
    19ea:	fe cf       	rjmp	.-4      	; 0x19e8 <UART_voidTX+0x2>
    19ec:	08 95       	ret

000019ee <UltraSonic_Sendpulse>:
    19ee:	41 e0       	ldi	r20, 0x01	; 1
    19f0:	64 e0       	ldi	r22, 0x04	; 4
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19f8:	85 e3       	ldi	r24, 0x35	; 53
    19fa:	8a 95       	dec	r24
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <UltraSonic_Sendpulse+0xc>
    19fe:	00 00       	nop
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	64 e0       	ldi	r22, 0x04	; 4
    1a04:	82 e0       	ldi	r24, 0x02	; 2
    1a06:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1a0a:	08 95       	ret

00001a0c <UltraSonic_Read_Echo>:
    1a0c:	cf 93       	push	r28
    1a0e:	12 be       	out	0x32, r1	; 50
    1a10:	83 e0       	ldi	r24, 0x03	; 3
    1a12:	83 bf       	out	0x33, r24	; 51
    1a14:	65 e0       	ldi	r22, 0x05	; 5
    1a16:	82 e0       	ldi	r24, 0x02	; 2
    1a18:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    1a1c:	88 23       	and	r24, r24
    1a1e:	d1 f3       	breq	.-12     	; 0x1a14 <UltraSonic_Read_Echo+0x8>
    1a20:	c0 e0       	ldi	r28, 0x00	; 0
    1a22:	07 c0       	rjmp	.+14     	; 0x1a32 <UltraSonic_Read_Echo+0x26>
    1a24:	08 b6       	in	r0, 0x38	; 56
    1a26:	00 fe       	sbrs	r0, 0
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <UltraSonic_Read_Echo+0x26>
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	88 bf       	out	0x38, r24	; 56
    1a2e:	cf 5f       	subi	r28, 0xFF	; 255
    1a30:	12 be       	out	0x32, r1	; 50
    1a32:	65 e0       	ldi	r22, 0x05	; 5
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    1a3a:	81 30       	cpi	r24, 0x01	; 1
    1a3c:	99 f3       	breq	.-26     	; 0x1a24 <UltraSonic_Read_Echo+0x18>
    1a3e:	8c 2f       	mov	r24, r28
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	98 2f       	mov	r25, r24
    1a44:	88 27       	eor	r24, r24
    1a46:	22 b7       	in	r18, 0x32	; 50
    1a48:	13 be       	out	0x33, r1	; 51
    1a4a:	82 0f       	add	r24, r18
    1a4c:	91 1d       	adc	r25, r1
    1a4e:	cf 91       	pop	r28
    1a50:	08 95       	ret

00001a52 <UltraSonic_Calc_Distance>:
    1a52:	fc 01       	movw	r30, r24
    1a54:	09 95       	icall
    1a56:	9c 01       	movw	r18, r24
    1a58:	a8 e2       	ldi	r26, 0x28	; 40
    1a5a:	b7 e8       	ldi	r27, 0x87	; 135
    1a5c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__umulhisi3>
    1a60:	20 e2       	ldi	r18, 0x20	; 32
    1a62:	31 ea       	ldi	r19, 0xA1	; 161
    1a64:	47 e0       	ldi	r20, 0x07	; 7
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__udivmodsi4>
    1a6c:	8f ee       	ldi	r24, 0xEF	; 239
    1a6e:	82 0f       	add	r24, r18
    1a70:	08 95       	ret

00001a72 <__fixunssfsi>:
    1a72:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__fp_splitA>
    1a76:	88 f0       	brcs	.+34     	; 0x1a9a <__fixunssfsi+0x28>
    1a78:	9f 57       	subi	r25, 0x7F	; 127
    1a7a:	98 f0       	brcs	.+38     	; 0x1aa2 <__fixunssfsi+0x30>
    1a7c:	b9 2f       	mov	r27, r25
    1a7e:	99 27       	eor	r25, r25
    1a80:	b7 51       	subi	r27, 0x17	; 23
    1a82:	b0 f0       	brcs	.+44     	; 0x1ab0 <__fixunssfsi+0x3e>
    1a84:	e1 f0       	breq	.+56     	; 0x1abe <__fixunssfsi+0x4c>
    1a86:	66 0f       	add	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	1a f0       	brmi	.+6      	; 0x1a96 <__fixunssfsi+0x24>
    1a90:	ba 95       	dec	r27
    1a92:	c9 f7       	brne	.-14     	; 0x1a86 <__fixunssfsi+0x14>
    1a94:	14 c0       	rjmp	.+40     	; 0x1abe <__fixunssfsi+0x4c>
    1a96:	b1 30       	cpi	r27, 0x01	; 1
    1a98:	91 f0       	breq	.+36     	; 0x1abe <__fixunssfsi+0x4c>
    1a9a:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__fp_zero>
    1a9e:	b1 e0       	ldi	r27, 0x01	; 1
    1aa0:	08 95       	ret
    1aa2:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__fp_zero>
    1aa6:	67 2f       	mov	r22, r23
    1aa8:	78 2f       	mov	r23, r24
    1aaa:	88 27       	eor	r24, r24
    1aac:	b8 5f       	subi	r27, 0xF8	; 248
    1aae:	39 f0       	breq	.+14     	; 0x1abe <__fixunssfsi+0x4c>
    1ab0:	b9 3f       	cpi	r27, 0xF9	; 249
    1ab2:	cc f3       	brlt	.-14     	; 0x1aa6 <__fixunssfsi+0x34>
    1ab4:	86 95       	lsr	r24
    1ab6:	77 95       	ror	r23
    1ab8:	67 95       	ror	r22
    1aba:	b3 95       	inc	r27
    1abc:	d9 f7       	brne	.-10     	; 0x1ab4 <__fixunssfsi+0x42>
    1abe:	3e f4       	brtc	.+14     	; 0x1ace <__fixunssfsi+0x5c>
    1ac0:	90 95       	com	r25
    1ac2:	80 95       	com	r24
    1ac4:	70 95       	com	r23
    1ac6:	61 95       	neg	r22
    1ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aca:	8f 4f       	sbci	r24, 0xFF	; 255
    1acc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ace:	08 95       	ret

00001ad0 <__floatunsisf>:
    1ad0:	e8 94       	clt
    1ad2:	09 c0       	rjmp	.+18     	; 0x1ae6 <__floatsisf+0x12>

00001ad4 <__floatsisf>:
    1ad4:	97 fb       	bst	r25, 7
    1ad6:	3e f4       	brtc	.+14     	; 0x1ae6 <__floatsisf+0x12>
    1ad8:	90 95       	com	r25
    1ada:	80 95       	com	r24
    1adc:	70 95       	com	r23
    1ade:	61 95       	neg	r22
    1ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae6:	99 23       	and	r25, r25
    1ae8:	a9 f0       	breq	.+42     	; 0x1b14 <__floatsisf+0x40>
    1aea:	f9 2f       	mov	r31, r25
    1aec:	96 e9       	ldi	r25, 0x96	; 150
    1aee:	bb 27       	eor	r27, r27
    1af0:	93 95       	inc	r25
    1af2:	f6 95       	lsr	r31
    1af4:	87 95       	ror	r24
    1af6:	77 95       	ror	r23
    1af8:	67 95       	ror	r22
    1afa:	b7 95       	ror	r27
    1afc:	f1 11       	cpse	r31, r1
    1afe:	f8 cf       	rjmp	.-16     	; 0x1af0 <__floatsisf+0x1c>
    1b00:	fa f4       	brpl	.+62     	; 0x1b40 <__floatsisf+0x6c>
    1b02:	bb 0f       	add	r27, r27
    1b04:	11 f4       	brne	.+4      	; 0x1b0a <__floatsisf+0x36>
    1b06:	60 ff       	sbrs	r22, 0
    1b08:	1b c0       	rjmp	.+54     	; 0x1b40 <__floatsisf+0x6c>
    1b0a:	6f 5f       	subi	r22, 0xFF	; 255
    1b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b10:	9f 4f       	sbci	r25, 0xFF	; 255
    1b12:	16 c0       	rjmp	.+44     	; 0x1b40 <__floatsisf+0x6c>
    1b14:	88 23       	and	r24, r24
    1b16:	11 f0       	breq	.+4      	; 0x1b1c <__floatsisf+0x48>
    1b18:	96 e9       	ldi	r25, 0x96	; 150
    1b1a:	11 c0       	rjmp	.+34     	; 0x1b3e <__floatsisf+0x6a>
    1b1c:	77 23       	and	r23, r23
    1b1e:	21 f0       	breq	.+8      	; 0x1b28 <__floatsisf+0x54>
    1b20:	9e e8       	ldi	r25, 0x8E	; 142
    1b22:	87 2f       	mov	r24, r23
    1b24:	76 2f       	mov	r23, r22
    1b26:	05 c0       	rjmp	.+10     	; 0x1b32 <__floatsisf+0x5e>
    1b28:	66 23       	and	r22, r22
    1b2a:	71 f0       	breq	.+28     	; 0x1b48 <__floatsisf+0x74>
    1b2c:	96 e8       	ldi	r25, 0x86	; 134
    1b2e:	86 2f       	mov	r24, r22
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	2a f0       	brmi	.+10     	; 0x1b40 <__floatsisf+0x6c>
    1b36:	9a 95       	dec	r25
    1b38:	66 0f       	add	r22, r22
    1b3a:	77 1f       	adc	r23, r23
    1b3c:	88 1f       	adc	r24, r24
    1b3e:	da f7       	brpl	.-10     	; 0x1b36 <__floatsisf+0x62>
    1b40:	88 0f       	add	r24, r24
    1b42:	96 95       	lsr	r25
    1b44:	87 95       	ror	r24
    1b46:	97 f9       	bld	r25, 7
    1b48:	08 95       	ret

00001b4a <__fp_split3>:
    1b4a:	57 fd       	sbrc	r21, 7
    1b4c:	90 58       	subi	r25, 0x80	; 128
    1b4e:	44 0f       	add	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	59 f0       	breq	.+22     	; 0x1b6a <__fp_splitA+0x10>
    1b54:	5f 3f       	cpi	r21, 0xFF	; 255
    1b56:	71 f0       	breq	.+28     	; 0x1b74 <__fp_splitA+0x1a>
    1b58:	47 95       	ror	r20

00001b5a <__fp_splitA>:
    1b5a:	88 0f       	add	r24, r24
    1b5c:	97 fb       	bst	r25, 7
    1b5e:	99 1f       	adc	r25, r25
    1b60:	61 f0       	breq	.+24     	; 0x1b7a <__fp_splitA+0x20>
    1b62:	9f 3f       	cpi	r25, 0xFF	; 255
    1b64:	79 f0       	breq	.+30     	; 0x1b84 <__fp_splitA+0x2a>
    1b66:	87 95       	ror	r24
    1b68:	08 95       	ret
    1b6a:	12 16       	cp	r1, r18
    1b6c:	13 06       	cpc	r1, r19
    1b6e:	14 06       	cpc	r1, r20
    1b70:	55 1f       	adc	r21, r21
    1b72:	f2 cf       	rjmp	.-28     	; 0x1b58 <__fp_split3+0xe>
    1b74:	46 95       	lsr	r20
    1b76:	f1 df       	rcall	.-30     	; 0x1b5a <__fp_splitA>
    1b78:	08 c0       	rjmp	.+16     	; 0x1b8a <__fp_splitA+0x30>
    1b7a:	16 16       	cp	r1, r22
    1b7c:	17 06       	cpc	r1, r23
    1b7e:	18 06       	cpc	r1, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	f1 cf       	rjmp	.-30     	; 0x1b66 <__fp_splitA+0xc>
    1b84:	86 95       	lsr	r24
    1b86:	71 05       	cpc	r23, r1
    1b88:	61 05       	cpc	r22, r1
    1b8a:	08 94       	sec
    1b8c:	08 95       	ret

00001b8e <__fp_zero>:
    1b8e:	e8 94       	clt

00001b90 <__fp_szero>:
    1b90:	bb 27       	eor	r27, r27
    1b92:	66 27       	eor	r22, r22
    1b94:	77 27       	eor	r23, r23
    1b96:	cb 01       	movw	r24, r22
    1b98:	97 f9       	bld	r25, 7
    1b9a:	08 95       	ret

00001b9c <__mulsf3>:
    1b9c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__mulsf3x>
    1ba0:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_round>
    1ba4:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__fp_pscA>
    1ba8:	38 f0       	brcs	.+14     	; 0x1bb8 <__mulsf3+0x1c>
    1baa:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__fp_pscB>
    1bae:	20 f0       	brcs	.+8      	; 0x1bb8 <__mulsf3+0x1c>
    1bb0:	95 23       	and	r25, r21
    1bb2:	11 f0       	breq	.+4      	; 0x1bb8 <__mulsf3+0x1c>
    1bb4:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__fp_inf>
    1bb8:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__fp_nan>
    1bbc:	11 24       	eor	r1, r1
    1bbe:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__fp_szero>

00001bc2 <__mulsf3x>:
    1bc2:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__fp_split3>
    1bc6:	70 f3       	brcs	.-36     	; 0x1ba4 <__mulsf3+0x8>

00001bc8 <__mulsf3_pse>:
    1bc8:	95 9f       	mul	r25, r21
    1bca:	c1 f3       	breq	.-16     	; 0x1bbc <__mulsf3+0x20>
    1bcc:	95 0f       	add	r25, r21
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	55 1f       	adc	r21, r21
    1bd2:	62 9f       	mul	r22, r18
    1bd4:	f0 01       	movw	r30, r0
    1bd6:	72 9f       	mul	r23, r18
    1bd8:	bb 27       	eor	r27, r27
    1bda:	f0 0d       	add	r31, r0
    1bdc:	b1 1d       	adc	r27, r1
    1bde:	63 9f       	mul	r22, r19
    1be0:	aa 27       	eor	r26, r26
    1be2:	f0 0d       	add	r31, r0
    1be4:	b1 1d       	adc	r27, r1
    1be6:	aa 1f       	adc	r26, r26
    1be8:	64 9f       	mul	r22, r20
    1bea:	66 27       	eor	r22, r22
    1bec:	b0 0d       	add	r27, r0
    1bee:	a1 1d       	adc	r26, r1
    1bf0:	66 1f       	adc	r22, r22
    1bf2:	82 9f       	mul	r24, r18
    1bf4:	22 27       	eor	r18, r18
    1bf6:	b0 0d       	add	r27, r0
    1bf8:	a1 1d       	adc	r26, r1
    1bfa:	62 1f       	adc	r22, r18
    1bfc:	73 9f       	mul	r23, r19
    1bfe:	b0 0d       	add	r27, r0
    1c00:	a1 1d       	adc	r26, r1
    1c02:	62 1f       	adc	r22, r18
    1c04:	83 9f       	mul	r24, r19
    1c06:	a0 0d       	add	r26, r0
    1c08:	61 1d       	adc	r22, r1
    1c0a:	22 1f       	adc	r18, r18
    1c0c:	74 9f       	mul	r23, r20
    1c0e:	33 27       	eor	r19, r19
    1c10:	a0 0d       	add	r26, r0
    1c12:	61 1d       	adc	r22, r1
    1c14:	23 1f       	adc	r18, r19
    1c16:	84 9f       	mul	r24, r20
    1c18:	60 0d       	add	r22, r0
    1c1a:	21 1d       	adc	r18, r1
    1c1c:	82 2f       	mov	r24, r18
    1c1e:	76 2f       	mov	r23, r22
    1c20:	6a 2f       	mov	r22, r26
    1c22:	11 24       	eor	r1, r1
    1c24:	9f 57       	subi	r25, 0x7F	; 127
    1c26:	50 40       	sbci	r21, 0x00	; 0
    1c28:	9a f0       	brmi	.+38     	; 0x1c50 <__mulsf3_pse+0x88>
    1c2a:	f1 f0       	breq	.+60     	; 0x1c68 <__mulsf3_pse+0xa0>
    1c2c:	88 23       	and	r24, r24
    1c2e:	4a f0       	brmi	.+18     	; 0x1c42 <__mulsf3_pse+0x7a>
    1c30:	ee 0f       	add	r30, r30
    1c32:	ff 1f       	adc	r31, r31
    1c34:	bb 1f       	adc	r27, r27
    1c36:	66 1f       	adc	r22, r22
    1c38:	77 1f       	adc	r23, r23
    1c3a:	88 1f       	adc	r24, r24
    1c3c:	91 50       	subi	r25, 0x01	; 1
    1c3e:	50 40       	sbci	r21, 0x00	; 0
    1c40:	a9 f7       	brne	.-22     	; 0x1c2c <__mulsf3_pse+0x64>
    1c42:	9e 3f       	cpi	r25, 0xFE	; 254
    1c44:	51 05       	cpc	r21, r1
    1c46:	80 f0       	brcs	.+32     	; 0x1c68 <__mulsf3_pse+0xa0>
    1c48:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__fp_inf>
    1c4c:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__fp_szero>
    1c50:	5f 3f       	cpi	r21, 0xFF	; 255
    1c52:	e4 f3       	brlt	.-8      	; 0x1c4c <__mulsf3_pse+0x84>
    1c54:	98 3e       	cpi	r25, 0xE8	; 232
    1c56:	d4 f3       	brlt	.-12     	; 0x1c4c <__mulsf3_pse+0x84>
    1c58:	86 95       	lsr	r24
    1c5a:	77 95       	ror	r23
    1c5c:	67 95       	ror	r22
    1c5e:	b7 95       	ror	r27
    1c60:	f7 95       	ror	r31
    1c62:	e7 95       	ror	r30
    1c64:	9f 5f       	subi	r25, 0xFF	; 255
    1c66:	c1 f7       	brne	.-16     	; 0x1c58 <__mulsf3_pse+0x90>
    1c68:	fe 2b       	or	r31, r30
    1c6a:	88 0f       	add	r24, r24
    1c6c:	91 1d       	adc	r25, r1
    1c6e:	96 95       	lsr	r25
    1c70:	87 95       	ror	r24
    1c72:	97 f9       	bld	r25, 7
    1c74:	08 95       	ret

00001c76 <__fp_inf>:
    1c76:	97 f9       	bld	r25, 7
    1c78:	9f 67       	ori	r25, 0x7F	; 127
    1c7a:	80 e8       	ldi	r24, 0x80	; 128
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	08 95       	ret

00001c82 <__fp_nan>:
    1c82:	9f ef       	ldi	r25, 0xFF	; 255
    1c84:	80 ec       	ldi	r24, 0xC0	; 192
    1c86:	08 95       	ret

00001c88 <__fp_pscA>:
    1c88:	00 24       	eor	r0, r0
    1c8a:	0a 94       	dec	r0
    1c8c:	16 16       	cp	r1, r22
    1c8e:	17 06       	cpc	r1, r23
    1c90:	18 06       	cpc	r1, r24
    1c92:	09 06       	cpc	r0, r25
    1c94:	08 95       	ret

00001c96 <__fp_pscB>:
    1c96:	00 24       	eor	r0, r0
    1c98:	0a 94       	dec	r0
    1c9a:	12 16       	cp	r1, r18
    1c9c:	13 06       	cpc	r1, r19
    1c9e:	14 06       	cpc	r1, r20
    1ca0:	05 06       	cpc	r0, r21
    1ca2:	08 95       	ret

00001ca4 <__fp_round>:
    1ca4:	09 2e       	mov	r0, r25
    1ca6:	03 94       	inc	r0
    1ca8:	00 0c       	add	r0, r0
    1caa:	11 f4       	brne	.+4      	; 0x1cb0 <__fp_round+0xc>
    1cac:	88 23       	and	r24, r24
    1cae:	52 f0       	brmi	.+20     	; 0x1cc4 <__fp_round+0x20>
    1cb0:	bb 0f       	add	r27, r27
    1cb2:	40 f4       	brcc	.+16     	; 0x1cc4 <__fp_round+0x20>
    1cb4:	bf 2b       	or	r27, r31
    1cb6:	11 f4       	brne	.+4      	; 0x1cbc <__fp_round+0x18>
    1cb8:	60 ff       	sbrs	r22, 0
    1cba:	04 c0       	rjmp	.+8      	; 0x1cc4 <__fp_round+0x20>
    1cbc:	6f 5f       	subi	r22, 0xFF	; 255
    1cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc4:	08 95       	ret

00001cc6 <__udivmodsi4>:
    1cc6:	a1 e2       	ldi	r26, 0x21	; 33
    1cc8:	1a 2e       	mov	r1, r26
    1cca:	aa 1b       	sub	r26, r26
    1ccc:	bb 1b       	sub	r27, r27
    1cce:	fd 01       	movw	r30, r26
    1cd0:	0d c0       	rjmp	.+26     	; 0x1cec <__udivmodsi4_ep>

00001cd2 <__udivmodsi4_loop>:
    1cd2:	aa 1f       	adc	r26, r26
    1cd4:	bb 1f       	adc	r27, r27
    1cd6:	ee 1f       	adc	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	a2 17       	cp	r26, r18
    1cdc:	b3 07       	cpc	r27, r19
    1cde:	e4 07       	cpc	r30, r20
    1ce0:	f5 07       	cpc	r31, r21
    1ce2:	20 f0       	brcs	.+8      	; 0x1cec <__udivmodsi4_ep>
    1ce4:	a2 1b       	sub	r26, r18
    1ce6:	b3 0b       	sbc	r27, r19
    1ce8:	e4 0b       	sbc	r30, r20
    1cea:	f5 0b       	sbc	r31, r21

00001cec <__udivmodsi4_ep>:
    1cec:	66 1f       	adc	r22, r22
    1cee:	77 1f       	adc	r23, r23
    1cf0:	88 1f       	adc	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	1a 94       	dec	r1
    1cf6:	69 f7       	brne	.-38     	; 0x1cd2 <__udivmodsi4_loop>
    1cf8:	60 95       	com	r22
    1cfa:	70 95       	com	r23
    1cfc:	80 95       	com	r24
    1cfe:	90 95       	com	r25
    1d00:	9b 01       	movw	r18, r22
    1d02:	ac 01       	movw	r20, r24
    1d04:	bd 01       	movw	r22, r26
    1d06:	cf 01       	movw	r24, r30
    1d08:	08 95       	ret

00001d0a <__umulhisi3>:
    1d0a:	a2 9f       	mul	r26, r18
    1d0c:	b0 01       	movw	r22, r0
    1d0e:	b3 9f       	mul	r27, r19
    1d10:	c0 01       	movw	r24, r0
    1d12:	a3 9f       	mul	r26, r19
    1d14:	70 0d       	add	r23, r0
    1d16:	81 1d       	adc	r24, r1
    1d18:	11 24       	eor	r1, r1
    1d1a:	91 1d       	adc	r25, r1
    1d1c:	b2 9f       	mul	r27, r18
    1d1e:	70 0d       	add	r23, r0
    1d20:	81 1d       	adc	r24, r1
    1d22:	11 24       	eor	r1, r1
    1d24:	91 1d       	adc	r25, r1
    1d26:	08 95       	ret

00001d28 <_exit>:
    1d28:	f8 94       	cli

00001d2a <__stop_program>:
    1d2a:	ff cf       	rjmp	.-2      	; 0x1d2a <__stop_program>
