
Rover_Test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00001c8c  00001d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000067a  008000a8  008000a8  00001d68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005c8  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005661  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001679  00000000  00000000  000079fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003072  00000000  00000000  00009076  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001014  00000000  00000000  0000c0e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001901  00000000  00000000  0000d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004164  00000000  00000000  0000e9fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  00012b61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_1>
       8:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_2>
       c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_3>
      10:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__vector_4>
      14:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__vector_10>
      2c:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 32       	cpi	r26, 0x22	; 34
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <main>
      8a:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDir>:
      92:	41 30       	cpi	r20, 0x01	; 1
      94:	a1 f5       	brne	.+104    	; 0xfe <DIO_voidSetPinDir+0x6c>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	89 f0       	breq	.+34     	; 0xbc <DIO_voidSetPinDir+0x2a>
      9a:	28 f0       	brcs	.+10     	; 0xa6 <DIO_voidSetPinDir+0x14>
      9c:	82 30       	cpi	r24, 0x02	; 2
      9e:	c9 f0       	breq	.+50     	; 0xd2 <DIO_voidSetPinDir+0x40>
      a0:	83 30       	cpi	r24, 0x03	; 3
      a2:	11 f1       	breq	.+68     	; 0xe8 <DIO_voidSetPinDir+0x56>
      a4:	08 95       	ret
      a6:	2a b3       	in	r18, 0x1a	; 26
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_voidSetPinDir+0x20>
      ae:	88 0f       	add	r24, r24
      b0:	99 1f       	adc	r25, r25
      b2:	6a 95       	dec	r22
      b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_voidSetPinDir+0x1c>
      b6:	82 2b       	or	r24, r18
      b8:	8a bb       	out	0x1a, r24	; 26
      ba:	08 95       	ret
      bc:	27 b3       	in	r18, 0x17	; 23
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_voidSetPinDir+0x36>
      c4:	88 0f       	add	r24, r24
      c6:	99 1f       	adc	r25, r25
      c8:	6a 95       	dec	r22
      ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_voidSetPinDir+0x32>
      cc:	82 2b       	or	r24, r18
      ce:	87 bb       	out	0x17, r24	; 23
      d0:	08 95       	ret
      d2:	24 b3       	in	r18, 0x14	; 20
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_voidSetPinDir+0x4c>
      da:	88 0f       	add	r24, r24
      dc:	99 1f       	adc	r25, r25
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_voidSetPinDir+0x48>
      e2:	82 2b       	or	r24, r18
      e4:	84 bb       	out	0x14, r24	; 20
      e6:	08 95       	ret
      e8:	21 b3       	in	r18, 0x11	; 17
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPinDir+0x62>
      f0:	88 0f       	add	r24, r24
      f2:	99 1f       	adc	r25, r25
      f4:	6a 95       	dec	r22
      f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPinDir+0x5e>
      f8:	82 2b       	or	r24, r18
      fa:	81 bb       	out	0x11, r24	; 17
      fc:	08 95       	ret
      fe:	41 11       	cpse	r20, r1
     100:	37 c0       	rjmp	.+110    	; 0x170 <DIO_voidSetPinDir+0xde>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	91 f0       	breq	.+36     	; 0x12a <DIO_voidSetPinDir+0x98>
     106:	28 f0       	brcs	.+10     	; 0x112 <DIO_voidSetPinDir+0x80>
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	d9 f0       	breq	.+54     	; 0x142 <DIO_voidSetPinDir+0xb0>
     10c:	83 30       	cpi	r24, 0x03	; 3
     10e:	29 f1       	breq	.+74     	; 0x15a <DIO_voidSetPinDir+0xc8>
     110:	08 95       	ret
     112:	2a b3       	in	r18, 0x1a	; 26
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinDir+0x8c>
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	6a 95       	dec	r22
     120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinDir+0x88>
     122:	80 95       	com	r24
     124:	82 23       	and	r24, r18
     126:	8a bb       	out	0x1a, r24	; 26
     128:	08 95       	ret
     12a:	27 b3       	in	r18, 0x17	; 23
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_voidSetPinDir+0xa4>
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_voidSetPinDir+0xa0>
     13a:	80 95       	com	r24
     13c:	82 23       	and	r24, r18
     13e:	87 bb       	out	0x17, r24	; 23
     140:	08 95       	ret
     142:	24 b3       	in	r18, 0x14	; 20
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_voidSetPinDir+0xbc>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	6a 95       	dec	r22
     150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_voidSetPinDir+0xb8>
     152:	80 95       	com	r24
     154:	82 23       	and	r24, r18
     156:	84 bb       	out	0x14, r24	; 20
     158:	08 95       	ret
     15a:	21 b3       	in	r18, 0x11	; 17
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_voidSetPinDir+0xd4>
     162:	88 0f       	add	r24, r24
     164:	99 1f       	adc	r25, r25
     166:	6a 95       	dec	r22
     168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_voidSetPinDir+0xd0>
     16a:	80 95       	com	r24
     16c:	82 23       	and	r24, r18
     16e:	81 bb       	out	0x11, r24	; 17
     170:	08 95       	ret

00000172 <DIO_voidSetPinVal>:
     172:	41 30       	cpi	r20, 0x01	; 1
     174:	a1 f5       	brne	.+104    	; 0x1de <DIO_voidSetPinVal+0x6c>
     176:	81 30       	cpi	r24, 0x01	; 1
     178:	89 f0       	breq	.+34     	; 0x19c <DIO_voidSetPinVal+0x2a>
     17a:	28 f0       	brcs	.+10     	; 0x186 <DIO_voidSetPinVal+0x14>
     17c:	82 30       	cpi	r24, 0x02	; 2
     17e:	c9 f0       	breq	.+50     	; 0x1b2 <DIO_voidSetPinVal+0x40>
     180:	83 30       	cpi	r24, 0x03	; 3
     182:	11 f1       	breq	.+68     	; 0x1c8 <DIO_voidSetPinVal+0x56>
     184:	08 95       	ret
     186:	2b b3       	in	r18, 0x1b	; 27
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_voidSetPinVal+0x20>
     18e:	88 0f       	add	r24, r24
     190:	99 1f       	adc	r25, r25
     192:	6a 95       	dec	r22
     194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_voidSetPinVal+0x1c>
     196:	82 2b       	or	r24, r18
     198:	8b bb       	out	0x1b, r24	; 27
     19a:	08 95       	ret
     19c:	28 b3       	in	r18, 0x18	; 24
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_voidSetPinVal+0x36>
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	6a 95       	dec	r22
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_voidSetPinVal+0x32>
     1ac:	82 2b       	or	r24, r18
     1ae:	88 bb       	out	0x18, r24	; 24
     1b0:	08 95       	ret
     1b2:	25 b3       	in	r18, 0x15	; 21
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_voidSetPinVal+0x4c>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	6a 95       	dec	r22
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_voidSetPinVal+0x48>
     1c2:	82 2b       	or	r24, r18
     1c4:	85 bb       	out	0x15, r24	; 21
     1c6:	08 95       	ret
     1c8:	22 b3       	in	r18, 0x12	; 18
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_voidSetPinVal+0x62>
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	6a 95       	dec	r22
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_voidSetPinVal+0x5e>
     1d8:	82 2b       	or	r24, r18
     1da:	82 bb       	out	0x12, r24	; 18
     1dc:	08 95       	ret
     1de:	41 11       	cpse	r20, r1
     1e0:	37 c0       	rjmp	.+110    	; 0x250 <DIO_voidSetPinVal+0xde>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	91 f0       	breq	.+36     	; 0x20a <DIO_voidSetPinVal+0x98>
     1e6:	28 f0       	brcs	.+10     	; 0x1f2 <DIO_voidSetPinVal+0x80>
     1e8:	82 30       	cpi	r24, 0x02	; 2
     1ea:	d9 f0       	breq	.+54     	; 0x222 <DIO_voidSetPinVal+0xb0>
     1ec:	83 30       	cpi	r24, 0x03	; 3
     1ee:	29 f1       	breq	.+74     	; 0x23a <DIO_voidSetPinVal+0xc8>
     1f0:	08 95       	ret
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_voidSetPinVal+0x8c>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	6a 95       	dec	r22
     200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_voidSetPinVal+0x88>
     202:	80 95       	com	r24
     204:	82 23       	and	r24, r18
     206:	8b bb       	out	0x1b, r24	; 27
     208:	08 95       	ret
     20a:	28 b3       	in	r18, 0x18	; 24
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_voidSetPinVal+0xa4>
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	6a 95       	dec	r22
     218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_voidSetPinVal+0xa0>
     21a:	80 95       	com	r24
     21c:	82 23       	and	r24, r18
     21e:	88 bb       	out	0x18, r24	; 24
     220:	08 95       	ret
     222:	25 b3       	in	r18, 0x15	; 21
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinVal+0xbc>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinVal+0xb8>
     232:	80 95       	com	r24
     234:	82 23       	and	r24, r18
     236:	85 bb       	out	0x15, r24	; 21
     238:	08 95       	ret
     23a:	22 b3       	in	r18, 0x12	; 18
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_voidSetPinVal+0xd4>
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	6a 95       	dec	r22
     248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_voidSetPinVal+0xd0>
     24a:	80 95       	com	r24
     24c:	82 23       	and	r24, r18
     24e:	82 bb       	out	0x12, r24	; 18
     250:	08 95       	ret

00000252 <DIO_u8GetPinVal>:
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	79 f0       	breq	.+30     	; 0x274 <DIO_u8GetPinVal+0x22>
     256:	28 f0       	brcs	.+10     	; 0x262 <DIO_u8GetPinVal+0x10>
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	a9 f0       	breq	.+42     	; 0x286 <DIO_u8GetPinVal+0x34>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	e1 f0       	breq	.+56     	; 0x298 <DIO_u8GetPinVal+0x46>
     260:	24 c0       	rjmp	.+72     	; 0x2aa <DIO_u8GetPinVal+0x58>
     262:	89 b3       	in	r24, 0x19	; 25
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_u8GetPinVal+0x1a>
     268:	95 95       	asr	r25
     26a:	87 95       	ror	r24
     26c:	6a 95       	dec	r22
     26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_u8GetPinVal+0x16>
     270:	81 70       	andi	r24, 0x01	; 1
     272:	08 95       	ret
     274:	86 b3       	in	r24, 0x16	; 22
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_u8GetPinVal+0x2c>
     27a:	95 95       	asr	r25
     27c:	87 95       	ror	r24
     27e:	6a 95       	dec	r22
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_u8GetPinVal+0x28>
     282:	81 70       	andi	r24, 0x01	; 1
     284:	08 95       	ret
     286:	83 b3       	in	r24, 0x13	; 19
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_u8GetPinVal+0x3e>
     28c:	95 95       	asr	r25
     28e:	87 95       	ror	r24
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_u8GetPinVal+0x3a>
     294:	81 70       	andi	r24, 0x01	; 1
     296:	08 95       	ret
     298:	80 b3       	in	r24, 0x10	; 16
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8GetPinVal+0x50>
     29e:	95 95       	asr	r25
     2a0:	87 95       	ror	r24
     2a2:	6a 95       	dec	r22
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_u8GetPinVal+0x4c>
     2a6:	81 70       	andi	r24, 0x01	; 1
     2a8:	08 95       	ret
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	08 95       	ret

000002ae <__vector_1>:
     2ae:	1f 92       	push	r1
     2b0:	0f 92       	push	r0
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	0f 92       	push	r0
     2b6:	11 24       	eor	r1, r1
     2b8:	2f 93       	push	r18
     2ba:	3f 93       	push	r19
     2bc:	4f 93       	push	r20
     2be:	5f 93       	push	r21
     2c0:	6f 93       	push	r22
     2c2:	7f 93       	push	r23
     2c4:	8f 93       	push	r24
     2c6:	9f 93       	push	r25
     2c8:	af 93       	push	r26
     2ca:	bf 93       	push	r27
     2cc:	ef 93       	push	r30
     2ce:	ff 93       	push	r31
     2d0:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <INT_0_PTR>
     2d4:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <INT_0_PTR+0x1>
     2d8:	09 95       	icall
     2da:	ff 91       	pop	r31
     2dc:	ef 91       	pop	r30
     2de:	bf 91       	pop	r27
     2e0:	af 91       	pop	r26
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	7f 91       	pop	r23
     2e8:	6f 91       	pop	r22
     2ea:	5f 91       	pop	r21
     2ec:	4f 91       	pop	r20
     2ee:	3f 91       	pop	r19
     2f0:	2f 91       	pop	r18
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <__vector_2>:
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	2f 93       	push	r18
     308:	3f 93       	push	r19
     30a:	4f 93       	push	r20
     30c:	5f 93       	push	r21
     30e:	6f 93       	push	r22
     310:	7f 93       	push	r23
     312:	8f 93       	push	r24
     314:	9f 93       	push	r25
     316:	af 93       	push	r26
     318:	bf 93       	push	r27
     31a:	ef 93       	push	r30
     31c:	ff 93       	push	r31
     31e:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <INT_1_PTR>
     322:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <INT_1_PTR+0x1>
     326:	09 95       	icall
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	7f 91       	pop	r23
     336:	6f 91       	pop	r22
     338:	5f 91       	pop	r21
     33a:	4f 91       	pop	r20
     33c:	3f 91       	pop	r19
     33e:	2f 91       	pop	r18
     340:	0f 90       	pop	r0
     342:	0f be       	out	0x3f, r0	; 63
     344:	0f 90       	pop	r0
     346:	1f 90       	pop	r1
     348:	18 95       	reti

0000034a <__vector_3>:
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	2f 93       	push	r18
     356:	3f 93       	push	r19
     358:	4f 93       	push	r20
     35a:	5f 93       	push	r21
     35c:	6f 93       	push	r22
     35e:	7f 93       	push	r23
     360:	8f 93       	push	r24
     362:	9f 93       	push	r25
     364:	af 93       	push	r26
     366:	bf 93       	push	r27
     368:	ef 93       	push	r30
     36a:	ff 93       	push	r31
     36c:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <__data_end>
     370:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <__data_end+0x1>
     374:	09 95       	icall
     376:	ff 91       	pop	r31
     378:	ef 91       	pop	r30
     37a:	bf 91       	pop	r27
     37c:	af 91       	pop	r26
     37e:	9f 91       	pop	r25
     380:	8f 91       	pop	r24
     382:	7f 91       	pop	r23
     384:	6f 91       	pop	r22
     386:	5f 91       	pop	r21
     388:	4f 91       	pop	r20
     38a:	3f 91       	pop	r19
     38c:	2f 91       	pop	r18
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
     392:	0f 90       	pop	r0
     394:	1f 90       	pop	r1
     396:	18 95       	reti

00000398 <prvHeapInit>:
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     398:	e3 eb       	ldi	r30, 0xB3	; 179
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	88 eb       	ldi	r24, 0xB8	; 184
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
	xStart.xBlockSize = ( size_t ) 0;
     3a4:	13 82       	std	Z+3, r1	; 0x03
     3a6:	12 82       	std	Z+2, r1	; 0x02

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     3a8:	ef ea       	ldi	r30, 0xAF	; 175
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	8b ed       	ldi	r24, 0xDB	; 219
     3ae:	95 e0       	ldi	r25, 0x05	; 5
     3b0:	93 83       	std	Z+3, r25	; 0x03
     3b2:	82 83       	std	Z+2, r24	; 0x02
	xEnd.pxNextFreeBlock = NULL;
     3b4:	11 82       	std	Z+1, r1	; 0x01
     3b6:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     3b8:	a7 eb       	ldi	r26, 0xB7	; 183
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	14 96       	adiw	r26, 0x04	; 4
     3be:	9c 93       	st	X, r25
     3c0:	8e 93       	st	-X, r24
     3c2:	13 97       	sbiw	r26, 0x03	; 3
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     3c4:	12 96       	adiw	r26, 0x02	; 2
     3c6:	fc 93       	st	X, r31
     3c8:	ee 93       	st	-X, r30
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	08 95       	ret

000003ce <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     3d8:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     3dc:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <xHeapHasBeenInitialised.2078>
     3e0:	81 11       	cpse	r24, r1
     3e2:	05 c0       	rjmp	.+10     	; 0x3ee <pvPortMalloc+0x20>
		{
			prvHeapInit();
     3e4:	0e 94 cc 01 	call	0x398	; 0x398 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <xHeapHasBeenInitialised.2078>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     3ee:	20 97       	sbiw	r28, 0x00	; 0
     3f0:	09 f0       	breq	.+2      	; 0x3f4 <pvPortMalloc+0x26>
		{
			xWantedSize += heapSTRUCT_SIZE;
     3f2:	24 96       	adiw	r28, 0x04	; 4
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     3f4:	ce 01       	movw	r24, r28
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	8a 3d       	cpi	r24, 0xDA	; 218
     3fa:	95 40       	sbci	r25, 0x05	; 5
     3fc:	08 f0       	brcs	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	56 c0       	rjmp	.+172    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     400:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <xStart>
     404:	f0 91 b4 00 	lds	r31, 0x00B4	; 0x8000b4 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     408:	a3 eb       	ldi	r26, 0xB3	; 179
     40a:	b0 e0       	ldi	r27, 0x00	; 0
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
			{
				pxPreviousBlock = pxBlock;
     40e:	df 01       	movw	r26, r30
				pxBlock = pxBlock->pxNextFreeBlock;
     410:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     412:	82 81       	ldd	r24, Z+2	; 0x02
     414:	93 81       	ldd	r25, Z+3	; 0x03
     416:	8c 17       	cp	r24, r28
     418:	9d 07       	cpc	r25, r29
     41a:	20 f4       	brcc	.+8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     41c:	80 81       	ld	r24, Z
     41e:	91 81       	ldd	r25, Z+1	; 0x01
     420:	00 97       	sbiw	r24, 0x00	; 0
     422:	a9 f7       	brne	.-22     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	ef 3a       	cpi	r30, 0xAF	; 175
     428:	f8 07       	cpc	r31, r24
     42a:	09 f4       	brne	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42c:	42 c0       	rjmp	.+132    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     42e:	0d 91       	ld	r16, X+
     430:	1c 91       	ld	r17, X
     432:	11 97       	sbiw	r26, 0x01	; 1
     434:	0c 5f       	subi	r16, 0xFC	; 252
     436:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     438:	80 81       	ld	r24, Z
     43a:	91 81       	ldd	r25, Z+1	; 0x01
     43c:	8d 93       	st	X+, r24
     43e:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     440:	82 81       	ldd	r24, Z+2	; 0x02
     442:	93 81       	ldd	r25, Z+3	; 0x03
     444:	8c 1b       	sub	r24, r28
     446:	9d 0b       	sbc	r25, r29
     448:	89 30       	cpi	r24, 0x09	; 9
     44a:	91 05       	cpc	r25, r1
     44c:	10 f1       	brcs	.+68     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     44e:	af 01       	movw	r20, r30
     450:	4c 0f       	add	r20, r28
     452:	5d 1f       	adc	r21, r29

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     454:	da 01       	movw	r26, r20
     456:	13 96       	adiw	r26, 0x03	; 3
     458:	9c 93       	st	X, r25
     45a:	8e 93       	st	-X, r24
     45c:	12 97       	sbiw	r26, 0x02	; 2
					pxBlock->xBlockSize = xWantedSize;
     45e:	d3 83       	std	Z+3, r29	; 0x03
     460:	c2 83       	std	Z+2, r28	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     462:	12 96       	adiw	r26, 0x02	; 2
     464:	2d 91       	ld	r18, X+
     466:	3c 91       	ld	r19, X
     468:	13 97       	sbiw	r26, 0x03	; 3
     46a:	63 eb       	ldi	r22, 0xB3	; 179
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	01 c0       	rjmp	.+2      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     470:	bd 01       	movw	r22, r26
     472:	eb 01       	movw	r28, r22
     474:	a8 81       	ld	r26, Y
     476:	b9 81       	ldd	r27, Y+1	; 0x01
     478:	12 96       	adiw	r26, 0x02	; 2
     47a:	8d 91       	ld	r24, X+
     47c:	9c 91       	ld	r25, X
     47e:	13 97       	sbiw	r26, 0x03	; 3
     480:	82 17       	cp	r24, r18
     482:	93 07       	cpc	r25, r19
     484:	a8 f3       	brcs	.-22     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     486:	ea 01       	movw	r28, r20
     488:	b9 83       	std	Y+1, r27	; 0x01
     48a:	a8 83       	st	Y, r26
     48c:	db 01       	movw	r26, r22
     48e:	4d 93       	st	X+, r20
     490:	5c 93       	st	X, r21
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     492:	22 81       	ldd	r18, Z+2	; 0x02
     494:	33 81       	ldd	r19, Z+3	; 0x03
     496:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     49a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     49e:	82 1b       	sub	r24, r18
     4a0:	93 0b       	sbc	r25, r19
     4a2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	10 e0       	ldi	r17, 0x00	; 0
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b2:	00 e0       	ldi	r16, 0x00	; 0
     4b4:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     4b6:	0e 94 3b 07 	call	0xe76	; 0xe76 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     4ba:	c8 01       	movw	r24, r16
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	08 95       	ret

000004c6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     4ce:	00 97       	sbiw	r24, 0x00	; 0
     4d0:	41 f1       	breq	.+80     	; 0x522 <vPortFree+0x5c>
     4d2:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     4d4:	8c 01       	movw	r16, r24
     4d6:	04 50       	subi	r16, 0x04	; 4
     4d8:	11 09       	sbc	r17, r1

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     4da:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     4de:	f8 01       	movw	r30, r16
     4e0:	42 81       	ldd	r20, Z+2	; 0x02
     4e2:	53 81       	ldd	r21, Z+3	; 0x03
     4e4:	a3 eb       	ldi	r26, 0xB3	; 179
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <vPortFree+0x26>
     4ea:	df 01       	movw	r26, r30
     4ec:	ed 91       	ld	r30, X+
     4ee:	fc 91       	ld	r31, X
     4f0:	11 97       	sbiw	r26, 0x01	; 1
     4f2:	22 81       	ldd	r18, Z+2	; 0x02
     4f4:	33 81       	ldd	r19, Z+3	; 0x03
     4f6:	24 17       	cp	r18, r20
     4f8:	35 07       	cpc	r19, r21
     4fa:	b8 f3       	brcs	.-18     	; 0x4ea <vPortFree+0x24>
     4fc:	24 97       	sbiw	r28, 0x04	; 4
     4fe:	f9 83       	std	Y+1, r31	; 0x01
     500:	e8 83       	st	Y, r30
     502:	0d 93       	st	X+, r16
     504:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
     506:	8a 81       	ldd	r24, Y+2	; 0x02
     508:	9b 81       	ldd	r25, Y+3	; 0x03
     50a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     50e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     512:	82 0f       	add	r24, r18
     514:	93 1f       	adc	r25, r19
     516:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     51a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     51e:	0e 94 3b 07 	call	0xe76	; 0xe76 <xTaskResumeAll>
	}
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     52c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     52e:	03 96       	adiw	r24, 0x03	; 3
     530:	92 83       	std	Z+2, r25	; 0x02
     532:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     534:	2f ef       	ldi	r18, 0xFF	; 255
     536:	3f ef       	ldi	r19, 0xFF	; 255
     538:	34 83       	std	Z+4, r19	; 0x04
     53a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     53c:	96 83       	std	Z+6, r25	; 0x06
     53e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     540:	90 87       	std	Z+8, r25	; 0x08
     542:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     544:	10 82       	st	Z, r1
     546:	08 95       	ret

00000548 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     548:	fc 01       	movw	r30, r24
     54a:	11 86       	std	Z+9, r1	; 0x09
     54c:	10 86       	std	Z+8, r1	; 0x08
     54e:	08 95       	ret

00000550 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	9c 01       	movw	r18, r24
     556:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     558:	dc 01       	movw	r26, r24
     55a:	11 96       	adiw	r26, 0x01	; 1
     55c:	cd 91       	ld	r28, X+
     55e:	dc 91       	ld	r29, X
     560:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     562:	d3 83       	std	Z+3, r29	; 0x03
     564:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     566:	8c 81       	ldd	r24, Y+4	; 0x04
     568:	9d 81       	ldd	r25, Y+5	; 0x05
     56a:	95 83       	std	Z+5, r25	; 0x05
     56c:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     56e:	8c 81       	ldd	r24, Y+4	; 0x04
     570:	9d 81       	ldd	r25, Y+5	; 0x05
     572:	dc 01       	movw	r26, r24
     574:	13 96       	adiw	r26, 0x03	; 3
     576:	7c 93       	st	X, r23
     578:	6e 93       	st	-X, r22
     57a:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     57c:	7d 83       	std	Y+5, r23	; 0x05
     57e:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     580:	31 87       	std	Z+9, r19	; 0x09
     582:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     584:	f9 01       	movw	r30, r18
     586:	80 81       	ld	r24, Z
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	80 83       	st	Z, r24
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     598:	48 81       	ld	r20, Y
     59a:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     59c:	4f 3f       	cpi	r20, 0xFF	; 255
     59e:	2f ef       	ldi	r18, 0xFF	; 255
     5a0:	52 07       	cpc	r21, r18
     5a2:	21 f4       	brne	.+8      	; 0x5ac <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     5a4:	fc 01       	movw	r30, r24
     5a6:	a7 81       	ldd	r26, Z+7	; 0x07
     5a8:	b0 85       	ldd	r27, Z+8	; 0x08
     5aa:	0d c0       	rjmp	.+26     	; 0x5c6 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5ac:	dc 01       	movw	r26, r24
     5ae:	13 96       	adiw	r26, 0x03	; 3
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <vListInsert+0x22>
     5b2:	df 01       	movw	r26, r30
     5b4:	12 96       	adiw	r26, 0x02	; 2
     5b6:	ed 91       	ld	r30, X+
     5b8:	fc 91       	ld	r31, X
     5ba:	13 97       	sbiw	r26, 0x03	; 3
     5bc:	20 81       	ld	r18, Z
     5be:	31 81       	ldd	r19, Z+1	; 0x01
     5c0:	42 17       	cp	r20, r18
     5c2:	53 07       	cpc	r21, r19
     5c4:	b0 f7       	brcc	.-20     	; 0x5b2 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     5c6:	12 96       	adiw	r26, 0x02	; 2
     5c8:	ed 91       	ld	r30, X+
     5ca:	fc 91       	ld	r31, X
     5cc:	13 97       	sbiw	r26, 0x03	; 3
     5ce:	fb 83       	std	Y+3, r31	; 0x03
     5d0:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5d2:	d5 83       	std	Z+5, r29	; 0x05
     5d4:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     5d6:	bd 83       	std	Y+5, r27	; 0x05
     5d8:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     5da:	13 96       	adiw	r26, 0x03	; 3
     5dc:	dc 93       	st	X, r29
     5de:	ce 93       	st	-X, r28
     5e0:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     5e2:	99 87       	std	Y+9, r25	; 0x09
     5e4:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 81       	ld	r18, Z
     5ea:	2f 5f       	subi	r18, 0xFF	; 255
     5ec:	20 83       	st	Z, r18
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     5fa:	a0 85       	ldd	r26, Z+8	; 0x08
     5fc:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5fe:	c2 81       	ldd	r28, Z+2	; 0x02
     600:	d3 81       	ldd	r29, Z+3	; 0x03
     602:	84 81       	ldd	r24, Z+4	; 0x04
     604:	95 81       	ldd	r25, Z+5	; 0x05
     606:	9d 83       	std	Y+5, r25	; 0x05
     608:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     60a:	c4 81       	ldd	r28, Z+4	; 0x04
     60c:	d5 81       	ldd	r29, Z+5	; 0x05
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	9b 83       	std	Y+3, r25	; 0x03
     614:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     616:	11 96       	adiw	r26, 0x01	; 1
     618:	8d 91       	ld	r24, X+
     61a:	9c 91       	ld	r25, X
     61c:	12 97       	sbiw	r26, 0x02	; 2
     61e:	e8 17       	cp	r30, r24
     620:	f9 07       	cpc	r31, r25
     622:	31 f4       	brne	.+12     	; 0x630 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     624:	84 81       	ldd	r24, Z+4	; 0x04
     626:	95 81       	ldd	r25, Z+5	; 0x05
     628:	12 96       	adiw	r26, 0x02	; 2
     62a:	9c 93       	st	X, r25
     62c:	8e 93       	st	-X, r24
     62e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     630:	11 86       	std	Z+9, r1	; 0x09
     632:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     634:	8c 91       	ld	r24, X
     636:	81 50       	subi	r24, 0x01	; 1
     638:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     640:	1b bc       	out	0x2b, r1	; 43
     642:	89 ef       	ldi	r24, 0xF9	; 249
     644:	8a bd       	out	0x2a, r24	; 42
     646:	8b e0       	ldi	r24, 0x0B	; 11
     648:	8e bd       	out	0x2e, r24	; 46
     64a:	89 b7       	in	r24, 0x39	; 57
     64c:	80 61       	ori	r24, 0x10	; 16
     64e:	89 bf       	out	0x39, r24	; 57
     650:	08 95       	ret

00000652 <pxPortInitialiseStack>:
     652:	31 e1       	ldi	r19, 0x11	; 17
     654:	fc 01       	movw	r30, r24
     656:	30 83       	st	Z, r19
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	22 e2       	ldi	r18, 0x22	; 34
     65c:	20 83       	st	Z, r18
     65e:	31 97       	sbiw	r30, 0x01	; 1
     660:	a3 e3       	ldi	r26, 0x33	; 51
     662:	a0 83       	st	Z, r26
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	60 83       	st	Z, r22
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	70 83       	st	Z, r23
     66c:	31 97       	sbiw	r30, 0x01	; 1
     66e:	10 82       	st	Z, r1
     670:	31 97       	sbiw	r30, 0x01	; 1
     672:	60 e8       	ldi	r22, 0x80	; 128
     674:	60 83       	st	Z, r22
     676:	31 97       	sbiw	r30, 0x01	; 1
     678:	10 82       	st	Z, r1
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	62 e0       	ldi	r22, 0x02	; 2
     67e:	60 83       	st	Z, r22
     680:	31 97       	sbiw	r30, 0x01	; 1
     682:	63 e0       	ldi	r22, 0x03	; 3
     684:	60 83       	st	Z, r22
     686:	31 97       	sbiw	r30, 0x01	; 1
     688:	64 e0       	ldi	r22, 0x04	; 4
     68a:	60 83       	st	Z, r22
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	65 e0       	ldi	r22, 0x05	; 5
     690:	60 83       	st	Z, r22
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	66 e0       	ldi	r22, 0x06	; 6
     696:	60 83       	st	Z, r22
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	60 83       	st	Z, r22
     69e:	31 97       	sbiw	r30, 0x01	; 1
     6a0:	68 e0       	ldi	r22, 0x08	; 8
     6a2:	60 83       	st	Z, r22
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	69 e0       	ldi	r22, 0x09	; 9
     6a8:	60 83       	st	Z, r22
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	60 e1       	ldi	r22, 0x10	; 16
     6ae:	60 83       	st	Z, r22
     6b0:	31 97       	sbiw	r30, 0x01	; 1
     6b2:	30 83       	st	Z, r19
     6b4:	31 97       	sbiw	r30, 0x01	; 1
     6b6:	32 e1       	ldi	r19, 0x12	; 18
     6b8:	30 83       	st	Z, r19
     6ba:	31 97       	sbiw	r30, 0x01	; 1
     6bc:	33 e1       	ldi	r19, 0x13	; 19
     6be:	30 83       	st	Z, r19
     6c0:	31 97       	sbiw	r30, 0x01	; 1
     6c2:	34 e1       	ldi	r19, 0x14	; 20
     6c4:	30 83       	st	Z, r19
     6c6:	31 97       	sbiw	r30, 0x01	; 1
     6c8:	35 e1       	ldi	r19, 0x15	; 21
     6ca:	30 83       	st	Z, r19
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	36 e1       	ldi	r19, 0x16	; 22
     6d0:	30 83       	st	Z, r19
     6d2:	31 97       	sbiw	r30, 0x01	; 1
     6d4:	37 e1       	ldi	r19, 0x17	; 23
     6d6:	30 83       	st	Z, r19
     6d8:	31 97       	sbiw	r30, 0x01	; 1
     6da:	38 e1       	ldi	r19, 0x18	; 24
     6dc:	30 83       	st	Z, r19
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	39 e1       	ldi	r19, 0x19	; 25
     6e2:	30 83       	st	Z, r19
     6e4:	31 97       	sbiw	r30, 0x01	; 1
     6e6:	30 e2       	ldi	r19, 0x20	; 32
     6e8:	30 83       	st	Z, r19
     6ea:	31 97       	sbiw	r30, 0x01	; 1
     6ec:	31 e2       	ldi	r19, 0x21	; 33
     6ee:	30 83       	st	Z, r19
     6f0:	31 97       	sbiw	r30, 0x01	; 1
     6f2:	20 83       	st	Z, r18
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	23 e2       	ldi	r18, 0x23	; 35
     6f8:	20 83       	st	Z, r18
     6fa:	31 97       	sbiw	r30, 0x01	; 1
     6fc:	40 83       	st	Z, r20
     6fe:	31 97       	sbiw	r30, 0x01	; 1
     700:	50 83       	st	Z, r21
     702:	31 97       	sbiw	r30, 0x01	; 1
     704:	26 e2       	ldi	r18, 0x26	; 38
     706:	20 83       	st	Z, r18
     708:	31 97       	sbiw	r30, 0x01	; 1
     70a:	27 e2       	ldi	r18, 0x27	; 39
     70c:	20 83       	st	Z, r18
     70e:	31 97       	sbiw	r30, 0x01	; 1
     710:	28 e2       	ldi	r18, 0x28	; 40
     712:	20 83       	st	Z, r18
     714:	31 97       	sbiw	r30, 0x01	; 1
     716:	29 e2       	ldi	r18, 0x29	; 41
     718:	20 83       	st	Z, r18
     71a:	31 97       	sbiw	r30, 0x01	; 1
     71c:	20 e3       	ldi	r18, 0x30	; 48
     71e:	20 83       	st	Z, r18
     720:	31 97       	sbiw	r30, 0x01	; 1
     722:	21 e3       	ldi	r18, 0x31	; 49
     724:	20 83       	st	Z, r18
     726:	86 97       	sbiw	r24, 0x26	; 38
     728:	08 95       	ret

0000072a <xPortStartScheduler>:
     72a:	0e 94 20 03 	call	0x640	; 0x640 <prvSetupTimerInterrupt>
     72e:	a0 91 12 07 	lds	r26, 0x0712	; 0x800712 <pxCurrentTCB>
     732:	b0 91 13 07 	lds	r27, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     736:	cd 91       	ld	r28, X+
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	dd 91       	ld	r29, X+
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	bf 91       	pop	r27
     748:	af 91       	pop	r26
     74a:	9f 91       	pop	r25
     74c:	8f 91       	pop	r24
     74e:	7f 91       	pop	r23
     750:	6f 91       	pop	r22
     752:	5f 91       	pop	r21
     754:	4f 91       	pop	r20
     756:	3f 91       	pop	r19
     758:	2f 91       	pop	r18
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	bf 90       	pop	r11
     768:	af 90       	pop	r10
     76a:	9f 90       	pop	r9
     76c:	8f 90       	pop	r8
     76e:	7f 90       	pop	r7
     770:	6f 90       	pop	r6
     772:	5f 90       	pop	r5
     774:	4f 90       	pop	r4
     776:	3f 90       	pop	r3
     778:	2f 90       	pop	r2
     77a:	1f 90       	pop	r1
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	0f 90       	pop	r0
     782:	08 95       	ret
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	08 95       	ret

00000788 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	0f 92       	push	r0
     790:	1f 92       	push	r1
     792:	11 24       	eor	r1, r1
     794:	2f 92       	push	r2
     796:	3f 92       	push	r3
     798:	4f 92       	push	r4
     79a:	5f 92       	push	r5
     79c:	6f 92       	push	r6
     79e:	7f 92       	push	r7
     7a0:	8f 92       	push	r8
     7a2:	9f 92       	push	r9
     7a4:	af 92       	push	r10
     7a6:	bf 92       	push	r11
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	2f 93       	push	r18
     7b6:	3f 93       	push	r19
     7b8:	4f 93       	push	r20
     7ba:	5f 93       	push	r21
     7bc:	6f 93       	push	r22
     7be:	7f 93       	push	r23
     7c0:	8f 93       	push	r24
     7c2:	9f 93       	push	r25
     7c4:	af 93       	push	r26
     7c6:	bf 93       	push	r27
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	ef 93       	push	r30
     7ce:	ff 93       	push	r31
     7d0:	a0 91 12 07 	lds	r26, 0x0712	; 0x800712 <pxCurrentTCB>
     7d4:	b0 91 13 07 	lds	r27, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     7d8:	0d b6       	in	r0, 0x3d	; 61
     7da:	0d 92       	st	X+, r0
     7dc:	0e b6       	in	r0, 0x3e	; 62
     7de:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     7e0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     7e4:	a0 91 12 07 	lds	r26, 0x0712	; 0x800712 <pxCurrentTCB>
     7e8:	b0 91 13 07 	lds	r27, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     7ec:	cd 91       	ld	r28, X+
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	dd 91       	ld	r29, X+
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	ff 91       	pop	r31
     7f6:	ef 91       	pop	r30
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	bf 91       	pop	r27
     7fe:	af 91       	pop	r26
     800:	9f 91       	pop	r25
     802:	8f 91       	pop	r24
     804:	7f 91       	pop	r23
     806:	6f 91       	pop	r22
     808:	5f 91       	pop	r21
     80a:	4f 91       	pop	r20
     80c:	3f 91       	pop	r19
     80e:	2f 91       	pop	r18
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	bf 90       	pop	r11
     81e:	af 90       	pop	r10
     820:	9f 90       	pop	r9
     822:	8f 90       	pop	r8
     824:	7f 90       	pop	r7
     826:	6f 90       	pop	r6
     828:	5f 90       	pop	r5
     82a:	4f 90       	pop	r4
     82c:	3f 90       	pop	r3
     82e:	2f 90       	pop	r2
     830:	1f 90       	pop	r1
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0

	asm volatile ( "ret" );
     838:	08 95       	ret

0000083a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     83a:	0f 92       	push	r0
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	0f 92       	push	r0
     842:	1f 92       	push	r1
     844:	11 24       	eor	r1, r1
     846:	2f 92       	push	r2
     848:	3f 92       	push	r3
     84a:	4f 92       	push	r4
     84c:	5f 92       	push	r5
     84e:	6f 92       	push	r6
     850:	7f 92       	push	r7
     852:	8f 92       	push	r8
     854:	9f 92       	push	r9
     856:	af 92       	push	r10
     858:	bf 92       	push	r11
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	2f 93       	push	r18
     868:	3f 93       	push	r19
     86a:	4f 93       	push	r20
     86c:	5f 93       	push	r21
     86e:	6f 93       	push	r22
     870:	7f 93       	push	r23
     872:	8f 93       	push	r24
     874:	9f 93       	push	r25
     876:	af 93       	push	r26
     878:	bf 93       	push	r27
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	ef 93       	push	r30
     880:	ff 93       	push	r31
     882:	a0 91 12 07 	lds	r26, 0x0712	; 0x800712 <pxCurrentTCB>
     886:	b0 91 13 07 	lds	r27, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     88a:	0d b6       	in	r0, 0x3d	; 61
     88c:	0d 92       	st	X+, r0
     88e:	0e b6       	in	r0, 0x3e	; 62
     890:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     892:	0e 94 81 06 	call	0xd02	; 0xd02 <xTaskIncrementTick>
     896:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     898:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     89c:	a0 91 12 07 	lds	r26, 0x0712	; 0x800712 <pxCurrentTCB>
     8a0:	b0 91 13 07 	lds	r27, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     8a4:	cd 91       	ld	r28, X+
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	dd 91       	ld	r29, X+
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	ff 91       	pop	r31
     8ae:	ef 91       	pop	r30
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	bf 91       	pop	r27
     8b6:	af 91       	pop	r26
     8b8:	9f 91       	pop	r25
     8ba:	8f 91       	pop	r24
     8bc:	7f 91       	pop	r23
     8be:	6f 91       	pop	r22
     8c0:	5f 91       	pop	r21
     8c2:	4f 91       	pop	r20
     8c4:	3f 91       	pop	r19
     8c6:	2f 91       	pop	r18
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	df 90       	pop	r13
     8d2:	cf 90       	pop	r12
     8d4:	bf 90       	pop	r11
     8d6:	af 90       	pop	r10
     8d8:	9f 90       	pop	r9
     8da:	8f 90       	pop	r8
     8dc:	7f 90       	pop	r7
     8de:	6f 90       	pop	r6
     8e0:	5f 90       	pop	r5
     8e2:	4f 90       	pop	r4
     8e4:	3f 90       	pop	r3
     8e6:	2f 90       	pop	r2
     8e8:	1f 90       	pop	r1
     8ea:	0f 90       	pop	r0
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	0f 90       	pop	r0

	asm volatile ( "ret" );
     8f0:	08 95       	ret

000008f2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     8f2:	0e 94 1d 04 	call	0x83a	; 0x83a <vPortYieldFromTick>
		asm volatile ( "reti" );
     8f6:	18 95       	reti

000008f8 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     8f8:	e0 91 bf 06 	lds	r30, 0x06BF	; 0x8006bf <pxDelayedTaskList>
     8fc:	f0 91 c0 06 	lds	r31, 0x06C0	; 0x8006c0 <pxDelayedTaskList+0x1>
     900:	80 81       	ld	r24, Z
     902:	81 11       	cpse	r24, r1
     904:	07 c0       	rjmp	.+14     	; 0x914 <prvResetNextTaskUnblockTime+0x1c>
     906:	8f ef       	ldi	r24, 0xFF	; 255
     908:	9f ef       	ldi	r25, 0xFF	; 255
     90a:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <xNextTaskUnblockTime+0x1>
     90e:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <xNextTaskUnblockTime>
     912:	08 95       	ret
     914:	e0 91 bf 06 	lds	r30, 0x06BF	; 0x8006bf <pxDelayedTaskList>
     918:	f0 91 c0 06 	lds	r31, 0x06C0	; 0x8006c0 <pxDelayedTaskList+0x1>
     91c:	05 80       	ldd	r0, Z+5	; 0x05
     91e:	f6 81       	ldd	r31, Z+6	; 0x06
     920:	e0 2d       	mov	r30, r0
     922:	06 80       	ldd	r0, Z+6	; 0x06
     924:	f7 81       	ldd	r31, Z+7	; 0x07
     926:	e0 2d       	mov	r30, r0
     928:	82 81       	ldd	r24, Z+2	; 0x02
     92a:	93 81       	ldd	r25, Z+3	; 0x03
     92c:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <xNextTaskUnblockTime+0x1>
     930:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <xNextTaskUnblockTime>
     934:	08 95       	ret

00000936 <prvDeleteTCB>:
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vPortFree>
     944:	ce 01       	movw	r24, r28
     946:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vPortFree>
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <prvInitialiseNewTask>:
     950:	6f 92       	push	r6
     952:	7f 92       	push	r7
     954:	8f 92       	push	r8
     956:	9f 92       	push	r9
     958:	af 92       	push	r10
     95a:	bf 92       	push	r11
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
     96e:	4c 01       	movw	r8, r24
     970:	f5 01       	movw	r30, r10
     972:	87 89       	ldd	r24, Z+23	; 0x17
     974:	90 8d       	ldd	r25, Z+24	; 0x18
     976:	21 50       	subi	r18, 0x01	; 1
     978:	31 09       	sbc	r19, r1
     97a:	3c 01       	movw	r6, r24
     97c:	62 0e       	add	r6, r18
     97e:	73 1e       	adc	r7, r19
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	0f c0       	rjmp	.+30     	; 0x9a2 <prvInitialiseNewTask+0x52>
     984:	82 2f       	mov	r24, r18
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	fb 01       	movw	r30, r22
     98a:	e8 0f       	add	r30, r24
     98c:	f9 1f       	adc	r31, r25
     98e:	30 81       	ld	r19, Z
     990:	d5 01       	movw	r26, r10
     992:	a8 0f       	add	r26, r24
     994:	b9 1f       	adc	r27, r25
     996:	59 96       	adiw	r26, 0x19	; 25
     998:	3c 93       	st	X, r19
     99a:	80 81       	ld	r24, Z
     99c:	88 23       	and	r24, r24
     99e:	19 f0       	breq	.+6      	; 0x9a6 <prvInitialiseNewTask+0x56>
     9a0:	2f 5f       	subi	r18, 0xFF	; 255
     9a2:	20 31       	cpi	r18, 0x10	; 16
     9a4:	78 f3       	brcs	.-34     	; 0x984 <prvInitialiseNewTask+0x34>
     9a6:	f5 01       	movw	r30, r10
     9a8:	10 a6       	std	Z+40, r1	; 0x28
     9aa:	f6 e0       	ldi	r31, 0x06	; 6
     9ac:	fe 15       	cp	r31, r14
     9ae:	20 f4       	brcc	.+8      	; 0x9b8 <prvInitialiseNewTask+0x68>
     9b0:	0f 2e       	mov	r0, r31
     9b2:	f6 e0       	ldi	r31, 0x06	; 6
     9b4:	ef 2e       	mov	r14, r31
     9b6:	f0 2d       	mov	r31, r0
     9b8:	f5 01       	movw	r30, r10
     9ba:	e6 8a       	std	Z+22, r14	; 0x16
     9bc:	c5 01       	movw	r24, r10
     9be:	02 96       	adiw	r24, 0x02	; 2
     9c0:	0e 94 a4 02 	call	0x548	; 0x548 <vListInitialiseItem>
     9c4:	c5 01       	movw	r24, r10
     9c6:	0c 96       	adiw	r24, 0x0c	; 12
     9c8:	0e 94 a4 02 	call	0x548	; 0x548 <vListInitialiseItem>
     9cc:	f5 01       	movw	r30, r10
     9ce:	b1 86       	std	Z+9, r11	; 0x09
     9d0:	a0 86       	std	Z+8, r10	; 0x08
     9d2:	87 e0       	ldi	r24, 0x07	; 7
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	8e 19       	sub	r24, r14
     9d8:	91 09       	sbc	r25, r1
     9da:	95 87       	std	Z+13, r25	; 0x0d
     9dc:	84 87       	std	Z+12, r24	; 0x0c
     9de:	b3 8a       	std	Z+19, r11	; 0x13
     9e0:	a2 8a       	std	Z+18, r10	; 0x12
     9e2:	11 a6       	std	Z+41, r1	; 0x29
     9e4:	12 a6       	std	Z+42, r1	; 0x2a
     9e6:	13 a6       	std	Z+43, r1	; 0x2b
     9e8:	14 a6       	std	Z+44, r1	; 0x2c
     9ea:	15 a6       	std	Z+45, r1	; 0x2d
     9ec:	a8 01       	movw	r20, r16
     9ee:	b4 01       	movw	r22, r8
     9f0:	c3 01       	movw	r24, r6
     9f2:	0e 94 29 03 	call	0x652	; 0x652 <pxPortInitialiseStack>
     9f6:	f5 01       	movw	r30, r10
     9f8:	91 83       	std	Z+1, r25	; 0x01
     9fa:	80 83       	st	Z, r24
     9fc:	c1 14       	cp	r12, r1
     9fe:	d1 04       	cpc	r13, r1
     a00:	19 f0       	breq	.+6      	; 0xa08 <prvInitialiseNewTask+0xb8>
     a02:	f6 01       	movw	r30, r12
     a04:	b1 82       	std	Z+1, r11	; 0x01
     a06:	a0 82       	st	Z, r10
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	bf 90       	pop	r11
     a18:	af 90       	pop	r10
     a1a:	9f 90       	pop	r9
     a1c:	8f 90       	pop	r8
     a1e:	7f 90       	pop	r7
     a20:	6f 90       	pop	r6
     a22:	08 95       	ret

00000a24 <prvInitialiseTaskLists>:
     a24:	cf 93       	push	r28
     a26:	c0 e0       	ldi	r28, 0x00	; 0
     a28:	10 c0       	rjmp	.+32     	; 0xa4a <prvInitialiseTaskLists+0x26>
     a2a:	8c 2f       	mov	r24, r28
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	9c 01       	movw	r18, r24
     a30:	22 0f       	add	r18, r18
     a32:	33 1f       	adc	r19, r19
     a34:	22 0f       	add	r18, r18
     a36:	33 1f       	adc	r19, r19
     a38:	22 0f       	add	r18, r18
     a3a:	33 1f       	adc	r19, r19
     a3c:	82 0f       	add	r24, r18
     a3e:	93 1f       	adc	r25, r19
     a40:	8d 52       	subi	r24, 0x2D	; 45
     a42:	99 4f       	sbci	r25, 0xF9	; 249
     a44:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a48:	cf 5f       	subi	r28, 0xFF	; 255
     a4a:	c7 30       	cpi	r28, 0x07	; 7
     a4c:	70 f3       	brcs	.-36     	; 0xa2a <prvInitialiseTaskLists+0x6>
     a4e:	8a ec       	ldi	r24, 0xCA	; 202
     a50:	96 e0       	ldi	r25, 0x06	; 6
     a52:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a56:	81 ec       	ldi	r24, 0xC1	; 193
     a58:	96 e0       	ldi	r25, 0x06	; 6
     a5a:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a5e:	84 eb       	ldi	r24, 0xB4	; 180
     a60:	96 e0       	ldi	r25, 0x06	; 6
     a62:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a66:	8b ea       	ldi	r24, 0xAB	; 171
     a68:	96 e0       	ldi	r25, 0x06	; 6
     a6a:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a6e:	81 ea       	ldi	r24, 0xA1	; 161
     a70:	96 e0       	ldi	r25, 0x06	; 6
     a72:	0e 94 96 02 	call	0x52c	; 0x52c <vListInitialise>
     a76:	8a ec       	ldi	r24, 0xCA	; 202
     a78:	96 e0       	ldi	r25, 0x06	; 6
     a7a:	90 93 c0 06 	sts	0x06C0, r25	; 0x8006c0 <pxDelayedTaskList+0x1>
     a7e:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <pxDelayedTaskList>
     a82:	81 ec       	ldi	r24, 0xC1	; 193
     a84:	96 e0       	ldi	r25, 0x06	; 6
     a86:	90 93 be 06 	sts	0x06BE, r25	; 0x8006be <pxOverflowDelayedTaskList+0x1>
     a8a:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <pxOverflowDelayedTaskList>
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <prvAddNewTaskToReadyList>:
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	ec 01       	movw	r28, r24
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	0f 92       	push	r0
     a9e:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <uxCurrentNumberOfTasks>
     aa2:	8f 5f       	subi	r24, 0xFF	; 255
     aa4:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <uxCurrentNumberOfTasks>
     aa8:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <pxCurrentTCB>
     aac:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     ab0:	89 2b       	or	r24, r25
     ab2:	59 f4       	brne	.+22     	; 0xaca <prvAddNewTaskToReadyList+0x38>
     ab4:	d0 93 13 07 	sts	0x0713, r29	; 0x800713 <pxCurrentTCB+0x1>
     ab8:	c0 93 12 07 	sts	0x0712, r28	; 0x800712 <pxCurrentTCB>
     abc:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <uxCurrentNumberOfTasks>
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	99 f4       	brne	.+38     	; 0xaea <prvAddNewTaskToReadyList+0x58>
     ac4:	0e 94 12 05 	call	0xa24	; 0xa24 <prvInitialiseTaskLists>
     ac8:	10 c0       	rjmp	.+32     	; 0xaea <prvAddNewTaskToReadyList+0x58>
     aca:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <xSchedulerRunning>
     ace:	81 11       	cpse	r24, r1
     ad0:	0c c0       	rjmp	.+24     	; 0xaea <prvAddNewTaskToReadyList+0x58>
     ad2:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxCurrentTCB>
     ad6:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     ada:	96 89       	ldd	r25, Z+22	; 0x16
     adc:	8e 89       	ldd	r24, Y+22	; 0x16
     ade:	89 17       	cp	r24, r25
     ae0:	20 f0       	brcs	.+8      	; 0xaea <prvAddNewTaskToReadyList+0x58>
     ae2:	d0 93 13 07 	sts	0x0713, r29	; 0x800713 <pxCurrentTCB+0x1>
     ae6:	c0 93 12 07 	sts	0x0712, r28	; 0x800712 <pxCurrentTCB>
     aea:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <uxTaskNumber>
     aee:	8f 5f       	subi	r24, 0xFF	; 255
     af0:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <uxTaskNumber>
     af4:	8e 89       	ldd	r24, Y+22	; 0x16
     af6:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <uxTopReadyPriority>
     afa:	98 17       	cp	r25, r24
     afc:	10 f4       	brcc	.+4      	; 0xb02 <prvAddNewTaskToReadyList+0x70>
     afe:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <uxTopReadyPriority>
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	9c 01       	movw	r18, r24
     b06:	22 0f       	add	r18, r18
     b08:	33 1f       	adc	r19, r19
     b0a:	22 0f       	add	r18, r18
     b0c:	33 1f       	adc	r19, r19
     b0e:	22 0f       	add	r18, r18
     b10:	33 1f       	adc	r19, r19
     b12:	82 0f       	add	r24, r18
     b14:	93 1f       	adc	r25, r19
     b16:	be 01       	movw	r22, r28
     b18:	6e 5f       	subi	r22, 0xFE	; 254
     b1a:	7f 4f       	sbci	r23, 0xFF	; 255
     b1c:	8d 52       	subi	r24, 0x2D	; 45
     b1e:	99 4f       	sbci	r25, 0xF9	; 249
     b20:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <xSchedulerRunning>
     b2c:	88 23       	and	r24, r24
     b2e:	51 f0       	breq	.+20     	; 0xb44 <prvAddNewTaskToReadyList+0xb2>
     b30:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxCurrentTCB>
     b34:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     b38:	96 89       	ldd	r25, Z+22	; 0x16
     b3a:	8e 89       	ldd	r24, Y+22	; 0x16
     b3c:	98 17       	cp	r25, r24
     b3e:	10 f4       	brcc	.+4      	; 0xb44 <prvAddNewTaskToReadyList+0xb2>
     b40:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	08 95       	ret

00000b4a <prvAddCurrentTaskToDelayedList>:
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	ec 01       	movw	r28, r24
     b56:	f6 2e       	mov	r15, r22
     b58:	00 91 9e 06 	lds	r16, 0x069E	; 0x80069e <xTickCount>
     b5c:	10 91 9f 06 	lds	r17, 0x069F	; 0x80069f <xTickCount+0x1>
     b60:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <pxCurrentTCB>
     b64:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     b68:	02 96       	adiw	r24, 0x02	; 2
     b6a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     b6e:	cf 3f       	cpi	r28, 0xFF	; 255
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	d8 07       	cpc	r29, r24
     b74:	69 f4       	brne	.+26     	; 0xb90 <prvAddCurrentTaskToDelayedList+0x46>
     b76:	ff 20       	and	r15, r15
     b78:	59 f0       	breq	.+22     	; 0xb90 <prvAddCurrentTaskToDelayedList+0x46>
     b7a:	60 91 12 07 	lds	r22, 0x0712	; 0x800712 <pxCurrentTCB>
     b7e:	70 91 13 07 	lds	r23, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     b82:	6e 5f       	subi	r22, 0xFE	; 254
     b84:	7f 4f       	sbci	r23, 0xFF	; 255
     b86:	81 ea       	ldi	r24, 0xA1	; 161
     b88:	96 e0       	ldi	r25, 0x06	; 6
     b8a:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     b8e:	2f c0       	rjmp	.+94     	; 0xbee <prvAddCurrentTaskToDelayedList+0xa4>
     b90:	c0 0f       	add	r28, r16
     b92:	d1 1f       	adc	r29, r17
     b94:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxCurrentTCB>
     b98:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     b9c:	d3 83       	std	Z+3, r29	; 0x03
     b9e:	c2 83       	std	Z+2, r28	; 0x02
     ba0:	c0 17       	cp	r28, r16
     ba2:	d1 07       	cpc	r29, r17
     ba4:	68 f4       	brcc	.+26     	; 0xbc0 <prvAddCurrentTaskToDelayedList+0x76>
     ba6:	60 91 12 07 	lds	r22, 0x0712	; 0x800712 <pxCurrentTCB>
     baa:	70 91 13 07 	lds	r23, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     bae:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <pxOverflowDelayedTaskList>
     bb2:	90 91 be 06 	lds	r25, 0x06BE	; 0x8006be <pxOverflowDelayedTaskList+0x1>
     bb6:	6e 5f       	subi	r22, 0xFE	; 254
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	0e 94 c9 02 	call	0x592	; 0x592 <vListInsert>
     bbe:	17 c0       	rjmp	.+46     	; 0xbee <prvAddCurrentTaskToDelayedList+0xa4>
     bc0:	60 91 12 07 	lds	r22, 0x0712	; 0x800712 <pxCurrentTCB>
     bc4:	70 91 13 07 	lds	r23, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     bc8:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <pxDelayedTaskList>
     bcc:	90 91 c0 06 	lds	r25, 0x06C0	; 0x8006c0 <pxDelayedTaskList+0x1>
     bd0:	6e 5f       	subi	r22, 0xFE	; 254
     bd2:	7f 4f       	sbci	r23, 0xFF	; 255
     bd4:	0e 94 c9 02 	call	0x592	; 0x592 <vListInsert>
     bd8:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <xNextTaskUnblockTime>
     bdc:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <xNextTaskUnblockTime+0x1>
     be0:	c8 17       	cp	r28, r24
     be2:	d9 07       	cpc	r29, r25
     be4:	20 f4       	brcc	.+8      	; 0xbee <prvAddCurrentTaskToDelayedList+0xa4>
     be6:	d0 93 97 06 	sts	0x0697, r29	; 0x800697 <xNextTaskUnblockTime+0x1>
     bea:	c0 93 96 06 	sts	0x0696, r28	; 0x800696 <xNextTaskUnblockTime>
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ff 90       	pop	r15
     bf8:	08 95       	ret

00000bfa <xTaskCreate>:
     bfa:	2f 92       	push	r2
     bfc:	3f 92       	push	r3
     bfe:	4f 92       	push	r4
     c00:	5f 92       	push	r5
     c02:	6f 92       	push	r6
     c04:	7f 92       	push	r7
     c06:	8f 92       	push	r8
     c08:	9f 92       	push	r9
     c0a:	af 92       	push	r10
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	3c 01       	movw	r6, r24
     c20:	1b 01       	movw	r2, r22
     c22:	5a 01       	movw	r10, r20
     c24:	29 01       	movw	r4, r18
     c26:	ca 01       	movw	r24, r20
     c28:	0e 94 e7 01 	call	0x3ce	; 0x3ce <pvPortMalloc>
     c2c:	6c 01       	movw	r12, r24
     c2e:	89 2b       	or	r24, r25
     c30:	71 f0       	breq	.+28     	; 0xc4e <xTaskCreate+0x54>
     c32:	8e e2       	ldi	r24, 0x2E	; 46
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 e7 01 	call	0x3ce	; 0x3ce <pvPortMalloc>
     c3a:	ec 01       	movw	r28, r24
     c3c:	89 2b       	or	r24, r25
     c3e:	19 f0       	breq	.+6      	; 0xc46 <xTaskCreate+0x4c>
     c40:	d8 8e       	std	Y+24, r13	; 0x18
     c42:	cf 8a       	std	Y+23, r12	; 0x17
     c44:	06 c0       	rjmp	.+12     	; 0xc52 <xTaskCreate+0x58>
     c46:	c6 01       	movw	r24, r12
     c48:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vPortFree>
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <xTaskCreate+0x58>
     c4e:	c0 e0       	ldi	r28, 0x00	; 0
     c50:	d0 e0       	ldi	r29, 0x00	; 0
     c52:	20 97       	sbiw	r28, 0x00	; 0
     c54:	91 f0       	breq	.+36     	; 0xc7a <xTaskCreate+0x80>
     c56:	95 01       	movw	r18, r10
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	81 2c       	mov	r8, r1
     c5e:	91 2c       	mov	r9, r1
     c60:	5e 01       	movw	r10, r28
     c62:	67 01       	movw	r12, r14
     c64:	e0 2e       	mov	r14, r16
     c66:	82 01       	movw	r16, r4
     c68:	b1 01       	movw	r22, r2
     c6a:	c3 01       	movw	r24, r6
     c6c:	0e 94 a8 04 	call	0x950	; 0x950 <prvInitialiseNewTask>
     c70:	ce 01       	movw	r24, r28
     c72:	0e 94 49 05 	call	0xa92	; 0xa92 <prvAddNewTaskToReadyList>
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <xTaskCreate+0x82>
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	cf 90       	pop	r12
     c8c:	bf 90       	pop	r11
     c8e:	af 90       	pop	r10
     c90:	9f 90       	pop	r9
     c92:	8f 90       	pop	r8
     c94:	7f 90       	pop	r7
     c96:	6f 90       	pop	r6
     c98:	5f 90       	pop	r5
     c9a:	4f 90       	pop	r4
     c9c:	3f 90       	pop	r3
     c9e:	2f 90       	pop	r2
     ca0:	08 95       	ret

00000ca2 <vTaskStartScheduler>:
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	0f 2e       	mov	r0, r31
     caa:	f4 e9       	ldi	r31, 0x94	; 148
     cac:	ef 2e       	mov	r14, r31
     cae:	f6 e0       	ldi	r31, 0x06	; 6
     cb0:	ff 2e       	mov	r15, r31
     cb2:	f0 2d       	mov	r31, r0
     cb4:	00 e0       	ldi	r16, 0x00	; 0
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	4a ef       	ldi	r20, 0xFA	; 250
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	62 e6       	ldi	r22, 0x62	; 98
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	81 ef       	ldi	r24, 0xF1	; 241
     cc4:	97 e0       	ldi	r25, 0x07	; 7
     cc6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <xTaskCreate>
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	81 f4       	brne	.+32     	; 0xcee <vTaskStartScheduler+0x4c>
     cce:	f8 94       	cli
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	9f ef       	ldi	r25, 0xFF	; 255
     cd4:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <xNextTaskUnblockTime+0x1>
     cd8:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <xNextTaskUnblockTime>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <xSchedulerRunning>
     ce2:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <xTickCount+0x1>
     ce6:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <xTickCount>
     cea:	0e 94 95 03 	call	0x72a	; 0x72a <xPortStartScheduler>
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	08 95       	ret

00000cf6 <vTaskSuspendAll>:
     cf6:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxSchedulerSuspended>
     cfa:	8f 5f       	subi	r24, 0xFF	; 255
     cfc:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <uxSchedulerSuspended>
     d00:	08 95       	ret

00000d02 <xTaskIncrementTick>:
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxSchedulerSuspended>
     d14:	81 11       	cpse	r24, r1
     d16:	97 c0       	rjmp	.+302    	; 0xe46 <xTaskIncrementTick+0x144>
     d18:	e0 90 9e 06 	lds	r14, 0x069E	; 0x80069e <xTickCount>
     d1c:	f0 90 9f 06 	lds	r15, 0x069F	; 0x80069f <xTickCount+0x1>
     d20:	8f ef       	ldi	r24, 0xFF	; 255
     d22:	e8 1a       	sub	r14, r24
     d24:	f8 0a       	sbc	r15, r24
     d26:	f0 92 9f 06 	sts	0x069F, r15	; 0x80069f <xTickCount+0x1>
     d2a:	e0 92 9e 06 	sts	0x069E, r14	; 0x80069e <xTickCount>
     d2e:	e1 14       	cp	r14, r1
     d30:	f1 04       	cpc	r15, r1
     d32:	b9 f4       	brne	.+46     	; 0xd62 <xTaskIncrementTick+0x60>
     d34:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <pxDelayedTaskList>
     d38:	90 91 c0 06 	lds	r25, 0x06C0	; 0x8006c0 <pxDelayedTaskList+0x1>
     d3c:	20 91 bd 06 	lds	r18, 0x06BD	; 0x8006bd <pxOverflowDelayedTaskList>
     d40:	30 91 be 06 	lds	r19, 0x06BE	; 0x8006be <pxOverflowDelayedTaskList+0x1>
     d44:	30 93 c0 06 	sts	0x06C0, r19	; 0x8006c0 <pxDelayedTaskList+0x1>
     d48:	20 93 bf 06 	sts	0x06BF, r18	; 0x8006bf <pxDelayedTaskList>
     d4c:	90 93 be 06 	sts	0x06BE, r25	; 0x8006be <pxOverflowDelayedTaskList+0x1>
     d50:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <pxOverflowDelayedTaskList>
     d54:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <xNumOfOverflows>
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <xNumOfOverflows>
     d5e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <prvResetNextTaskUnblockTime>
     d62:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <xNextTaskUnblockTime>
     d66:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <xNextTaskUnblockTime+0x1>
     d6a:	e8 16       	cp	r14, r24
     d6c:	f9 06       	cpc	r15, r25
     d6e:	28 f4       	brcc	.+10     	; 0xd7a <xTaskIncrementTick+0x78>
     d70:	d1 2c       	mov	r13, r1
     d72:	53 c0       	rjmp	.+166    	; 0xe1a <xTaskIncrementTick+0x118>
     d74:	dd 24       	eor	r13, r13
     d76:	d3 94       	inc	r13
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <xTaskIncrementTick+0x7a>
     d7a:	d1 2c       	mov	r13, r1
     d7c:	e0 91 bf 06 	lds	r30, 0x06BF	; 0x8006bf <pxDelayedTaskList>
     d80:	f0 91 c0 06 	lds	r31, 0x06C0	; 0x8006c0 <pxDelayedTaskList+0x1>
     d84:	80 81       	ld	r24, Z
     d86:	81 11       	cpse	r24, r1
     d88:	07 c0       	rjmp	.+14     	; 0xd98 <xTaskIncrementTick+0x96>
     d8a:	8f ef       	ldi	r24, 0xFF	; 255
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <xNextTaskUnblockTime+0x1>
     d92:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <xNextTaskUnblockTime>
     d96:	41 c0       	rjmp	.+130    	; 0xe1a <xTaskIncrementTick+0x118>
     d98:	e0 91 bf 06 	lds	r30, 0x06BF	; 0x8006bf <pxDelayedTaskList>
     d9c:	f0 91 c0 06 	lds	r31, 0x06C0	; 0x8006c0 <pxDelayedTaskList+0x1>
     da0:	05 80       	ldd	r0, Z+5	; 0x05
     da2:	f6 81       	ldd	r31, Z+6	; 0x06
     da4:	e0 2d       	mov	r30, r0
     da6:	c6 81       	ldd	r28, Z+6	; 0x06
     da8:	d7 81       	ldd	r29, Z+7	; 0x07
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	9b 81       	ldd	r25, Y+3	; 0x03
     dae:	e8 16       	cp	r14, r24
     db0:	f9 06       	cpc	r15, r25
     db2:	28 f4       	brcc	.+10     	; 0xdbe <xTaskIncrementTick+0xbc>
     db4:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <xNextTaskUnblockTime+0x1>
     db8:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <xNextTaskUnblockTime>
     dbc:	2e c0       	rjmp	.+92     	; 0xe1a <xTaskIncrementTick+0x118>
     dbe:	8e 01       	movw	r16, r28
     dc0:	0e 5f       	subi	r16, 0xFE	; 254
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	c8 01       	movw	r24, r16
     dc6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     dca:	8c 89       	ldd	r24, Y+20	; 0x14
     dcc:	9d 89       	ldd	r25, Y+21	; 0x15
     dce:	89 2b       	or	r24, r25
     dd0:	21 f0       	breq	.+8      	; 0xdda <xTaskIncrementTick+0xd8>
     dd2:	ce 01       	movw	r24, r28
     dd4:	0c 96       	adiw	r24, 0x0c	; 12
     dd6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     dda:	8e 89       	ldd	r24, Y+22	; 0x16
     ddc:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <uxTopReadyPriority>
     de0:	98 17       	cp	r25, r24
     de2:	10 f4       	brcc	.+4      	; 0xde8 <xTaskIncrementTick+0xe6>
     de4:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <uxTopReadyPriority>
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	9c 01       	movw	r18, r24
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	22 0f       	add	r18, r18
     df2:	33 1f       	adc	r19, r19
     df4:	22 0f       	add	r18, r18
     df6:	33 1f       	adc	r19, r19
     df8:	82 0f       	add	r24, r18
     dfa:	93 1f       	adc	r25, r19
     dfc:	b8 01       	movw	r22, r16
     dfe:	8d 52       	subi	r24, 0x2D	; 45
     e00:	99 4f       	sbci	r25, 0xF9	; 249
     e02:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     e06:	9e 89       	ldd	r25, Y+22	; 0x16
     e08:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxCurrentTCB>
     e0c:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     e10:	86 89       	ldd	r24, Z+22	; 0x16
     e12:	98 17       	cp	r25, r24
     e14:	08 f0       	brcs	.+2      	; 0xe18 <xTaskIncrementTick+0x116>
     e16:	ae cf       	rjmp	.-164    	; 0xd74 <xTaskIncrementTick+0x72>
     e18:	b1 cf       	rjmp	.-158    	; 0xd7c <xTaskIncrementTick+0x7a>
     e1a:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxCurrentTCB>
     e1e:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     e22:	86 89       	ldd	r24, Z+22	; 0x16
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	fc 01       	movw	r30, r24
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	ee 0f       	add	r30, r30
     e2e:	ff 1f       	adc	r31, r31
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	8e 0f       	add	r24, r30
     e36:	9f 1f       	adc	r25, r31
     e38:	fc 01       	movw	r30, r24
     e3a:	ed 52       	subi	r30, 0x2D	; 45
     e3c:	f9 4f       	sbci	r31, 0xF9	; 249
     e3e:	80 81       	ld	r24, Z
     e40:	82 30       	cpi	r24, 0x02	; 2
     e42:	40 f4       	brcc	.+16     	; 0xe54 <xTaskIncrementTick+0x152>
     e44:	09 c0       	rjmp	.+18     	; 0xe58 <xTaskIncrementTick+0x156>
     e46:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <uxPendedTicks>
     e4a:	8f 5f       	subi	r24, 0xFF	; 255
     e4c:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <uxPendedTicks>
     e50:	d1 2c       	mov	r13, r1
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <xTaskIncrementTick+0x156>
     e54:	dd 24       	eor	r13, r13
     e56:	d3 94       	inc	r13
     e58:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <xYieldPending>
     e5c:	88 23       	and	r24, r24
     e5e:	11 f0       	breq	.+4      	; 0xe64 <xTaskIncrementTick+0x162>
     e60:	dd 24       	eor	r13, r13
     e62:	d3 94       	inc	r13
     e64:	8d 2d       	mov	r24, r13
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	08 95       	ret

00000e76 <xTaskResumeAll>:
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	0f 92       	push	r0
     e84:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxSchedulerSuspended>
     e88:	81 50       	subi	r24, 0x01	; 1
     e8a:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <uxSchedulerSuspended>
     e8e:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxSchedulerSuspended>
     e92:	81 11       	cpse	r24, r1
     e94:	58 c0       	rjmp	.+176    	; 0xf46 <xTaskResumeAll+0xd0>
     e96:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <uxCurrentNumberOfTasks>
     e9a:	81 11       	cpse	r24, r1
     e9c:	33 c0       	rjmp	.+102    	; 0xf04 <xTaskResumeAll+0x8e>
     e9e:	56 c0       	rjmp	.+172    	; 0xf4c <xTaskResumeAll+0xd6>
     ea0:	e0 91 b9 06 	lds	r30, 0x06B9	; 0x8006b9 <xPendingReadyList+0x5>
     ea4:	f0 91 ba 06 	lds	r31, 0x06BA	; 0x8006ba <xPendingReadyList+0x6>
     ea8:	c6 81       	ldd	r28, Z+6	; 0x06
     eaa:	d7 81       	ldd	r29, Z+7	; 0x07
     eac:	ce 01       	movw	r24, r28
     eae:	0c 96       	adiw	r24, 0x0c	; 12
     eb0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     eb4:	8e 01       	movw	r16, r28
     eb6:	0e 5f       	subi	r16, 0xFE	; 254
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	c8 01       	movw	r24, r16
     ebc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
     ec0:	8e 89       	ldd	r24, Y+22	; 0x16
     ec2:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <uxTopReadyPriority>
     ec6:	98 17       	cp	r25, r24
     ec8:	10 f4       	brcc	.+4      	; 0xece <xTaskResumeAll+0x58>
     eca:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <uxTopReadyPriority>
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9c 01       	movw	r18, r24
     ed2:	22 0f       	add	r18, r18
     ed4:	33 1f       	adc	r19, r19
     ed6:	22 0f       	add	r18, r18
     ed8:	33 1f       	adc	r19, r19
     eda:	22 0f       	add	r18, r18
     edc:	33 1f       	adc	r19, r19
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	b8 01       	movw	r22, r16
     ee4:	8d 52       	subi	r24, 0x2D	; 45
     ee6:	99 4f       	sbci	r25, 0xF9	; 249
     ee8:	0e 94 a8 02 	call	0x550	; 0x550 <vListInsertEnd>
     eec:	9e 89       	ldd	r25, Y+22	; 0x16
     eee:	e0 91 12 07 	lds	r30, 0x0712	; 0x800712 <pxCurrentTCB>
     ef2:	f0 91 13 07 	lds	r31, 0x0713	; 0x800713 <pxCurrentTCB+0x1>
     ef6:	86 89       	ldd	r24, Z+22	; 0x16
     ef8:	98 17       	cp	r25, r24
     efa:	30 f0       	brcs	.+12     	; 0xf08 <xTaskResumeAll+0x92>
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <xYieldPending>
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <xTaskResumeAll+0x92>
     f04:	c0 e0       	ldi	r28, 0x00	; 0
     f06:	d0 e0       	ldi	r29, 0x00	; 0
     f08:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <xPendingReadyList>
     f0c:	81 11       	cpse	r24, r1
     f0e:	c8 cf       	rjmp	.-112    	; 0xea0 <xTaskResumeAll+0x2a>
     f10:	cd 2b       	or	r28, r29
     f12:	11 f0       	breq	.+4      	; 0xf18 <xTaskResumeAll+0xa2>
     f14:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <prvResetNextTaskUnblockTime>
     f18:	c0 91 9b 06 	lds	r28, 0x069B	; 0x80069b <uxPendedTicks>
     f1c:	cc 23       	and	r28, r28
     f1e:	59 f0       	breq	.+22     	; 0xf36 <xTaskResumeAll+0xc0>
     f20:	0e 94 81 06 	call	0xd02	; 0xd02 <xTaskIncrementTick>
     f24:	88 23       	and	r24, r24
     f26:	19 f0       	breq	.+6      	; 0xf2e <xTaskResumeAll+0xb8>
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <xYieldPending>
     f2e:	c1 50       	subi	r28, 0x01	; 1
     f30:	b9 f7       	brne	.-18     	; 0xf20 <xTaskResumeAll+0xaa>
     f32:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <uxPendedTicks>
     f36:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <xYieldPending>
     f3a:	88 23       	and	r24, r24
     f3c:	31 f0       	breq	.+12     	; 0xf4a <xTaskResumeAll+0xd4>
     f3e:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <xTaskResumeAll+0xd6>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <xTaskResumeAll+0xd6>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
     f60:	89 2b       	or	r24, r25
     f62:	49 f0       	breq	.+18     	; 0xf76 <vTaskDelay+0x1c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
     f64:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	ce 01       	movw	r24, r28
     f6c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
     f70:	0e 94 3b 07 	call	0xe76	; 0xe76 <xTaskResumeAll>
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <vTaskDelay+0x1e>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
     f76:	80 e0       	ldi	r24, 0x00	; 0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     f78:	81 11       	cpse	r24, r1
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <vTaskDelay+0x26>
		{
			portYIELD_WITHIN_API();
     f7c:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
     f8a:	24 c0       	rjmp	.+72     	; 0xfd4 <prvCheckTasksWaitingTermination+0x4e>
		{
			vTaskSuspendAll();
     f8c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     f90:	c0 91 ab 06 	lds	r28, 0x06AB	; 0x8006ab <xTasksWaitingTermination>
			}
			( void ) xTaskResumeAll();
     f94:	0e 94 3b 07 	call	0xe76	; 0xe76 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
     f98:	cc 23       	and	r28, r28
     f9a:	e1 f0       	breq	.+56     	; 0xfd4 <prvCheckTasksWaitingTermination+0x4e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
     fa2:	e0 91 b0 06 	lds	r30, 0x06B0	; 0x8006b0 <xTasksWaitingTermination+0x5>
     fa6:	f0 91 b1 06 	lds	r31, 0x06B1	; 0x8006b1 <xTasksWaitingTermination+0x6>
     faa:	c6 81       	ldd	r28, Z+6	; 0x06
     fac:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     fae:	ce 01       	movw	r24, r28
     fb0:	02 96       	adiw	r24, 0x02	; 2
     fb2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <uxListRemove>
					--uxCurrentNumberOfTasks;
     fb6:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <uxCurrentNumberOfTasks>
     fba:	81 50       	subi	r24, 0x01	; 1
     fbc:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <uxCurrentNumberOfTasks>
					--uxDeletedTasksWaitingCleanUp;
     fc0:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxDeletedTasksWaitingCleanUp>
     fc4:	81 50       	subi	r24, 0x01	; 1
     fc6:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <uxDeletedTasksWaitingCleanUp>
				}
				taskEXIT_CRITICAL();
     fca:	0f 90       	pop	r0
     fcc:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
     fce:	ce 01       	movw	r24, r28
     fd0:	0e 94 9b 04 	call	0x936	; 0x936 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
     fd4:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxDeletedTasksWaitingCleanUp>
     fd8:	81 11       	cpse	r24, r1
     fda:	d8 cf       	rjmp	.-80     	; 0xf8c <prvCheckTasksWaitingTermination+0x6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <prvIdleTask>:

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
     fe2:	0e 94 c3 07 	call	0xf86	; 0xf86 <prvCheckTasksWaitingTermination>
     fe6:	fd cf       	rjmp	.-6      	; 0xfe2 <prvIdleTask>

00000fe8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     fe8:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxSchedulerSuspended>
     fec:	88 23       	and	r24, r24
     fee:	21 f0       	breq	.+8      	; 0xff8 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <xYieldPending>
     ff6:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
     ff8:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
     ffc:	20 91 9d 06 	lds	r18, 0x069D	; 0x80069d <uxTopReadyPriority>
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <vTaskSwitchContext+0x1c>
    1002:	21 50       	subi	r18, 0x01	; 1
    1004:	82 2f       	mov	r24, r18
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	fc 01       	movw	r30, r24
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	e8 0f       	add	r30, r24
    1018:	f9 1f       	adc	r31, r25
    101a:	ed 52       	subi	r30, 0x2D	; 45
    101c:	f9 4f       	sbci	r31, 0xF9	; 249
    101e:	30 81       	ld	r19, Z
    1020:	33 23       	and	r19, r19
    1022:	79 f3       	breq	.-34     	; 0x1002 <vTaskSwitchContext+0x1a>
    1024:	ac 01       	movw	r20, r24
    1026:	44 0f       	add	r20, r20
    1028:	55 1f       	adc	r21, r21
    102a:	44 0f       	add	r20, r20
    102c:	55 1f       	adc	r21, r21
    102e:	44 0f       	add	r20, r20
    1030:	55 1f       	adc	r21, r21
    1032:	48 0f       	add	r20, r24
    1034:	59 1f       	adc	r21, r25
    1036:	df 01       	movw	r26, r30
    1038:	01 80       	ldd	r0, Z+1	; 0x01
    103a:	f2 81       	ldd	r31, Z+2	; 0x02
    103c:	e0 2d       	mov	r30, r0
    103e:	02 80       	ldd	r0, Z+2	; 0x02
    1040:	f3 81       	ldd	r31, Z+3	; 0x03
    1042:	e0 2d       	mov	r30, r0
    1044:	12 96       	adiw	r26, 0x02	; 2
    1046:	fc 93       	st	X, r31
    1048:	ee 93       	st	-X, r30
    104a:	11 97       	sbiw	r26, 0x01	; 1
    104c:	4a 52       	subi	r20, 0x2A	; 42
    104e:	59 4f       	sbci	r21, 0xF9	; 249
    1050:	e4 17       	cp	r30, r20
    1052:	f5 07       	cpc	r31, r21
    1054:	29 f4       	brne	.+10     	; 0x1060 <vTaskSwitchContext+0x78>
    1056:	42 81       	ldd	r20, Z+2	; 0x02
    1058:	53 81       	ldd	r21, Z+3	; 0x03
    105a:	fd 01       	movw	r30, r26
    105c:	52 83       	std	Z+2, r21	; 0x02
    105e:	41 83       	std	Z+1, r20	; 0x01
    1060:	fc 01       	movw	r30, r24
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	ee 0f       	add	r30, r30
    1068:	ff 1f       	adc	r31, r31
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31
    106e:	8e 0f       	add	r24, r30
    1070:	9f 1f       	adc	r25, r31
    1072:	fc 01       	movw	r30, r24
    1074:	ed 52       	subi	r30, 0x2D	; 45
    1076:	f9 4f       	sbci	r31, 0xF9	; 249
    1078:	01 80       	ldd	r0, Z+1	; 0x01
    107a:	f2 81       	ldd	r31, Z+2	; 0x02
    107c:	e0 2d       	mov	r30, r0
    107e:	86 81       	ldd	r24, Z+6	; 0x06
    1080:	97 81       	ldd	r25, Z+7	; 0x07
    1082:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <pxCurrentTCB+0x1>
    1086:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <pxCurrentTCB>
    108a:	20 93 9d 06 	sts	0x069D, r18	; 0x80069d <uxTopReadyPriority>
    108e:	08 95       	ret

00001090 <LCD_voidSendLowerNibble>:
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	00 d0       	rcall	.+0      	; 0x109a <LCD_voidSendLowerNibble+0xa>
    109a:	00 d0       	rcall	.+0      	; 0x109c <LCD_voidSendLowerNibble+0xc>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	08 2f       	mov	r16, r24
    10a2:	84 e0       	ldi	r24, 0x04	; 4
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	85 e0       	ldi	r24, 0x05	; 5
    10a8:	8a 83       	std	Y+2, r24	; 0x02
    10aa:	86 e0       	ldi	r24, 0x06	; 6
    10ac:	8b 83       	std	Y+3, r24	; 0x03
    10ae:	87 e0       	ldi	r24, 0x07	; 7
    10b0:	8c 83       	std	Y+4, r24	; 0x04
    10b2:	10 e0       	ldi	r17, 0x00	; 0
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <LCD_voidSendLowerNibble+0x4e>
    10b6:	40 2f       	mov	r20, r16
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	01 2e       	mov	r0, r17
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <LCD_voidSendLowerNibble+0x32>
    10be:	55 95       	asr	r21
    10c0:	47 95       	ror	r20
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <LCD_voidSendLowerNibble+0x2e>
    10c6:	41 70       	andi	r20, 0x01	; 1
    10c8:	e1 e0       	ldi	r30, 0x01	; 1
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	ec 0f       	add	r30, r28
    10ce:	fd 1f       	adc	r31, r29
    10d0:	e1 0f       	add	r30, r17
    10d2:	f1 1d       	adc	r31, r1
    10d4:	60 81       	ld	r22, Z
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    10dc:	1f 5f       	subi	r17, 0xFF	; 255
    10de:	14 30       	cpi	r17, 0x04	; 4
    10e0:	50 f3       	brcs	.-44     	; 0x10b6 <LCD_voidSendLowerNibble+0x26>
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	08 95       	ret

000010f4 <LCD_voidSetEnable>:
    10f4:	41 e0       	ldi	r20, 0x01	; 1
    10f6:	63 e0       	ldi	r22, 0x03	; 3
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    10fe:	8f e3       	ldi	r24, 0x3F	; 63
    1100:	9f e1       	ldi	r25, 0x1F	; 31
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <LCD_voidSetEnable+0xe>
    1106:	00 c0       	rjmp	.+0      	; 0x1108 <LCD_voidSetEnable+0x14>
    1108:	00 00       	nop
    110a:	40 e0       	ldi	r20, 0x00	; 0
    110c:	63 e0       	ldi	r22, 0x03	; 3
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1114:	08 95       	ret

00001116 <LCD_voidSendCommand>:
    1116:	cf 93       	push	r28
    1118:	c8 2f       	mov	r28, r24
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	62 e0       	ldi	r22, 0x02	; 2
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    112e:	8c 2f       	mov	r24, r28
    1130:	82 95       	swap	r24
    1132:	8f 70       	andi	r24, 0x0F	; 15
    1134:	0e 94 48 08 	call	0x1090	; 0x1090 <LCD_voidSendLowerNibble>
    1138:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <LCD_voidSetEnable>
    113c:	8c 2f       	mov	r24, r28
    113e:	0e 94 48 08 	call	0x1090	; 0x1090 <LCD_voidSendLowerNibble>
    1142:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <LCD_voidSetEnable>
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <LCD_voidSendData>:
    114a:	cf 93       	push	r28
    114c:	c8 2f       	mov	r28, r24
    114e:	41 e0       	ldi	r20, 0x01	; 1
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	62 e0       	ldi	r22, 0x02	; 2
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1162:	8c 2f       	mov	r24, r28
    1164:	82 95       	swap	r24
    1166:	8f 70       	andi	r24, 0x0F	; 15
    1168:	0e 94 48 08 	call	0x1090	; 0x1090 <LCD_voidSendLowerNibble>
    116c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <LCD_voidSetEnable>
    1170:	8c 2f       	mov	r24, r28
    1172:	0e 94 48 08 	call	0x1090	; 0x1090 <LCD_voidSendLowerNibble>
    1176:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <LCD_voidSetEnable>
    117a:	cf 91       	pop	r28
    117c:	08 95       	ret

0000117e <LCD_voidInit>:
    117e:	2f ef       	ldi	r18, 0xFF	; 255
    1180:	83 ef       	ldi	r24, 0xF3	; 243
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	21 50       	subi	r18, 0x01	; 1
    1186:	80 40       	sbci	r24, 0x00	; 0
    1188:	90 40       	sbci	r25, 0x00	; 0
    118a:	e1 f7       	brne	.-8      	; 0x1184 <LCD_voidInit+0x6>
    118c:	00 c0       	rjmp	.+0      	; 0x118e <LCD_voidInit+0x10>
    118e:	00 00       	nop
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	0e 94 48 08 	call	0x1090	; 0x1090 <LCD_voidSendLowerNibble>
    1196:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <LCD_voidSetEnable>
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	0e 94 48 08 	call	0x1090	; 0x1090 <LCD_voidSendLowerNibble>
    11a0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <LCD_voidSetEnable>
    11a4:	88 e0       	ldi	r24, 0x08	; 8
    11a6:	0e 94 48 08 	call	0x1090	; 0x1090 <LCD_voidSendLowerNibble>
    11aa:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <LCD_voidSetEnable>
    11ae:	8c e0       	ldi	r24, 0x0C	; 12
    11b0:	0e 94 8b 08 	call	0x1116	; 0x1116 <LCD_voidSendCommand>
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	0e 94 8b 08 	call	0x1116	; 0x1116 <LCD_voidSendCommand>
    11ba:	08 95       	ret

000011bc <LCD_voidSendString>:
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	ec 01       	movw	r28, r24
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <LCD_voidSendString+0xe>
    11c4:	0e 94 a5 08 	call	0x114a	; 0x114a <LCD_voidSendData>
    11c8:	21 96       	adiw	r28, 0x01	; 1
    11ca:	88 81       	ld	r24, Y
    11cc:	81 11       	cpse	r24, r1
    11ce:	fa cf       	rjmp	.-12     	; 0x11c4 <LCD_voidSendString+0x8>
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	08 95       	ret

000011d6 <LCD_voidSendNum>:
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	2e 97       	sbiw	r28, 0x0e	; 14
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	ac 01       	movw	r20, r24
    11ee:	89 2b       	or	r24, r25
    11f0:	d1 f5       	brne	.+116    	; 0x1266 <LCD_voidSendNum+0x90>
    11f2:	80 e3       	ldi	r24, 0x30	; 48
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	11 e0       	ldi	r17, 0x01	; 1
    11fc:	47 c0       	rjmp	.+142    	; 0x128c <LCD_voidSendNum+0xb6>
    11fe:	9a 01       	movw	r18, r20
    1200:	ad ec       	ldi	r26, 0xCD	; 205
    1202:	bc ec       	ldi	r27, 0xCC	; 204
    1204:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__umulhisi3>
    1208:	96 95       	lsr	r25
    120a:	87 95       	ror	r24
    120c:	96 95       	lsr	r25
    120e:	87 95       	ror	r24
    1210:	96 95       	lsr	r25
    1212:	87 95       	ror	r24
    1214:	9c 01       	movw	r18, r24
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	82 0f       	add	r24, r18
    1228:	93 1f       	adc	r25, r19
    122a:	9a 01       	movw	r18, r20
    122c:	28 1b       	sub	r18, r24
    122e:	39 0b       	sbc	r19, r25
    1230:	c9 01       	movw	r24, r18
    1232:	e1 2f       	mov	r30, r17
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	99 27       	eor	r25, r25
    1238:	c0 96       	adiw	r24, 0x30	; 48
    123a:	ee 0f       	add	r30, r30
    123c:	ff 1f       	adc	r31, r31
    123e:	21 e0       	ldi	r18, 0x01	; 1
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	2c 0f       	add	r18, r28
    1244:	3d 1f       	adc	r19, r29
    1246:	e2 0f       	add	r30, r18
    1248:	f3 1f       	adc	r31, r19
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	80 83       	st	Z, r24
    124e:	9a 01       	movw	r18, r20
    1250:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__umulhisi3>
    1254:	ac 01       	movw	r20, r24
    1256:	56 95       	lsr	r21
    1258:	47 95       	ror	r20
    125a:	56 95       	lsr	r21
    125c:	47 95       	ror	r20
    125e:	56 95       	lsr	r21
    1260:	47 95       	ror	r20
    1262:	1f 5f       	subi	r17, 0xFF	; 255
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <LCD_voidSendNum+0x92>
    1266:	10 e0       	ldi	r17, 0x00	; 0
    1268:	41 15       	cp	r20, r1
    126a:	51 05       	cpc	r21, r1
    126c:	41 f6       	brne	.-112    	; 0x11fe <LCD_voidSendNum+0x28>
    126e:	0e c0       	rjmp	.+28     	; 0x128c <LCD_voidSendNum+0xb6>
    1270:	11 50       	subi	r17, 0x01	; 1
    1272:	e1 2f       	mov	r30, r17
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	8c 0f       	add	r24, r28
    1280:	9d 1f       	adc	r25, r29
    1282:	e8 0f       	add	r30, r24
    1284:	f9 1f       	adc	r31, r25
    1286:	80 81       	ld	r24, Z
    1288:	0e 94 a5 08 	call	0x114a	; 0x114a <LCD_voidSendData>
    128c:	11 11       	cpse	r17, r1
    128e:	f0 cf       	rjmp	.-32     	; 0x1270 <LCD_voidSendNum+0x9a>
    1290:	2e 96       	adiw	r28, 0x0e	; 14
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	08 95       	ret

000012a4 <LCD_SetGridPos>:
    12a4:	90 e4       	ldi	r25, 0x40	; 64
    12a6:	69 9f       	mul	r22, r25
    12a8:	80 0d       	add	r24, r0
    12aa:	11 24       	eor	r1, r1
    12ac:	80 68       	ori	r24, 0x80	; 128
    12ae:	0e 94 8b 08 	call	0x1116	; 0x1116 <LCD_voidSendCommand>
    12b2:	08 95       	ret

000012b4 <main>:

int main(void)
{
			
			
			Radar_LCD_Init();
    12b4:	0e 94 8a 09 	call	0x1314	; 0x1314 <Radar_LCD_Init>
			Rover_voidMotorsInit();
    12b8:	0e 94 bc 09 	call	0x1378	; 0x1378 <Rover_voidMotorsInit>
			IrSensor_voidInit();
    12bc:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <IrSensor_voidInit>
			Buzzer_voidInit();
    12c0:	0e 94 11 0b 	call	0x1622	; 0x1622 <Buzzer_voidInit>
			RoverTransmit_Init();
    12c4:	0e 94 17 0b 	call	0x162e	; 0x162e <RoverTransmit_Init>
		
			//xTaskCreate(vTask_RoverInit,"Initialize",configMINIMAL_STACK_SIZE,NULL,INIT_TASK_PRIORITY,NULL);
			
			xTaskCreate(vTask_UltraSonicSendData,"UltraS",configMINIMAL_STACK_SIZE,NULL,UltraSonic_TASK_PRIORITY,NULL);
    12c8:	e1 2c       	mov	r14, r1
    12ca:	f1 2c       	mov	r15, r1
    12cc:	01 e0       	ldi	r16, 0x01	; 1
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	4a ef       	ldi	r20, 0xFA	; 250
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	67 e6       	ldi	r22, 0x67	; 103
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	87 e8       	ldi	r24, 0x87	; 135
    12dc:	9b e0       	ldi	r25, 0x0B	; 11
    12de:	0e 94 fd 05 	call	0xbfa	; 0xbfa <xTaskCreate>
			
			xTaskCreate(vTask_RoverMove,"Movem",configMINIMAL_STACK_SIZE,NULL,MOVEMENT_TASK_PRIORITY,NULL);
    12e2:	04 e0       	ldi	r16, 0x04	; 4
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4a ef       	ldi	r20, 0xFA	; 250
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	6e e6       	ldi	r22, 0x6E	; 110
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	8a e1       	ldi	r24, 0x1A	; 26
    12f2:	9b e0       	ldi	r25, 0x0B	; 11
    12f4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <xTaskCreate>
			xTaskCreate(vTask_DataDisplay,"Displa",configMINIMAL_STACK_SIZE,NULL,DISPLAY_TASK_PRIORITY,NULL);
    12f8:	00 e0       	ldi	r16, 0x00	; 0
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	4a ef       	ldi	r20, 0xFA	; 250
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	64 e7       	ldi	r22, 0x74	; 116
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	8e e7       	ldi	r24, 0x7E	; 126
    1308:	9b e0       	ldi	r25, 0x0B	; 11
    130a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <xTaskCreate>
			//xTaskCreate(vTask_BT_SendStatus,"BT",configMINIMAL_STACK_SIZE,NULL,BLUETOOTH_TASK_PRIORITY,NULL);
		    
			vTaskStartScheduler();
    130e:	0e 94 51 06 	call	0xca2	; 0xca2 <vTaskStartScheduler>
    1312:	ff cf       	rjmp	.-2      	; 0x1312 <main+0x5e>

00001314 <Radar_LCD_Init>:
	
	while(1){
		
		IrSensor_GetDir();
		
		vTaskDelay(20);
    1314:	41 e0       	ldi	r20, 0x01	; 1
    1316:	64 e0       	ldi	r22, 0x04	; 4
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    131e:	41 e0       	ldi	r20, 0x01	; 1
    1320:	65 e0       	ldi	r22, 0x05	; 5
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1328:	41 e0       	ldi	r20, 0x01	; 1
    132a:	66 e0       	ldi	r22, 0x06	; 6
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	67 e0       	ldi	r22, 0x07	; 7
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    133c:	41 e0       	ldi	r20, 0x01	; 1
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1346:	41 e0       	ldi	r20, 0x01	; 1
    1348:	62 e0       	ldi	r22, 0x02	; 2
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1350:	41 e0       	ldi	r20, 0x01	; 1
    1352:	63 e0       	ldi	r22, 0x03	; 3
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    135a:	0e 94 96 0b 	call	0x172c	; 0x172c <Servo_Init>
    135e:	41 e0       	ldi	r20, 0x01	; 1
    1360:	64 e0       	ldi	r22, 0x04	; 4
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	65 e0       	ldi	r22, 0x05	; 5
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1372:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_voidInit>
    1376:	08 95       	ret

00001378 <Rover_voidMotorsInit>:
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	66 e0       	ldi	r22, 0x06	; 6
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1382:	41 e0       	ldi	r20, 0x01	; 1
    1384:	67 e0       	ldi	r22, 0x07	; 7
    1386:	82 e0       	ldi	r24, 0x02	; 2
    1388:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    138c:	41 e0       	ldi	r20, 0x01	; 1
    138e:	62 e0       	ldi	r22, 0x02	; 2
    1390:	83 e0       	ldi	r24, 0x03	; 3
    1392:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	63 e0       	ldi	r22, 0x03	; 3
    139a:	83 e0       	ldi	r24, 0x03	; 3
    139c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    13a0:	41 e0       	ldi	r20, 0x01	; 1
    13a2:	67 e0       	ldi	r22, 0x07	; 7
    13a4:	83 e0       	ldi	r24, 0x03	; 3
    13a6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    13aa:	08 95       	ret

000013ac <Rover_voidMOVFWD>:
    13ac:	cf 93       	push	r28
    13ae:	c8 2f       	mov	r28, r24
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	66 e0       	ldi	r22, 0x06	; 6
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	67 e0       	ldi	r22, 0x07	; 7
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	62 e0       	ldi	r22, 0x02	; 2
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	63 e0       	ldi	r22, 0x03	; 3
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13d8:	8c 2f       	mov	r24, r28
    13da:	0e 94 2c 0c 	call	0x1858	; 0x1858 <TIMER2_voidFastPWM>
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <Rover_state+0x5>
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <Rover_voidMOVBCWD>:
    13e8:	cf 93       	push	r28
    13ea:	c8 2f       	mov	r28, r24
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	66 e0       	ldi	r22, 0x06	; 6
    13f0:	82 e0       	ldi	r24, 0x02	; 2
    13f2:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    13f6:	41 e0       	ldi	r20, 0x01	; 1
    13f8:	67 e0       	ldi	r22, 0x07	; 7
    13fa:	82 e0       	ldi	r24, 0x02	; 2
    13fc:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	62 e0       	ldi	r22, 0x02	; 2
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    140a:	41 e0       	ldi	r20, 0x01	; 1
    140c:	63 e0       	ldi	r22, 0x03	; 3
    140e:	83 e0       	ldi	r24, 0x03	; 3
    1410:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1414:	8c 2f       	mov	r24, r28
    1416:	0e 94 2c 0c 	call	0x1858	; 0x1858 <TIMER2_voidFastPWM>
    141a:	82 e0       	ldi	r24, 0x02	; 2
    141c:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <Rover_state+0x5>
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <Rover_voidMOVRW>:
    1424:	cf 93       	push	r28
    1426:	c8 2f       	mov	r28, r24
    1428:	40 e0       	ldi	r20, 0x00	; 0
    142a:	66 e0       	ldi	r22, 0x06	; 6
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1432:	41 e0       	ldi	r20, 0x01	; 1
    1434:	67 e0       	ldi	r22, 0x07	; 7
    1436:	82 e0       	ldi	r24, 0x02	; 2
    1438:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    143c:	41 e0       	ldi	r20, 0x01	; 1
    143e:	62 e0       	ldi	r22, 0x02	; 2
    1440:	83 e0       	ldi	r24, 0x03	; 3
    1442:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	63 e0       	ldi	r22, 0x03	; 3
    144a:	83 e0       	ldi	r24, 0x03	; 3
    144c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1450:	8c 2f       	mov	r24, r28
    1452:	0e 94 2c 0c 	call	0x1858	; 0x1858 <TIMER2_voidFastPWM>
    1456:	83 e0       	ldi	r24, 0x03	; 3
    1458:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <Rover_state+0x5>
    145c:	cf 91       	pop	r28
    145e:	08 95       	ret

00001460 <Rover_voidMOVLF>:
    1460:	cf 93       	push	r28
    1462:	c8 2f       	mov	r28, r24
    1464:	41 e0       	ldi	r20, 0x01	; 1
    1466:	66 e0       	ldi	r22, 0x06	; 6
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	67 e0       	ldi	r22, 0x07	; 7
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1478:	40 e0       	ldi	r20, 0x00	; 0
    147a:	62 e0       	ldi	r22, 0x02	; 2
    147c:	83 e0       	ldi	r24, 0x03	; 3
    147e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	63 e0       	ldi	r22, 0x03	; 3
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    148c:	8c 2f       	mov	r24, r28
    148e:	0e 94 2c 0c 	call	0x1858	; 0x1858 <TIMER2_voidFastPWM>
    1492:	84 e0       	ldi	r24, 0x04	; 4
    1494:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <Rover_state+0x5>
    1498:	cf 91       	pop	r28
    149a:	08 95       	ret

0000149c <Rover_voidStop>:
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	66 e0       	ldi	r22, 0x06	; 6
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	67 e0       	ldi	r22, 0x07	; 7
    14aa:	82 e0       	ldi	r24, 0x02	; 2
    14ac:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	62 e0       	ldi	r22, 0x02	; 2
    14b4:	83 e0       	ldi	r24, 0x03	; 3
    14b6:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	63 e0       	ldi	r22, 0x03	; 3
    14be:	83 e0       	ldi	r24, 0x03	; 3
    14c0:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    14c4:	85 e0       	ldi	r24, 0x05	; 5
    14c6:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <Rover_state+0x5>
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	0e 94 2c 0c 	call	0x1858	; 0x1858 <TIMER2_voidFastPWM>
    14d0:	08 95       	ret

000014d2 <ROVER_LCD_PrintStatus>:
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	ec 01       	movw	r28, r24
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_SetGridPos>
    14e0:	8b e7       	ldi	r24, 0x7B	; 123
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 de 08 	call	0x11bc	; 0x11bc <LCD_voidSendString>
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	86 e0       	ldi	r24, 0x06	; 6
    14ec:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_SetGridPos>
    14f0:	88 81       	ld	r24, Y
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <LCD_voidSendNum>
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	89 e0       	ldi	r24, 0x09	; 9
    14fc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_SetGridPos>
    1500:	81 e8       	ldi	r24, 0x81	; 129
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 de 08 	call	0x11bc	; 0x11bc <LCD_voidSendString>
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	8d e0       	ldi	r24, 0x0D	; 13
    150c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_SetGridPos>
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	83 30       	cpi	r24, 0x03	; 3
    1514:	a9 f0       	breq	.+42     	; 0x1540 <ROVER_LCD_PrintStatus+0x6e>
    1516:	28 f4       	brcc	.+10     	; 0x1522 <ROVER_LCD_PrintStatus+0x50>
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	41 f0       	breq	.+16     	; 0x152c <ROVER_LCD_PrintStatus+0x5a>
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	59 f0       	breq	.+22     	; 0x1536 <ROVER_LCD_PrintStatus+0x64>
    1520:	1e c0       	rjmp	.+60     	; 0x155e <ROVER_LCD_PrintStatus+0x8c>
    1522:	84 30       	cpi	r24, 0x04	; 4
    1524:	91 f0       	breq	.+36     	; 0x154a <ROVER_LCD_PrintStatus+0x78>
    1526:	85 30       	cpi	r24, 0x05	; 5
    1528:	a9 f0       	breq	.+42     	; 0x1554 <ROVER_LCD_PrintStatus+0x82>
    152a:	19 c0       	rjmp	.+50     	; 0x155e <ROVER_LCD_PrintStatus+0x8c>
    152c:	86 e8       	ldi	r24, 0x86	; 134
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 de 08 	call	0x11bc	; 0x11bc <LCD_voidSendString>
    1534:	18 c0       	rjmp	.+48     	; 0x1566 <ROVER_LCD_PrintStatus+0x94>
    1536:	8a e8       	ldi	r24, 0x8A	; 138
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 de 08 	call	0x11bc	; 0x11bc <LCD_voidSendString>
    153e:	13 c0       	rjmp	.+38     	; 0x1566 <ROVER_LCD_PrintStatus+0x94>
    1540:	8e e8       	ldi	r24, 0x8E	; 142
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 de 08 	call	0x11bc	; 0x11bc <LCD_voidSendString>
    1548:	0e c0       	rjmp	.+28     	; 0x1566 <ROVER_LCD_PrintStatus+0x94>
    154a:	81 e9       	ldi	r24, 0x91	; 145
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 de 08 	call	0x11bc	; 0x11bc <LCD_voidSendString>
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <ROVER_LCD_PrintStatus+0x94>
    1554:	84 e9       	ldi	r24, 0x94	; 148
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 de 08 	call	0x11bc	; 0x11bc <LCD_voidSendString>
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <ROVER_LCD_PrintStatus+0x94>
    155e:	89 e9       	ldi	r24, 0x99	; 153
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	0e 94 de 08 	call	0x11bc	; 0x11bc <LCD_voidSendString>
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_SetGridPos>
    156e:	8d e9       	ldi	r24, 0x9D	; 157
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 de 08 	call	0x11bc	; 0x11bc <LCD_voidSendString>
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	84 e0       	ldi	r24, 0x04	; 4
    157a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_SetGridPos>
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	81 11       	cpse	r24, r1
    1582:	05 c0       	rjmp	.+10     	; 0x158e <ROVER_LCD_PrintStatus+0xbc>
    1584:	82 e9       	ldi	r24, 0x92	; 146
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 de 08 	call	0x11bc	; 0x11bc <LCD_voidSendString>
    158c:	17 c0       	rjmp	.+46     	; 0x15bc <ROVER_LCD_PrintStatus+0xea>
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	81 11       	cpse	r24, r1
    1592:	05 c0       	rjmp	.+10     	; 0x159e <ROVER_LCD_PrintStatus+0xcc>
    1594:	81 ea       	ldi	r24, 0xA1	; 161
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 de 08 	call	0x11bc	; 0x11bc <LCD_voidSendString>
    159c:	0f c0       	rjmp	.+30     	; 0x15bc <ROVER_LCD_PrintStatus+0xea>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	81 11       	cpse	r24, r1
    15a2:	05 c0       	rjmp	.+10     	; 0x15ae <ROVER_LCD_PrintStatus+0xdc>
    15a4:	83 ea       	ldi	r24, 0xA3	; 163
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 de 08 	call	0x11bc	; 0x11bc <LCD_voidSendString>
    15ac:	07 c0       	rjmp	.+14     	; 0x15bc <ROVER_LCD_PrintStatus+0xea>
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	81 11       	cpse	r24, r1
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <ROVER_LCD_PrintStatus+0xea>
    15b4:	85 ea       	ldi	r24, 0xA5	; 165
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 de 08 	call	0x11bc	; 0x11bc <LCD_voidSendString>
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	08 95       	ret

000015c2 <IrSensor_voidInit>:
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	63 e0       	ldi	r22, 0x03	; 3
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    15cc:	40 e0       	ldi	r20, 0x00	; 0
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	61 e0       	ldi	r22, 0x01	; 1
    15da:	82 e0       	ldi	r24, 0x02	; 2
    15dc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	62 e0       	ldi	r22, 0x02	; 2
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    15ea:	08 95       	ret

000015ec <IrSensor_GetDir>:
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    15f8:	cc e1       	ldi	r28, 0x1C	; 28
    15fa:	d7 e0       	ldi	r29, 0x07	; 7
    15fc:	8c 83       	std	Y+4, r24	; 0x04
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	82 e0       	ldi	r24, 0x02	; 2
    1602:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    1606:	8b 83       	std	Y+3, r24	; 0x03
    1608:	62 e0       	ldi	r22, 0x02	; 2
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    1610:	8a 83       	std	Y+2, r24	; 0x02
    1612:	63 e0       	ldi	r22, 0x03	; 3
    1614:	82 e0       	ldi	r24, 0x02	; 2
    1616:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	08 95       	ret

00001622 <Buzzer_voidInit>:
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	63 e0       	ldi	r22, 0x03	; 3
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    162c:	08 95       	ret

0000162e <RoverTransmit_Init>:
    162e:	0e 94 9c 0c 	call	0x1938	; 0x1938 <UART_voidInit>
    1632:	08 95       	ret

00001634 <vTask_RoverMove>:
    1634:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <Rover_state+0x1>
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	b9 f4       	brne	.+46     	; 0x166a <vTask_RoverMove+0x36>
    163c:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <Rover_state>
    1640:	8b 30       	cpi	r24, 0x0B	; 11
    1642:	98 f0       	brcs	.+38     	; 0x166a <vTask_RoverMove+0x36>
    1644:	82 e3       	ldi	r24, 0x32	; 50
    1646:	0e 94 d6 09 	call	0x13ac	; 0x13ac <Rover_voidMOVFWD>
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <vTask_RoverMove+0x20>
    164c:	82 e2       	ldi	r24, 0x22	; 34
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vTaskDelay>
    1654:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <Rover_state+0x1>
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	21 f4       	brne	.+8      	; 0x1664 <vTask_RoverMove+0x30>
    165c:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <Rover_state>
    1660:	8b 30       	cpi	r24, 0x0B	; 11
    1662:	a0 f7       	brcc	.-24     	; 0x164c <vTask_RoverMove+0x18>
    1664:	0e 94 4e 0a 	call	0x149c	; 0x149c <Rover_voidStop>
    1668:	44 c0       	rjmp	.+136    	; 0x16f2 <vTask_RoverMove+0xbe>
    166a:	87 e3       	ldi	r24, 0x37	; 55
    166c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <Rover_voidMOVBCWD>
    1670:	89 e2       	ldi	r24, 0x29	; 41
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vTaskDelay>
    1678:	0e 94 4e 0a 	call	0x149c	; 0x149c <Rover_voidStop>
    167c:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <Rover_state+0x2>
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	61 f0       	breq	.+24     	; 0x169c <vTask_RoverMove+0x68>
    1684:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <Rover_state+0x3>
    1688:	91 30       	cpi	r25, 0x01	; 1
    168a:	41 f4       	brne	.+16     	; 0x169c <vTask_RoverMove+0x68>
    168c:	85 e5       	ldi	r24, 0x55	; 85
    168e:	0e 94 12 0a 	call	0x1424	; 0x1424 <Rover_voidMOVRW>
    1692:	8e e2       	ldi	r24, 0x2E	; 46
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vTaskDelay>
    169a:	21 c0       	rjmp	.+66     	; 0x16de <vTask_RoverMove+0xaa>
    169c:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <Rover_state+0x3>
    16a0:	91 30       	cpi	r25, 0x01	; 1
    16a2:	51 f0       	breq	.+20     	; 0x16b8 <vTask_RoverMove+0x84>
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	41 f4       	brne	.+16     	; 0x16b8 <vTask_RoverMove+0x84>
    16a8:	85 e5       	ldi	r24, 0x55	; 85
    16aa:	0e 94 30 0a 	call	0x1460	; 0x1460 <Rover_voidMOVLF>
    16ae:	8e e2       	ldi	r24, 0x2E	; 46
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vTaskDelay>
    16b6:	13 c0       	rjmp	.+38     	; 0x16de <vTask_RoverMove+0xaa>
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	41 f4       	brne	.+16     	; 0x16cc <vTask_RoverMove+0x98>
    16bc:	85 e5       	ldi	r24, 0x55	; 85
    16be:	0e 94 30 0a 	call	0x1460	; 0x1460 <Rover_voidMOVLF>
    16c2:	8e e2       	ldi	r24, 0x2E	; 46
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vTaskDelay>
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <vTask_RoverMove+0xaa>
    16cc:	91 30       	cpi	r25, 0x01	; 1
    16ce:	39 f4       	brne	.+14     	; 0x16de <vTask_RoverMove+0xaa>
    16d0:	85 e5       	ldi	r24, 0x55	; 85
    16d2:	0e 94 12 0a 	call	0x1424	; 0x1424 <Rover_voidMOVRW>
    16d6:	8e e2       	ldi	r24, 0x2E	; 46
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vTaskDelay>
    16de:	89 e2       	ldi	r24, 0x29	; 41
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vTaskDelay>
    16e6:	0e 94 4e 0a 	call	0x149c	; 0x149c <Rover_voidStop>
    16ea:	82 e3       	ldi	r24, 0x32	; 50
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vTaskDelay>
    16f2:	82 e2       	ldi	r24, 0x22	; 34
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vTaskDelay>
    16fa:	9c cf       	rjmp	.-200    	; 0x1634 <vTask_RoverMove>

000016fc <vTask_DataDisplay>:
    16fc:	8c e1       	ldi	r24, 0x1C	; 28
    16fe:	97 e0       	ldi	r25, 0x07	; 7
    1700:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <ROVER_LCD_PrintStatus>
    1704:	82 e1       	ldi	r24, 0x12	; 18
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vTaskDelay>
    170c:	f7 cf       	rjmp	.-18     	; 0x16fc <vTask_DataDisplay>

0000170e <vTask_UltraSonicSendData>:

void vTask_UltraSonicSendData(void){
	
	while(1){
		
	UltraSonic_Sendpulse();
    170e:	0e 94 a7 0c 	call	0x194e	; 0x194e <UltraSonic_Sendpulse>
	Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
    1712:	86 eb       	ldi	r24, 0xB6	; 182
    1714:	9c e0       	ldi	r25, 0x0C	; 12
    1716:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <UltraSonic_Calc_Distance>
    171a:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <Rover_state>
	IrSensor_GetDir();
    171e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <IrSensor_GetDir>
	vTaskDelay(20);
    1722:	84 e1       	ldi	r24, 0x14	; 20
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vTaskDelay>
    172a:	f1 cf       	rjmp	.-30     	; 0x170e <vTask_UltraSonicSendData>

0000172c <Servo_Init>:
void Servo_Init(void){
	
	
	// Initialize Timer1 for Fast PWM mode
	
	DIO_voidSetPinDir(PWM_PORT,PWM_PIN,OUTPUT);
    172c:	41 e0       	ldi	r20, 0x01	; 1
    172e:	65 e0       	ldi	r22, 0x05	; 5
    1730:	83 e0       	ldi	r24, 0x03	; 3
    1732:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
	// Set initial angle to 0 degrees
	 TIMER1_voidFastPWMICR1();
    1736:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <TIMER1_voidFastPWMICR1>
    173a:	08 95       	ret

0000173c <__vector_11>:
    173c:	1f 92       	push	r1
    173e:	0f 92       	push	r0
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	0f 92       	push	r0
    1744:	11 24       	eor	r1, r1
    1746:	2f 93       	push	r18
    1748:	3f 93       	push	r19
    174a:	4f 93       	push	r20
    174c:	5f 93       	push	r21
    174e:	6f 93       	push	r22
    1750:	7f 93       	push	r23
    1752:	8f 93       	push	r24
    1754:	9f 93       	push	r25
    1756:	af 93       	push	r26
    1758:	bf 93       	push	r27
    175a:	ef 93       	push	r30
    175c:	ff 93       	push	r31
    175e:	e0 91 16 07 	lds	r30, 0x0716	; 0x800716 <OVF_ptr>
    1762:	f0 91 17 07 	lds	r31, 0x0717	; 0x800717 <OVF_ptr+0x1>
    1766:	09 95       	icall
    1768:	ff 91       	pop	r31
    176a:	ef 91       	pop	r30
    176c:	bf 91       	pop	r27
    176e:	af 91       	pop	r26
    1770:	9f 91       	pop	r25
    1772:	8f 91       	pop	r24
    1774:	7f 91       	pop	r23
    1776:	6f 91       	pop	r22
    1778:	5f 91       	pop	r21
    177a:	4f 91       	pop	r20
    177c:	3f 91       	pop	r19
    177e:	2f 91       	pop	r18
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	0f 90       	pop	r0
    1786:	1f 90       	pop	r1
    1788:	18 95       	reti

0000178a <__vector_10>:
    178a:	1f 92       	push	r1
    178c:	0f 92       	push	r0
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	0f 92       	push	r0
    1792:	11 24       	eor	r1, r1
    1794:	2f 93       	push	r18
    1796:	3f 93       	push	r19
    1798:	4f 93       	push	r20
    179a:	5f 93       	push	r21
    179c:	6f 93       	push	r22
    179e:	7f 93       	push	r23
    17a0:	8f 93       	push	r24
    17a2:	9f 93       	push	r25
    17a4:	af 93       	push	r26
    17a6:	bf 93       	push	r27
    17a8:	ef 93       	push	r30
    17aa:	ff 93       	push	r31
    17ac:	e0 91 14 07 	lds	r30, 0x0714	; 0x800714 <CTC_ptr>
    17b0:	f0 91 15 07 	lds	r31, 0x0715	; 0x800715 <CTC_ptr+0x1>
    17b4:	09 95       	icall
    17b6:	ff 91       	pop	r31
    17b8:	ef 91       	pop	r30
    17ba:	bf 91       	pop	r27
    17bc:	af 91       	pop	r26
    17be:	9f 91       	pop	r25
    17c0:	8f 91       	pop	r24
    17c2:	7f 91       	pop	r23
    17c4:	6f 91       	pop	r22
    17c6:	5f 91       	pop	r21
    17c8:	4f 91       	pop	r20
    17ca:	3f 91       	pop	r19
    17cc:	2f 91       	pop	r18
    17ce:	0f 90       	pop	r0
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	0f 90       	pop	r0
    17d4:	1f 90       	pop	r1
    17d6:	18 95       	reti

000017d8 <TIMER1_voidFastPWMICR1>:
    17d8:	8f b5       	in	r24, 0x2f	; 47
    17da:	90 b7       	in	r25, 0x30	; 48
    17dc:	8e 7f       	andi	r24, 0xFE	; 254
    17de:	90 bf       	out	0x30, r25	; 48
    17e0:	8f bd       	out	0x2f, r24	; 47
    17e2:	8f b5       	in	r24, 0x2f	; 47
    17e4:	90 b7       	in	r25, 0x30	; 48
    17e6:	82 60       	ori	r24, 0x02	; 2
    17e8:	90 bf       	out	0x30, r25	; 48
    17ea:	8f bd       	out	0x2f, r24	; 47
    17ec:	8e b5       	in	r24, 0x2e	; 46
    17ee:	9f b5       	in	r25, 0x2f	; 47
    17f0:	88 60       	ori	r24, 0x08	; 8
    17f2:	9f bd       	out	0x2f, r25	; 47
    17f4:	8e bd       	out	0x2e, r24	; 46
    17f6:	8e b5       	in	r24, 0x2e	; 46
    17f8:	9f b5       	in	r25, 0x2f	; 47
    17fa:	80 61       	ori	r24, 0x10	; 16
    17fc:	9f bd       	out	0x2f, r25	; 47
    17fe:	8e bd       	out	0x2e, r24	; 46
    1800:	8f b5       	in	r24, 0x2f	; 47
    1802:	90 b7       	in	r25, 0x30	; 48
    1804:	80 68       	ori	r24, 0x80	; 128
    1806:	90 bf       	out	0x30, r25	; 48
    1808:	8f bd       	out	0x2f, r24	; 47
    180a:	8f b5       	in	r24, 0x2f	; 47
    180c:	90 b7       	in	r25, 0x30	; 48
    180e:	8f 7b       	andi	r24, 0xBF	; 191
    1810:	90 bf       	out	0x30, r25	; 48
    1812:	8f bd       	out	0x2f, r24	; 47
    1814:	8f b5       	in	r24, 0x2f	; 47
    1816:	90 b7       	in	r25, 0x30	; 48
    1818:	80 62       	ori	r24, 0x20	; 32
    181a:	90 bf       	out	0x30, r25	; 48
    181c:	8f bd       	out	0x2f, r24	; 47
    181e:	8f b5       	in	r24, 0x2f	; 47
    1820:	90 b7       	in	r25, 0x30	; 48
    1822:	8f 7e       	andi	r24, 0xEF	; 239
    1824:	90 bf       	out	0x30, r25	; 48
    1826:	8f bd       	out	0x2f, r24	; 47
    1828:	8e b5       	in	r24, 0x2e	; 46
    182a:	9f b5       	in	r25, 0x2f	; 47
    182c:	8e 7f       	andi	r24, 0xFE	; 254
    182e:	9f bd       	out	0x2f, r25	; 47
    1830:	8e bd       	out	0x2e, r24	; 46
    1832:	8e b5       	in	r24, 0x2e	; 46
    1834:	9f b5       	in	r25, 0x2f	; 47
    1836:	82 60       	ori	r24, 0x02	; 2
    1838:	9f bd       	out	0x2f, r25	; 47
    183a:	8e bd       	out	0x2e, r24	; 46
    183c:	8e b5       	in	r24, 0x2e	; 46
    183e:	9f b5       	in	r25, 0x2f	; 47
    1840:	8b 7f       	andi	r24, 0xFB	; 251
    1842:	9f bd       	out	0x2f, r25	; 47
    1844:	8e bd       	out	0x2e, r24	; 46
    1846:	80 e4       	ldi	r24, 0x40	; 64
    1848:	9c e9       	ldi	r25, 0x9C	; 156
    184a:	97 bd       	out	0x27, r25	; 39
    184c:	86 bd       	out	0x26, r24	; 38
    184e:	8f ef       	ldi	r24, 0xFF	; 255
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	99 bd       	out	0x29, r25	; 41
    1854:	88 bd       	out	0x28, r24	; 40
    1856:	08 95       	ret

00001858 <TIMER2_voidFastPWM>:
    1858:	95 b5       	in	r25, 0x25	; 37
    185a:	98 7f       	andi	r25, 0xF8	; 248
    185c:	95 bd       	out	0x25, r25	; 37
    185e:	95 b5       	in	r25, 0x25	; 37
    1860:	93 60       	ori	r25, 0x03	; 3
    1862:	95 bd       	out	0x25, r25	; 37
    1864:	95 b5       	in	r25, 0x25	; 37
    1866:	98 60       	ori	r25, 0x08	; 8
    1868:	95 bd       	out	0x25, r25	; 37
    186a:	95 b5       	in	r25, 0x25	; 37
    186c:	90 64       	ori	r25, 0x40	; 64
    186e:	95 bd       	out	0x25, r25	; 37
    1870:	95 b5       	in	r25, 0x25	; 37
    1872:	90 62       	ori	r25, 0x20	; 32
    1874:	95 bd       	out	0x25, r25	; 37
    1876:	95 b5       	in	r25, 0x25	; 37
    1878:	9f 7e       	andi	r25, 0xEF	; 239
    187a:	95 bd       	out	0x25, r25	; 37
    187c:	68 2f       	mov	r22, r24
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__floatsisf>
    1888:	23 e3       	ldi	r18, 0x33	; 51
    188a:	33 e3       	ldi	r19, 0x33	; 51
    188c:	43 e2       	ldi	r20, 0x23	; 35
    188e:	50 e4       	ldi	r21, 0x40	; 64
    1890:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__mulsf3>
    1894:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__fixunssfsi>
    1898:	63 bd       	out	0x23, r22	; 35
    189a:	08 95       	ret

0000189c <__vector_5>:
    189c:	1f 92       	push	r1
    189e:	0f 92       	push	r0
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	0f 92       	push	r0
    18a4:	11 24       	eor	r1, r1
    18a6:	2f 93       	push	r18
    18a8:	3f 93       	push	r19
    18aa:	4f 93       	push	r20
    18ac:	5f 93       	push	r21
    18ae:	6f 93       	push	r22
    18b0:	7f 93       	push	r23
    18b2:	8f 93       	push	r24
    18b4:	9f 93       	push	r25
    18b6:	af 93       	push	r26
    18b8:	bf 93       	push	r27
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
    18be:	e0 91 1a 07 	lds	r30, 0x071A	; 0x80071a <OVF_ptr>
    18c2:	f0 91 1b 07 	lds	r31, 0x071B	; 0x80071b <OVF_ptr+0x1>
    18c6:	09 95       	icall
    18c8:	ff 91       	pop	r31
    18ca:	ef 91       	pop	r30
    18cc:	bf 91       	pop	r27
    18ce:	af 91       	pop	r26
    18d0:	9f 91       	pop	r25
    18d2:	8f 91       	pop	r24
    18d4:	7f 91       	pop	r23
    18d6:	6f 91       	pop	r22
    18d8:	5f 91       	pop	r21
    18da:	4f 91       	pop	r20
    18dc:	3f 91       	pop	r19
    18de:	2f 91       	pop	r18
    18e0:	0f 90       	pop	r0
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	0f 90       	pop	r0
    18e6:	1f 90       	pop	r1
    18e8:	18 95       	reti

000018ea <__vector_4>:
    18ea:	1f 92       	push	r1
    18ec:	0f 92       	push	r0
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	0f 92       	push	r0
    18f2:	11 24       	eor	r1, r1
    18f4:	2f 93       	push	r18
    18f6:	3f 93       	push	r19
    18f8:	4f 93       	push	r20
    18fa:	5f 93       	push	r21
    18fc:	6f 93       	push	r22
    18fe:	7f 93       	push	r23
    1900:	8f 93       	push	r24
    1902:	9f 93       	push	r25
    1904:	af 93       	push	r26
    1906:	bf 93       	push	r27
    1908:	ef 93       	push	r30
    190a:	ff 93       	push	r31
    190c:	e0 91 18 07 	lds	r30, 0x0718	; 0x800718 <CTC_ptr>
    1910:	f0 91 19 07 	lds	r31, 0x0719	; 0x800719 <CTC_ptr+0x1>
    1914:	09 95       	icall
    1916:	ff 91       	pop	r31
    1918:	ef 91       	pop	r30
    191a:	bf 91       	pop	r27
    191c:	af 91       	pop	r26
    191e:	9f 91       	pop	r25
    1920:	8f 91       	pop	r24
    1922:	7f 91       	pop	r23
    1924:	6f 91       	pop	r22
    1926:	5f 91       	pop	r21
    1928:	4f 91       	pop	r20
    192a:	3f 91       	pop	r19
    192c:	2f 91       	pop	r18
    192e:	0f 90       	pop	r0
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	0f 90       	pop	r0
    1934:	1f 90       	pop	r1
    1936:	18 95       	reti

00001938 <UART_voidInit>:
    1938:	86 e8       	ldi	r24, 0x86	; 134
    193a:	80 bd       	out	0x20, r24	; 32
    193c:	87 e6       	ldi	r24, 0x67	; 103
    193e:	89 b9       	out	0x09, r24	; 9
    1940:	8a b1       	in	r24, 0x0a	; 10
    1942:	88 60       	ori	r24, 0x08	; 8
    1944:	8a b9       	out	0x0a, r24	; 10
    1946:	8a b1       	in	r24, 0x0a	; 10
    1948:	80 61       	ori	r24, 0x10	; 16
    194a:	8a b9       	out	0x0a, r24	; 10
    194c:	08 95       	ret

0000194e <UltraSonic_Sendpulse>:
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	64 e0       	ldi	r22, 0x04	; 4
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1958:	85 e3       	ldi	r24, 0x35	; 53
    195a:	8a 95       	dec	r24
    195c:	f1 f7       	brne	.-4      	; 0x195a <UltraSonic_Sendpulse+0xc>
    195e:	00 00       	nop
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	64 e0       	ldi	r22, 0x04	; 4
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    196a:	08 95       	ret

0000196c <UltraSonic_Read_Echo>:
    196c:	cf 93       	push	r28
    196e:	12 be       	out	0x32, r1	; 50
    1970:	83 e0       	ldi	r24, 0x03	; 3
    1972:	83 bf       	out	0x33, r24	; 51
    1974:	65 e0       	ldi	r22, 0x05	; 5
    1976:	82 e0       	ldi	r24, 0x02	; 2
    1978:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    197c:	88 23       	and	r24, r24
    197e:	d1 f3       	breq	.-12     	; 0x1974 <UltraSonic_Read_Echo+0x8>
    1980:	c0 e0       	ldi	r28, 0x00	; 0
    1982:	07 c0       	rjmp	.+14     	; 0x1992 <UltraSonic_Read_Echo+0x26>
    1984:	08 b6       	in	r0, 0x38	; 56
    1986:	00 fe       	sbrs	r0, 0
    1988:	04 c0       	rjmp	.+8      	; 0x1992 <UltraSonic_Read_Echo+0x26>
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	88 bf       	out	0x38, r24	; 56
    198e:	cf 5f       	subi	r28, 0xFF	; 255
    1990:	12 be       	out	0x32, r1	; 50
    1992:	65 e0       	ldi	r22, 0x05	; 5
    1994:	82 e0       	ldi	r24, 0x02	; 2
    1996:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	99 f3       	breq	.-26     	; 0x1984 <UltraSonic_Read_Echo+0x18>
    199e:	8c 2f       	mov	r24, r28
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	98 2f       	mov	r25, r24
    19a4:	88 27       	eor	r24, r24
    19a6:	22 b7       	in	r18, 0x32	; 50
    19a8:	13 be       	out	0x33, r1	; 51
    19aa:	82 0f       	add	r24, r18
    19ac:	91 1d       	adc	r25, r1
    19ae:	cf 91       	pop	r28
    19b0:	08 95       	ret

000019b2 <UltraSonic_Calc_Distance>:
    19b2:	fc 01       	movw	r30, r24
    19b4:	09 95       	icall
    19b6:	9c 01       	movw	r18, r24
    19b8:	a8 e2       	ldi	r26, 0x28	; 40
    19ba:	b7 e8       	ldi	r27, 0x87	; 135
    19bc:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__umulhisi3>
    19c0:	20 e2       	ldi	r18, 0x20	; 32
    19c2:	31 ea       	ldi	r19, 0xA1	; 161
    19c4:	47 e0       	ldi	r20, 0x07	; 7
    19c6:	50 e0       	ldi	r21, 0x00	; 0
    19c8:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__udivmodsi4>
    19cc:	8f ee       	ldi	r24, 0xEF	; 239
    19ce:	82 0f       	add	r24, r18
    19d0:	08 95       	ret

000019d2 <__fixunssfsi>:
    19d2:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__fp_splitA>
    19d6:	88 f0       	brcs	.+34     	; 0x19fa <__fixunssfsi+0x28>
    19d8:	9f 57       	subi	r25, 0x7F	; 127
    19da:	98 f0       	brcs	.+38     	; 0x1a02 <__fixunssfsi+0x30>
    19dc:	b9 2f       	mov	r27, r25
    19de:	99 27       	eor	r25, r25
    19e0:	b7 51       	subi	r27, 0x17	; 23
    19e2:	b0 f0       	brcs	.+44     	; 0x1a10 <__fixunssfsi+0x3e>
    19e4:	e1 f0       	breq	.+56     	; 0x1a1e <__fixunssfsi+0x4c>
    19e6:	66 0f       	add	r22, r22
    19e8:	77 1f       	adc	r23, r23
    19ea:	88 1f       	adc	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	1a f0       	brmi	.+6      	; 0x19f6 <__fixunssfsi+0x24>
    19f0:	ba 95       	dec	r27
    19f2:	c9 f7       	brne	.-14     	; 0x19e6 <__fixunssfsi+0x14>
    19f4:	14 c0       	rjmp	.+40     	; 0x1a1e <__fixunssfsi+0x4c>
    19f6:	b1 30       	cpi	r27, 0x01	; 1
    19f8:	91 f0       	breq	.+36     	; 0x1a1e <__fixunssfsi+0x4c>
    19fa:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fp_zero>
    19fe:	b1 e0       	ldi	r27, 0x01	; 1
    1a00:	08 95       	ret
    1a02:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__fp_zero>
    1a06:	67 2f       	mov	r22, r23
    1a08:	78 2f       	mov	r23, r24
    1a0a:	88 27       	eor	r24, r24
    1a0c:	b8 5f       	subi	r27, 0xF8	; 248
    1a0e:	39 f0       	breq	.+14     	; 0x1a1e <__fixunssfsi+0x4c>
    1a10:	b9 3f       	cpi	r27, 0xF9	; 249
    1a12:	cc f3       	brlt	.-14     	; 0x1a06 <__fixunssfsi+0x34>
    1a14:	86 95       	lsr	r24
    1a16:	77 95       	ror	r23
    1a18:	67 95       	ror	r22
    1a1a:	b3 95       	inc	r27
    1a1c:	d9 f7       	brne	.-10     	; 0x1a14 <__fixunssfsi+0x42>
    1a1e:	3e f4       	brtc	.+14     	; 0x1a2e <__fixunssfsi+0x5c>
    1a20:	90 95       	com	r25
    1a22:	80 95       	com	r24
    1a24:	70 95       	com	r23
    1a26:	61 95       	neg	r22
    1a28:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	08 95       	ret

00001a30 <__floatunsisf>:
    1a30:	e8 94       	clt
    1a32:	09 c0       	rjmp	.+18     	; 0x1a46 <__floatsisf+0x12>

00001a34 <__floatsisf>:
    1a34:	97 fb       	bst	r25, 7
    1a36:	3e f4       	brtc	.+14     	; 0x1a46 <__floatsisf+0x12>
    1a38:	90 95       	com	r25
    1a3a:	80 95       	com	r24
    1a3c:	70 95       	com	r23
    1a3e:	61 95       	neg	r22
    1a40:	7f 4f       	sbci	r23, 0xFF	; 255
    1a42:	8f 4f       	sbci	r24, 0xFF	; 255
    1a44:	9f 4f       	sbci	r25, 0xFF	; 255
    1a46:	99 23       	and	r25, r25
    1a48:	a9 f0       	breq	.+42     	; 0x1a74 <__floatsisf+0x40>
    1a4a:	f9 2f       	mov	r31, r25
    1a4c:	96 e9       	ldi	r25, 0x96	; 150
    1a4e:	bb 27       	eor	r27, r27
    1a50:	93 95       	inc	r25
    1a52:	f6 95       	lsr	r31
    1a54:	87 95       	ror	r24
    1a56:	77 95       	ror	r23
    1a58:	67 95       	ror	r22
    1a5a:	b7 95       	ror	r27
    1a5c:	f1 11       	cpse	r31, r1
    1a5e:	f8 cf       	rjmp	.-16     	; 0x1a50 <__floatsisf+0x1c>
    1a60:	fa f4       	brpl	.+62     	; 0x1aa0 <__floatsisf+0x6c>
    1a62:	bb 0f       	add	r27, r27
    1a64:	11 f4       	brne	.+4      	; 0x1a6a <__floatsisf+0x36>
    1a66:	60 ff       	sbrs	r22, 0
    1a68:	1b c0       	rjmp	.+54     	; 0x1aa0 <__floatsisf+0x6c>
    1a6a:	6f 5f       	subi	r22, 0xFF	; 255
    1a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a70:	9f 4f       	sbci	r25, 0xFF	; 255
    1a72:	16 c0       	rjmp	.+44     	; 0x1aa0 <__floatsisf+0x6c>
    1a74:	88 23       	and	r24, r24
    1a76:	11 f0       	breq	.+4      	; 0x1a7c <__floatsisf+0x48>
    1a78:	96 e9       	ldi	r25, 0x96	; 150
    1a7a:	11 c0       	rjmp	.+34     	; 0x1a9e <__floatsisf+0x6a>
    1a7c:	77 23       	and	r23, r23
    1a7e:	21 f0       	breq	.+8      	; 0x1a88 <__floatsisf+0x54>
    1a80:	9e e8       	ldi	r25, 0x8E	; 142
    1a82:	87 2f       	mov	r24, r23
    1a84:	76 2f       	mov	r23, r22
    1a86:	05 c0       	rjmp	.+10     	; 0x1a92 <__floatsisf+0x5e>
    1a88:	66 23       	and	r22, r22
    1a8a:	71 f0       	breq	.+28     	; 0x1aa8 <__floatsisf+0x74>
    1a8c:	96 e8       	ldi	r25, 0x86	; 134
    1a8e:	86 2f       	mov	r24, r22
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	2a f0       	brmi	.+10     	; 0x1aa0 <__floatsisf+0x6c>
    1a96:	9a 95       	dec	r25
    1a98:	66 0f       	add	r22, r22
    1a9a:	77 1f       	adc	r23, r23
    1a9c:	88 1f       	adc	r24, r24
    1a9e:	da f7       	brpl	.-10     	; 0x1a96 <__floatsisf+0x62>
    1aa0:	88 0f       	add	r24, r24
    1aa2:	96 95       	lsr	r25
    1aa4:	87 95       	ror	r24
    1aa6:	97 f9       	bld	r25, 7
    1aa8:	08 95       	ret

00001aaa <__fp_split3>:
    1aaa:	57 fd       	sbrc	r21, 7
    1aac:	90 58       	subi	r25, 0x80	; 128
    1aae:	44 0f       	add	r20, r20
    1ab0:	55 1f       	adc	r21, r21
    1ab2:	59 f0       	breq	.+22     	; 0x1aca <__fp_splitA+0x10>
    1ab4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ab6:	71 f0       	breq	.+28     	; 0x1ad4 <__fp_splitA+0x1a>
    1ab8:	47 95       	ror	r20

00001aba <__fp_splitA>:
    1aba:	88 0f       	add	r24, r24
    1abc:	97 fb       	bst	r25, 7
    1abe:	99 1f       	adc	r25, r25
    1ac0:	61 f0       	breq	.+24     	; 0x1ada <__fp_splitA+0x20>
    1ac2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ac4:	79 f0       	breq	.+30     	; 0x1ae4 <__fp_splitA+0x2a>
    1ac6:	87 95       	ror	r24
    1ac8:	08 95       	ret
    1aca:	12 16       	cp	r1, r18
    1acc:	13 06       	cpc	r1, r19
    1ace:	14 06       	cpc	r1, r20
    1ad0:	55 1f       	adc	r21, r21
    1ad2:	f2 cf       	rjmp	.-28     	; 0x1ab8 <__fp_split3+0xe>
    1ad4:	46 95       	lsr	r20
    1ad6:	f1 df       	rcall	.-30     	; 0x1aba <__fp_splitA>
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea <__fp_splitA+0x30>
    1ada:	16 16       	cp	r1, r22
    1adc:	17 06       	cpc	r1, r23
    1ade:	18 06       	cpc	r1, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	f1 cf       	rjmp	.-30     	; 0x1ac6 <__fp_splitA+0xc>
    1ae4:	86 95       	lsr	r24
    1ae6:	71 05       	cpc	r23, r1
    1ae8:	61 05       	cpc	r22, r1
    1aea:	08 94       	sec
    1aec:	08 95       	ret

00001aee <__fp_zero>:
    1aee:	e8 94       	clt

00001af0 <__fp_szero>:
    1af0:	bb 27       	eor	r27, r27
    1af2:	66 27       	eor	r22, r22
    1af4:	77 27       	eor	r23, r23
    1af6:	cb 01       	movw	r24, r22
    1af8:	97 f9       	bld	r25, 7
    1afa:	08 95       	ret

00001afc <__mulsf3>:
    1afc:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3x>
    1b00:	0c 94 02 0e 	jmp	0x1c04	; 0x1c04 <__fp_round>
    1b04:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__fp_pscA>
    1b08:	38 f0       	brcs	.+14     	; 0x1b18 <__mulsf3+0x1c>
    1b0a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__fp_pscB>
    1b0e:	20 f0       	brcs	.+8      	; 0x1b18 <__mulsf3+0x1c>
    1b10:	95 23       	and	r25, r21
    1b12:	11 f0       	breq	.+4      	; 0x1b18 <__mulsf3+0x1c>
    1b14:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__fp_inf>
    1b18:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__fp_nan>
    1b1c:	11 24       	eor	r1, r1
    1b1e:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__fp_szero>

00001b22 <__mulsf3x>:
    1b22:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__fp_split3>
    1b26:	70 f3       	brcs	.-36     	; 0x1b04 <__mulsf3+0x8>

00001b28 <__mulsf3_pse>:
    1b28:	95 9f       	mul	r25, r21
    1b2a:	c1 f3       	breq	.-16     	; 0x1b1c <__mulsf3+0x20>
    1b2c:	95 0f       	add	r25, r21
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	55 1f       	adc	r21, r21
    1b32:	62 9f       	mul	r22, r18
    1b34:	f0 01       	movw	r30, r0
    1b36:	72 9f       	mul	r23, r18
    1b38:	bb 27       	eor	r27, r27
    1b3a:	f0 0d       	add	r31, r0
    1b3c:	b1 1d       	adc	r27, r1
    1b3e:	63 9f       	mul	r22, r19
    1b40:	aa 27       	eor	r26, r26
    1b42:	f0 0d       	add	r31, r0
    1b44:	b1 1d       	adc	r27, r1
    1b46:	aa 1f       	adc	r26, r26
    1b48:	64 9f       	mul	r22, r20
    1b4a:	66 27       	eor	r22, r22
    1b4c:	b0 0d       	add	r27, r0
    1b4e:	a1 1d       	adc	r26, r1
    1b50:	66 1f       	adc	r22, r22
    1b52:	82 9f       	mul	r24, r18
    1b54:	22 27       	eor	r18, r18
    1b56:	b0 0d       	add	r27, r0
    1b58:	a1 1d       	adc	r26, r1
    1b5a:	62 1f       	adc	r22, r18
    1b5c:	73 9f       	mul	r23, r19
    1b5e:	b0 0d       	add	r27, r0
    1b60:	a1 1d       	adc	r26, r1
    1b62:	62 1f       	adc	r22, r18
    1b64:	83 9f       	mul	r24, r19
    1b66:	a0 0d       	add	r26, r0
    1b68:	61 1d       	adc	r22, r1
    1b6a:	22 1f       	adc	r18, r18
    1b6c:	74 9f       	mul	r23, r20
    1b6e:	33 27       	eor	r19, r19
    1b70:	a0 0d       	add	r26, r0
    1b72:	61 1d       	adc	r22, r1
    1b74:	23 1f       	adc	r18, r19
    1b76:	84 9f       	mul	r24, r20
    1b78:	60 0d       	add	r22, r0
    1b7a:	21 1d       	adc	r18, r1
    1b7c:	82 2f       	mov	r24, r18
    1b7e:	76 2f       	mov	r23, r22
    1b80:	6a 2f       	mov	r22, r26
    1b82:	11 24       	eor	r1, r1
    1b84:	9f 57       	subi	r25, 0x7F	; 127
    1b86:	50 40       	sbci	r21, 0x00	; 0
    1b88:	9a f0       	brmi	.+38     	; 0x1bb0 <__mulsf3_pse+0x88>
    1b8a:	f1 f0       	breq	.+60     	; 0x1bc8 <__mulsf3_pse+0xa0>
    1b8c:	88 23       	and	r24, r24
    1b8e:	4a f0       	brmi	.+18     	; 0x1ba2 <__mulsf3_pse+0x7a>
    1b90:	ee 0f       	add	r30, r30
    1b92:	ff 1f       	adc	r31, r31
    1b94:	bb 1f       	adc	r27, r27
    1b96:	66 1f       	adc	r22, r22
    1b98:	77 1f       	adc	r23, r23
    1b9a:	88 1f       	adc	r24, r24
    1b9c:	91 50       	subi	r25, 0x01	; 1
    1b9e:	50 40       	sbci	r21, 0x00	; 0
    1ba0:	a9 f7       	brne	.-22     	; 0x1b8c <__mulsf3_pse+0x64>
    1ba2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ba4:	51 05       	cpc	r21, r1
    1ba6:	80 f0       	brcs	.+32     	; 0x1bc8 <__mulsf3_pse+0xa0>
    1ba8:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__fp_inf>
    1bac:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__fp_szero>
    1bb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb2:	e4 f3       	brlt	.-8      	; 0x1bac <__mulsf3_pse+0x84>
    1bb4:	98 3e       	cpi	r25, 0xE8	; 232
    1bb6:	d4 f3       	brlt	.-12     	; 0x1bac <__mulsf3_pse+0x84>
    1bb8:	86 95       	lsr	r24
    1bba:	77 95       	ror	r23
    1bbc:	67 95       	ror	r22
    1bbe:	b7 95       	ror	r27
    1bc0:	f7 95       	ror	r31
    1bc2:	e7 95       	ror	r30
    1bc4:	9f 5f       	subi	r25, 0xFF	; 255
    1bc6:	c1 f7       	brne	.-16     	; 0x1bb8 <__mulsf3_pse+0x90>
    1bc8:	fe 2b       	or	r31, r30
    1bca:	88 0f       	add	r24, r24
    1bcc:	91 1d       	adc	r25, r1
    1bce:	96 95       	lsr	r25
    1bd0:	87 95       	ror	r24
    1bd2:	97 f9       	bld	r25, 7
    1bd4:	08 95       	ret

00001bd6 <__fp_inf>:
    1bd6:	97 f9       	bld	r25, 7
    1bd8:	9f 67       	ori	r25, 0x7F	; 127
    1bda:	80 e8       	ldi	r24, 0x80	; 128
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	08 95       	ret

00001be2 <__fp_nan>:
    1be2:	9f ef       	ldi	r25, 0xFF	; 255
    1be4:	80 ec       	ldi	r24, 0xC0	; 192
    1be6:	08 95       	ret

00001be8 <__fp_pscA>:
    1be8:	00 24       	eor	r0, r0
    1bea:	0a 94       	dec	r0
    1bec:	16 16       	cp	r1, r22
    1bee:	17 06       	cpc	r1, r23
    1bf0:	18 06       	cpc	r1, r24
    1bf2:	09 06       	cpc	r0, r25
    1bf4:	08 95       	ret

00001bf6 <__fp_pscB>:
    1bf6:	00 24       	eor	r0, r0
    1bf8:	0a 94       	dec	r0
    1bfa:	12 16       	cp	r1, r18
    1bfc:	13 06       	cpc	r1, r19
    1bfe:	14 06       	cpc	r1, r20
    1c00:	05 06       	cpc	r0, r21
    1c02:	08 95       	ret

00001c04 <__fp_round>:
    1c04:	09 2e       	mov	r0, r25
    1c06:	03 94       	inc	r0
    1c08:	00 0c       	add	r0, r0
    1c0a:	11 f4       	brne	.+4      	; 0x1c10 <__fp_round+0xc>
    1c0c:	88 23       	and	r24, r24
    1c0e:	52 f0       	brmi	.+20     	; 0x1c24 <__fp_round+0x20>
    1c10:	bb 0f       	add	r27, r27
    1c12:	40 f4       	brcc	.+16     	; 0x1c24 <__fp_round+0x20>
    1c14:	bf 2b       	or	r27, r31
    1c16:	11 f4       	brne	.+4      	; 0x1c1c <__fp_round+0x18>
    1c18:	60 ff       	sbrs	r22, 0
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <__fp_round+0x20>
    1c1c:	6f 5f       	subi	r22, 0xFF	; 255
    1c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c20:	8f 4f       	sbci	r24, 0xFF	; 255
    1c22:	9f 4f       	sbci	r25, 0xFF	; 255
    1c24:	08 95       	ret

00001c26 <__udivmodsi4>:
    1c26:	a1 e2       	ldi	r26, 0x21	; 33
    1c28:	1a 2e       	mov	r1, r26
    1c2a:	aa 1b       	sub	r26, r26
    1c2c:	bb 1b       	sub	r27, r27
    1c2e:	fd 01       	movw	r30, r26
    1c30:	0d c0       	rjmp	.+26     	; 0x1c4c <__udivmodsi4_ep>

00001c32 <__udivmodsi4_loop>:
    1c32:	aa 1f       	adc	r26, r26
    1c34:	bb 1f       	adc	r27, r27
    1c36:	ee 1f       	adc	r30, r30
    1c38:	ff 1f       	adc	r31, r31
    1c3a:	a2 17       	cp	r26, r18
    1c3c:	b3 07       	cpc	r27, r19
    1c3e:	e4 07       	cpc	r30, r20
    1c40:	f5 07       	cpc	r31, r21
    1c42:	20 f0       	brcs	.+8      	; 0x1c4c <__udivmodsi4_ep>
    1c44:	a2 1b       	sub	r26, r18
    1c46:	b3 0b       	sbc	r27, r19
    1c48:	e4 0b       	sbc	r30, r20
    1c4a:	f5 0b       	sbc	r31, r21

00001c4c <__udivmodsi4_ep>:
    1c4c:	66 1f       	adc	r22, r22
    1c4e:	77 1f       	adc	r23, r23
    1c50:	88 1f       	adc	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	1a 94       	dec	r1
    1c56:	69 f7       	brne	.-38     	; 0x1c32 <__udivmodsi4_loop>
    1c58:	60 95       	com	r22
    1c5a:	70 95       	com	r23
    1c5c:	80 95       	com	r24
    1c5e:	90 95       	com	r25
    1c60:	9b 01       	movw	r18, r22
    1c62:	ac 01       	movw	r20, r24
    1c64:	bd 01       	movw	r22, r26
    1c66:	cf 01       	movw	r24, r30
    1c68:	08 95       	ret

00001c6a <__umulhisi3>:
    1c6a:	a2 9f       	mul	r26, r18
    1c6c:	b0 01       	movw	r22, r0
    1c6e:	b3 9f       	mul	r27, r19
    1c70:	c0 01       	movw	r24, r0
    1c72:	a3 9f       	mul	r26, r19
    1c74:	70 0d       	add	r23, r0
    1c76:	81 1d       	adc	r24, r1
    1c78:	11 24       	eor	r1, r1
    1c7a:	91 1d       	adc	r25, r1
    1c7c:	b2 9f       	mul	r27, r18
    1c7e:	70 0d       	add	r23, r0
    1c80:	81 1d       	adc	r24, r1
    1c82:	11 24       	eor	r1, r1
    1c84:	91 1d       	adc	r25, r1
    1c86:	08 95       	ret

00001c88 <_exit>:
    1c88:	f8 94       	cli

00001c8a <__stop_program>:
    1c8a:	ff cf       	rjmp	.-2      	; 0x1c8a <__stop_program>
