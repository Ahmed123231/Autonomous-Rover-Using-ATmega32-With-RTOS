
Rover_Test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001612  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00001612  000016a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080008c  0080008c  000016d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003cc7  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000106c  00000000  00000000  00005777  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001df3  00000000  00000000  000067e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008fc  00000000  00000000  000085d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c6e  00000000  00000000  00008ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002572  00000000  00000000  00009b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000c0b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_1>
       8:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_2>
       c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_3>
      10:	0c 94 34 09 	jmp	0x1268	; 0x1268 <__vector_4>
      14:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__vector_10>
      2c:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 de 02 	call	0x5bc	; 0x5bc <main>
      8a:	0c 94 07 0b 	jmp	0x160e	; 0x160e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDir>:
      92:	41 30       	cpi	r20, 0x01	; 1
      94:	a1 f5       	brne	.+104    	; 0xfe <DIO_voidSetPinDir+0x6c>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	89 f0       	breq	.+34     	; 0xbc <DIO_voidSetPinDir+0x2a>
      9a:	28 f0       	brcs	.+10     	; 0xa6 <DIO_voidSetPinDir+0x14>
      9c:	82 30       	cpi	r24, 0x02	; 2
      9e:	c9 f0       	breq	.+50     	; 0xd2 <DIO_voidSetPinDir+0x40>
      a0:	83 30       	cpi	r24, 0x03	; 3
      a2:	11 f1       	breq	.+68     	; 0xe8 <DIO_voidSetPinDir+0x56>
      a4:	08 95       	ret
      a6:	2a b3       	in	r18, 0x1a	; 26
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_voidSetPinDir+0x20>
      ae:	88 0f       	add	r24, r24
      b0:	99 1f       	adc	r25, r25
      b2:	6a 95       	dec	r22
      b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_voidSetPinDir+0x1c>
      b6:	82 2b       	or	r24, r18
      b8:	8a bb       	out	0x1a, r24	; 26
      ba:	08 95       	ret
      bc:	27 b3       	in	r18, 0x17	; 23
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_voidSetPinDir+0x36>
      c4:	88 0f       	add	r24, r24
      c6:	99 1f       	adc	r25, r25
      c8:	6a 95       	dec	r22
      ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_voidSetPinDir+0x32>
      cc:	82 2b       	or	r24, r18
      ce:	87 bb       	out	0x17, r24	; 23
      d0:	08 95       	ret
      d2:	24 b3       	in	r18, 0x14	; 20
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_voidSetPinDir+0x4c>
      da:	88 0f       	add	r24, r24
      dc:	99 1f       	adc	r25, r25
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_voidSetPinDir+0x48>
      e2:	82 2b       	or	r24, r18
      e4:	84 bb       	out	0x14, r24	; 20
      e6:	08 95       	ret
      e8:	21 b3       	in	r18, 0x11	; 17
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPinDir+0x62>
      f0:	88 0f       	add	r24, r24
      f2:	99 1f       	adc	r25, r25
      f4:	6a 95       	dec	r22
      f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPinDir+0x5e>
      f8:	82 2b       	or	r24, r18
      fa:	81 bb       	out	0x11, r24	; 17
      fc:	08 95       	ret
      fe:	41 11       	cpse	r20, r1
     100:	37 c0       	rjmp	.+110    	; 0x170 <DIO_voidSetPinDir+0xde>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	91 f0       	breq	.+36     	; 0x12a <DIO_voidSetPinDir+0x98>
     106:	28 f0       	brcs	.+10     	; 0x112 <DIO_voidSetPinDir+0x80>
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	d9 f0       	breq	.+54     	; 0x142 <DIO_voidSetPinDir+0xb0>
     10c:	83 30       	cpi	r24, 0x03	; 3
     10e:	29 f1       	breq	.+74     	; 0x15a <DIO_voidSetPinDir+0xc8>
     110:	08 95       	ret
     112:	2a b3       	in	r18, 0x1a	; 26
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinDir+0x8c>
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	6a 95       	dec	r22
     120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinDir+0x88>
     122:	80 95       	com	r24
     124:	82 23       	and	r24, r18
     126:	8a bb       	out	0x1a, r24	; 26
     128:	08 95       	ret
     12a:	27 b3       	in	r18, 0x17	; 23
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_voidSetPinDir+0xa4>
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_voidSetPinDir+0xa0>
     13a:	80 95       	com	r24
     13c:	82 23       	and	r24, r18
     13e:	87 bb       	out	0x17, r24	; 23
     140:	08 95       	ret
     142:	24 b3       	in	r18, 0x14	; 20
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_voidSetPinDir+0xbc>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	6a 95       	dec	r22
     150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_voidSetPinDir+0xb8>
     152:	80 95       	com	r24
     154:	82 23       	and	r24, r18
     156:	84 bb       	out	0x14, r24	; 20
     158:	08 95       	ret
     15a:	21 b3       	in	r18, 0x11	; 17
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_voidSetPinDir+0xd4>
     162:	88 0f       	add	r24, r24
     164:	99 1f       	adc	r25, r25
     166:	6a 95       	dec	r22
     168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_voidSetPinDir+0xd0>
     16a:	80 95       	com	r24
     16c:	82 23       	and	r24, r18
     16e:	81 bb       	out	0x11, r24	; 17
     170:	08 95       	ret

00000172 <DIO_voidSetPinVal>:
     172:	41 30       	cpi	r20, 0x01	; 1
     174:	a1 f5       	brne	.+104    	; 0x1de <DIO_voidSetPinVal+0x6c>
     176:	81 30       	cpi	r24, 0x01	; 1
     178:	89 f0       	breq	.+34     	; 0x19c <DIO_voidSetPinVal+0x2a>
     17a:	28 f0       	brcs	.+10     	; 0x186 <DIO_voidSetPinVal+0x14>
     17c:	82 30       	cpi	r24, 0x02	; 2
     17e:	c9 f0       	breq	.+50     	; 0x1b2 <DIO_voidSetPinVal+0x40>
     180:	83 30       	cpi	r24, 0x03	; 3
     182:	11 f1       	breq	.+68     	; 0x1c8 <DIO_voidSetPinVal+0x56>
     184:	08 95       	ret
     186:	2b b3       	in	r18, 0x1b	; 27
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_voidSetPinVal+0x20>
     18e:	88 0f       	add	r24, r24
     190:	99 1f       	adc	r25, r25
     192:	6a 95       	dec	r22
     194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_voidSetPinVal+0x1c>
     196:	82 2b       	or	r24, r18
     198:	8b bb       	out	0x1b, r24	; 27
     19a:	08 95       	ret
     19c:	28 b3       	in	r18, 0x18	; 24
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_voidSetPinVal+0x36>
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	6a 95       	dec	r22
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_voidSetPinVal+0x32>
     1ac:	82 2b       	or	r24, r18
     1ae:	88 bb       	out	0x18, r24	; 24
     1b0:	08 95       	ret
     1b2:	25 b3       	in	r18, 0x15	; 21
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_voidSetPinVal+0x4c>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	6a 95       	dec	r22
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_voidSetPinVal+0x48>
     1c2:	82 2b       	or	r24, r18
     1c4:	85 bb       	out	0x15, r24	; 21
     1c6:	08 95       	ret
     1c8:	22 b3       	in	r18, 0x12	; 18
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_voidSetPinVal+0x62>
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	6a 95       	dec	r22
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_voidSetPinVal+0x5e>
     1d8:	82 2b       	or	r24, r18
     1da:	82 bb       	out	0x12, r24	; 18
     1dc:	08 95       	ret
     1de:	41 11       	cpse	r20, r1
     1e0:	37 c0       	rjmp	.+110    	; 0x250 <DIO_voidSetPinVal+0xde>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	91 f0       	breq	.+36     	; 0x20a <DIO_voidSetPinVal+0x98>
     1e6:	28 f0       	brcs	.+10     	; 0x1f2 <DIO_voidSetPinVal+0x80>
     1e8:	82 30       	cpi	r24, 0x02	; 2
     1ea:	d9 f0       	breq	.+54     	; 0x222 <DIO_voidSetPinVal+0xb0>
     1ec:	83 30       	cpi	r24, 0x03	; 3
     1ee:	29 f1       	breq	.+74     	; 0x23a <DIO_voidSetPinVal+0xc8>
     1f0:	08 95       	ret
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_voidSetPinVal+0x8c>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	6a 95       	dec	r22
     200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_voidSetPinVal+0x88>
     202:	80 95       	com	r24
     204:	82 23       	and	r24, r18
     206:	8b bb       	out	0x1b, r24	; 27
     208:	08 95       	ret
     20a:	28 b3       	in	r18, 0x18	; 24
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_voidSetPinVal+0xa4>
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	6a 95       	dec	r22
     218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_voidSetPinVal+0xa0>
     21a:	80 95       	com	r24
     21c:	82 23       	and	r24, r18
     21e:	88 bb       	out	0x18, r24	; 24
     220:	08 95       	ret
     222:	25 b3       	in	r18, 0x15	; 21
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinVal+0xbc>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinVal+0xb8>
     232:	80 95       	com	r24
     234:	82 23       	and	r24, r18
     236:	85 bb       	out	0x15, r24	; 21
     238:	08 95       	ret
     23a:	22 b3       	in	r18, 0x12	; 18
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_voidSetPinVal+0xd4>
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	6a 95       	dec	r22
     248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_voidSetPinVal+0xd0>
     24a:	80 95       	com	r24
     24c:	82 23       	and	r24, r18
     24e:	82 bb       	out	0x12, r24	; 18
     250:	08 95       	ret

00000252 <DIO_u8GetPinVal>:
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	79 f0       	breq	.+30     	; 0x274 <DIO_u8GetPinVal+0x22>
     256:	28 f0       	brcs	.+10     	; 0x262 <DIO_u8GetPinVal+0x10>
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	a9 f0       	breq	.+42     	; 0x286 <DIO_u8GetPinVal+0x34>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	e1 f0       	breq	.+56     	; 0x298 <DIO_u8GetPinVal+0x46>
     260:	24 c0       	rjmp	.+72     	; 0x2aa <DIO_u8GetPinVal+0x58>
     262:	89 b3       	in	r24, 0x19	; 25
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_u8GetPinVal+0x1a>
     268:	95 95       	asr	r25
     26a:	87 95       	ror	r24
     26c:	6a 95       	dec	r22
     26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_u8GetPinVal+0x16>
     270:	81 70       	andi	r24, 0x01	; 1
     272:	08 95       	ret
     274:	86 b3       	in	r24, 0x16	; 22
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_u8GetPinVal+0x2c>
     27a:	95 95       	asr	r25
     27c:	87 95       	ror	r24
     27e:	6a 95       	dec	r22
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_u8GetPinVal+0x28>
     282:	81 70       	andi	r24, 0x01	; 1
     284:	08 95       	ret
     286:	83 b3       	in	r24, 0x13	; 19
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_u8GetPinVal+0x3e>
     28c:	95 95       	asr	r25
     28e:	87 95       	ror	r24
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_u8GetPinVal+0x3a>
     294:	81 70       	andi	r24, 0x01	; 1
     296:	08 95       	ret
     298:	80 b3       	in	r24, 0x10	; 16
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8GetPinVal+0x50>
     29e:	95 95       	asr	r25
     2a0:	87 95       	ror	r24
     2a2:	6a 95       	dec	r22
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_u8GetPinVal+0x4c>
     2a6:	81 70       	andi	r24, 0x01	; 1
     2a8:	08 95       	ret
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	08 95       	ret

000002ae <__vector_1>:
     2ae:	1f 92       	push	r1
     2b0:	0f 92       	push	r0
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	0f 92       	push	r0
     2b6:	11 24       	eor	r1, r1
     2b8:	2f 93       	push	r18
     2ba:	3f 93       	push	r19
     2bc:	4f 93       	push	r20
     2be:	5f 93       	push	r21
     2c0:	6f 93       	push	r22
     2c2:	7f 93       	push	r23
     2c4:	8f 93       	push	r24
     2c6:	9f 93       	push	r25
     2c8:	af 93       	push	r26
     2ca:	bf 93       	push	r27
     2cc:	ef 93       	push	r30
     2ce:	ff 93       	push	r31
     2d0:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <INT_0_PTR>
     2d4:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <INT_0_PTR+0x1>
     2d8:	09 95       	icall
     2da:	ff 91       	pop	r31
     2dc:	ef 91       	pop	r30
     2de:	bf 91       	pop	r27
     2e0:	af 91       	pop	r26
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	7f 91       	pop	r23
     2e8:	6f 91       	pop	r22
     2ea:	5f 91       	pop	r21
     2ec:	4f 91       	pop	r20
     2ee:	3f 91       	pop	r19
     2f0:	2f 91       	pop	r18
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <__vector_2>:
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	2f 93       	push	r18
     308:	3f 93       	push	r19
     30a:	4f 93       	push	r20
     30c:	5f 93       	push	r21
     30e:	6f 93       	push	r22
     310:	7f 93       	push	r23
     312:	8f 93       	push	r24
     314:	9f 93       	push	r25
     316:	af 93       	push	r26
     318:	bf 93       	push	r27
     31a:	ef 93       	push	r30
     31c:	ff 93       	push	r31
     31e:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <INT_1_PTR>
     322:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <INT_1_PTR+0x1>
     326:	09 95       	icall
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	7f 91       	pop	r23
     336:	6f 91       	pop	r22
     338:	5f 91       	pop	r21
     33a:	4f 91       	pop	r20
     33c:	3f 91       	pop	r19
     33e:	2f 91       	pop	r18
     340:	0f 90       	pop	r0
     342:	0f be       	out	0x3f, r0	; 63
     344:	0f 90       	pop	r0
     346:	1f 90       	pop	r1
     348:	18 95       	reti

0000034a <__vector_3>:
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	2f 93       	push	r18
     356:	3f 93       	push	r19
     358:	4f 93       	push	r20
     35a:	5f 93       	push	r21
     35c:	6f 93       	push	r22
     35e:	7f 93       	push	r23
     360:	8f 93       	push	r24
     362:	9f 93       	push	r25
     364:	af 93       	push	r26
     366:	bf 93       	push	r27
     368:	ef 93       	push	r30
     36a:	ff 93       	push	r31
     36c:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <__data_end>
     370:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <__data_end+0x1>
     374:	09 95       	icall
     376:	ff 91       	pop	r31
     378:	ef 91       	pop	r30
     37a:	bf 91       	pop	r27
     37c:	af 91       	pop	r26
     37e:	9f 91       	pop	r25
     380:	8f 91       	pop	r24
     382:	7f 91       	pop	r23
     384:	6f 91       	pop	r22
     386:	5f 91       	pop	r21
     388:	4f 91       	pop	r20
     38a:	3f 91       	pop	r19
     38c:	2f 91       	pop	r18
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
     392:	0f 90       	pop	r0
     394:	1f 90       	pop	r1
     396:	18 95       	reti

00000398 <LCD_voidSendLowerNibble>:
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <LCD_voidSendLowerNibble+0xa>
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <LCD_voidSendLowerNibble+0xc>
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	08 2f       	mov	r16, r24
     3aa:	84 e0       	ldi	r24, 0x04	; 4
     3ac:	89 83       	std	Y+1, r24	; 0x01
     3ae:	85 e0       	ldi	r24, 0x05	; 5
     3b0:	8a 83       	std	Y+2, r24	; 0x02
     3b2:	86 e0       	ldi	r24, 0x06	; 6
     3b4:	8b 83       	std	Y+3, r24	; 0x03
     3b6:	87 e0       	ldi	r24, 0x07	; 7
     3b8:	8c 83       	std	Y+4, r24	; 0x04
     3ba:	10 e0       	ldi	r17, 0x00	; 0
     3bc:	14 c0       	rjmp	.+40     	; 0x3e6 <LCD_voidSendLowerNibble+0x4e>
     3be:	40 2f       	mov	r20, r16
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	01 2e       	mov	r0, r17
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <LCD_voidSendLowerNibble+0x32>
     3c6:	55 95       	asr	r21
     3c8:	47 95       	ror	r20
     3ca:	0a 94       	dec	r0
     3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <LCD_voidSendLowerNibble+0x2e>
     3ce:	41 70       	andi	r20, 0x01	; 1
     3d0:	e1 e0       	ldi	r30, 0x01	; 1
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	ec 0f       	add	r30, r28
     3d6:	fd 1f       	adc	r31, r29
     3d8:	e1 0f       	add	r30, r17
     3da:	f1 1d       	adc	r31, r1
     3dc:	60 81       	ld	r22, Z
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
     3e4:	1f 5f       	subi	r17, 0xFF	; 255
     3e6:	14 30       	cpi	r17, 0x04	; 4
     3e8:	50 f3       	brcs	.-44     	; 0x3be <LCD_voidSendLowerNibble+0x26>
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	08 95       	ret

000003fc <LCD_voidSetEnable>:
     3fc:	41 e0       	ldi	r20, 0x01	; 1
     3fe:	63 e0       	ldi	r22, 0x03	; 3
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
     406:	8f e3       	ldi	r24, 0x3F	; 63
     408:	9f e1       	ldi	r25, 0x1F	; 31
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     410:	00 00       	nop
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	63 e0       	ldi	r22, 0x03	; 3
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
     41c:	08 95       	ret

0000041e <LCD_voidSendCommand>:
     41e:	cf 93       	push	r28
     420:	c8 2f       	mov	r28, r24
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	62 e0       	ldi	r22, 0x02	; 2
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
     436:	8c 2f       	mov	r24, r28
     438:	82 95       	swap	r24
     43a:	8f 70       	andi	r24, 0x0F	; 15
     43c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_voidSendLowerNibble>
     440:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_voidSetEnable>
     444:	8c 2f       	mov	r24, r28
     446:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_voidSendLowerNibble>
     44a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_voidSetEnable>
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <LCD_voidSendData>:
     452:	cf 93       	push	r28
     454:	c8 2f       	mov	r28, r24
     456:	41 e0       	ldi	r20, 0x01	; 1
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	62 e0       	ldi	r22, 0x02	; 2
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
     46a:	8c 2f       	mov	r24, r28
     46c:	82 95       	swap	r24
     46e:	8f 70       	andi	r24, 0x0F	; 15
     470:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_voidSendLowerNibble>
     474:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_voidSetEnable>
     478:	8c 2f       	mov	r24, r28
     47a:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_voidSendLowerNibble>
     47e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_voidSetEnable>
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <LCD_voidInit>:
     486:	2f ef       	ldi	r18, 0xFF	; 255
     488:	83 ef       	ldi	r24, 0xF3	; 243
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	21 50       	subi	r18, 0x01	; 1
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	90 40       	sbci	r25, 0x00	; 0
     492:	e1 f7       	brne	.-8      	; 0x48c <LCD_voidInit+0x6>
     494:	00 c0       	rjmp	.+0      	; 0x496 <LCD_voidInit+0x10>
     496:	00 00       	nop
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_voidSendLowerNibble>
     49e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_voidSetEnable>
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_voidSendLowerNibble>
     4a8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_voidSetEnable>
     4ac:	88 e0       	ldi	r24, 0x08	; 8
     4ae:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_voidSendLowerNibble>
     4b2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_voidSetEnable>
     4b6:	8c e0       	ldi	r24, 0x0C	; 12
     4b8:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_voidSendCommand>
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_voidSendCommand>
     4c2:	08 95       	ret

000004c4 <LCD_voidSendString>:
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	ec 01       	movw	r28, r24
     4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <LCD_voidSendString+0xe>
     4cc:	0e 94 29 02 	call	0x452	; 0x452 <LCD_voidSendData>
     4d0:	21 96       	adiw	r28, 0x01	; 1
     4d2:	88 81       	ld	r24, Y
     4d4:	81 11       	cpse	r24, r1
     4d6:	fa cf       	rjmp	.-12     	; 0x4cc <LCD_voidSendString+0x8>
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <LCD_voidSendNum>:
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	2e 97       	sbiw	r28, 0x0e	; 14
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	ac 01       	movw	r20, r24
     4f6:	89 2b       	or	r24, r25
     4f8:	d1 f5       	brne	.+116    	; 0x56e <LCD_voidSendNum+0x90>
     4fa:	80 e3       	ldi	r24, 0x30	; 48
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	11 e0       	ldi	r17, 0x01	; 1
     504:	47 c0       	rjmp	.+142    	; 0x594 <LCD_voidSendNum+0xb6>
     506:	9a 01       	movw	r18, r20
     508:	ad ec       	ldi	r26, 0xCD	; 205
     50a:	bc ec       	ldi	r27, 0xCC	; 204
     50c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__umulhisi3>
     510:	96 95       	lsr	r25
     512:	87 95       	ror	r24
     514:	96 95       	lsr	r25
     516:	87 95       	ror	r24
     518:	96 95       	lsr	r25
     51a:	87 95       	ror	r24
     51c:	9c 01       	movw	r18, r24
     51e:	22 0f       	add	r18, r18
     520:	33 1f       	adc	r19, r19
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	82 0f       	add	r24, r18
     530:	93 1f       	adc	r25, r19
     532:	9a 01       	movw	r18, r20
     534:	28 1b       	sub	r18, r24
     536:	39 0b       	sbc	r19, r25
     538:	c9 01       	movw	r24, r18
     53a:	e1 2f       	mov	r30, r17
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	99 27       	eor	r25, r25
     540:	c0 96       	adiw	r24, 0x30	; 48
     542:	ee 0f       	add	r30, r30
     544:	ff 1f       	adc	r31, r31
     546:	21 e0       	ldi	r18, 0x01	; 1
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	2c 0f       	add	r18, r28
     54c:	3d 1f       	adc	r19, r29
     54e:	e2 0f       	add	r30, r18
     550:	f3 1f       	adc	r31, r19
     552:	91 83       	std	Z+1, r25	; 0x01
     554:	80 83       	st	Z, r24
     556:	9a 01       	movw	r18, r20
     558:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__umulhisi3>
     55c:	ac 01       	movw	r20, r24
     55e:	56 95       	lsr	r21
     560:	47 95       	ror	r20
     562:	56 95       	lsr	r21
     564:	47 95       	ror	r20
     566:	56 95       	lsr	r21
     568:	47 95       	ror	r20
     56a:	1f 5f       	subi	r17, 0xFF	; 255
     56c:	01 c0       	rjmp	.+2      	; 0x570 <LCD_voidSendNum+0x92>
     56e:	10 e0       	ldi	r17, 0x00	; 0
     570:	41 15       	cp	r20, r1
     572:	51 05       	cpc	r21, r1
     574:	41 f6       	brne	.-112    	; 0x506 <LCD_voidSendNum+0x28>
     576:	0e c0       	rjmp	.+28     	; 0x594 <LCD_voidSendNum+0xb6>
     578:	11 50       	subi	r17, 0x01	; 1
     57a:	e1 2f       	mov	r30, r17
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	ee 0f       	add	r30, r30
     580:	ff 1f       	adc	r31, r31
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	8c 0f       	add	r24, r28
     588:	9d 1f       	adc	r25, r29
     58a:	e8 0f       	add	r30, r24
     58c:	f9 1f       	adc	r31, r25
     58e:	80 81       	ld	r24, Z
     590:	0e 94 29 02 	call	0x452	; 0x452 <LCD_voidSendData>
     594:	11 11       	cpse	r17, r1
     596:	f0 cf       	rjmp	.-32     	; 0x578 <LCD_voidSendNum+0x9a>
     598:	2e 96       	adiw	r28, 0x0e	; 14
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	08 95       	ret

000005ac <LCD_SetGridPos>:
     5ac:	90 e4       	ldi	r25, 0x40	; 64
     5ae:	69 9f       	mul	r22, r25
     5b0:	80 0d       	add	r24, r0
     5b2:	11 24       	eor	r1, r1
     5b4:	80 68       	ori	r24, 0x80	; 128
     5b6:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_voidSendCommand>
     5ba:	08 95       	ret

000005bc <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

Rover_Status Rover_state;
int main(void)
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <main+0x6>
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
			Radar_LCD_Init();
     5c6:	0e 94 90 05 	call	0xb20	; 0xb20 <Radar_LCD_Init>
			Rover_voidMotorsInit();
     5ca:	0e 94 c2 05 	call	0xb84	; 0xb84 <Rover_voidMotorsInit>
			IrSensor_voidInit();
     5ce:	0e 94 58 07 	call	0xeb0	; 0xeb0 <IrSensor_voidInit>
			Buzzer_voidInit();
     5d2:	0e 94 88 07 	call	0xf10	; 0xf10 <Buzzer_voidInit>
			RoverTransmit_Init();
     5d6:	0e 94 ab 07 	call	0xf56	; 0xf56 <RoverTransmit_Init>
			u8 Check_Val=0;
			u8 angle_1=0;
     5da:	19 82       	std	Y+1, r1	; 0x01
			u8 angle_2=90;
     5dc:	8a e5       	ldi	r24, 0x5A	; 90
     5de:	8a 83       	std	Y+2, r24	; 0x02
			u8 distance=0;
			u8 Buffer_state=0;
			Buzzer_voidToggle();
     5e0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Buzzer_voidToggle>
			while (1)
			{
			
			
			
			Radar_LCD_Sweep(&angle_1,&angle_2);
     5e4:	be 01       	movw	r22, r28
     5e6:	6e 5f       	subi	r22, 0xFE	; 254
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	ce 01       	movw	r24, r28
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	0e 94 e7 06 	call	0xdce	; 0xdce <Radar_LCD_Sweep>
			IrSensor_GetDir(); // Update IR sensor readings
     5f2:	0e 94 6d 07 	call	0xeda	; 0xeda <IrSensor_GetDir>
			UltraSonic_Sendpulse(); // Send ultrasonic pulse
     5f6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <UltraSonic_Sendpulse>
			Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo); // Calculate distance
     5fa:	89 e7       	ldi	r24, 0x79	; 121
     5fc:	99 e0       	ldi	r25, 0x09	; 9
     5fe:	0e 94 9c 09 	call	0x1338	; 0x1338 <UltraSonic_Calc_Distance>
     602:	0a e9       	ldi	r16, 0x9A	; 154
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	f8 01       	movw	r30, r16
     608:	80 83       	st	Z, r24
			ROVER_LCD_PrintStatus(&Rover_state); 
     60a:	c8 01       	movw	r24, r16
     60c:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
			RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     610:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
			// Check if the front is clear (IR sensor or ultrasonic distance)
			if (Rover_state.F_Obj == 1 && Rover_state.Distance > 10)
     614:	f8 01       	movw	r30, r16
     616:	81 81       	ldd	r24, Z+1	; 0x01
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	f1 f5       	brne	.+124    	; 0x698 <main+0xdc>
     61c:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Rover_state>
     620:	8b 30       	cpi	r24, 0x0B	; 11
     622:	d0 f1       	brcs	.+116    	; 0x698 <main+0xdc>
			{
				// Move forward
				Rover_voidMOVFWD(50);
     624:	82 e3       	ldi	r24, 0x32	; 50
     626:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Rover_voidMOVFWD>
				ROVER_LCD_PrintStatus(&Rover_state);
     62a:	c8 01       	movw	r24, r16
     62c:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
				RoverTransmitStatus();
     630:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
				// Continue moving forward while the path is clear
				while (Rover_state.F_Obj == 1 && Rover_state.Distance > 10)
     634:	27 c0       	rjmp	.+78     	; 0x684 <main+0xc8>
				{
					IrSensor_GetDir();
     636:	0e 94 6d 07 	call	0xeda	; 0xeda <IrSensor_GetDir>
					UltraSonic_Sendpulse();
     63a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <UltraSonic_Sendpulse>
					Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
     63e:	89 e7       	ldi	r24, 0x79	; 121
     640:	99 e0       	ldi	r25, 0x09	; 9
     642:	0e 94 9c 09 	call	0x1338	; 0x1338 <UltraSonic_Calc_Distance>
     646:	0a e9       	ldi	r16, 0x9A	; 154
     648:	10 e0       	ldi	r17, 0x00	; 0
     64a:	f8 01       	movw	r30, r16
     64c:	80 83       	st	Z, r24
					ROVER_LCD_PrintStatus(&Rover_state);
     64e:	c8 01       	movw	r24, r16
     650:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
					RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     654:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
					// If an object is detected in front, stop the rover
					if (Rover_state.F_Obj != 1 || Rover_state.Distance <= 10)
     658:	f8 01       	movw	r30, r16
     65a:	81 81       	ldd	r24, Z+1	; 0x01
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	21 f4       	brne	.+8      	; 0x668 <main+0xac>
     660:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Rover_state>
     664:	8b 30       	cpi	r24, 0x0B	; 11
     666:	28 f4       	brcc	.+10     	; 0x672 <main+0xb6>
					{
						Rover_voidStop();
     668:	0e 94 54 06 	call	0xca8	; 0xca8 <Rover_voidStop>
						Buzzer_voidToggle();
     66c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Buzzer_voidToggle>
						break;
     670:	4d c2       	rjmp	.+1178   	; 0xb0c <__stack+0x2ad>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     672:	ff ef       	ldi	r31, 0xFF	; 255
     674:	21 ee       	ldi	r18, 0xE1	; 225
     676:	84 e0       	ldi	r24, 0x04	; 4
     678:	f1 50       	subi	r31, 0x01	; 1
     67a:	20 40       	sbci	r18, 0x00	; 0
     67c:	80 40       	sbci	r24, 0x00	; 0
     67e:	e1 f7       	brne	.-8      	; 0x678 <main+0xbc>
     680:	00 c0       	rjmp	.+0      	; 0x682 <main+0xc6>
     682:	00 00       	nop
				// Move forward
				Rover_voidMOVFWD(50);
				ROVER_LCD_PrintStatus(&Rover_state);
				RoverTransmitStatus();
				// Continue moving forward while the path is clear
				while (Rover_state.F_Obj == 1 && Rover_state.Distance > 10)
     684:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <Rover_state+0x1>
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	09 f0       	breq	.+2      	; 0x68e <main+0xd2>
     68c:	3f c2       	rjmp	.+1150   	; 0xb0c <__stack+0x2ad>
     68e:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Rover_state>
     692:	8b 30       	cpi	r24, 0x0B	; 11
     694:	80 f6       	brcc	.-96     	; 0x636 <main+0x7a>
     696:	3a c2       	rjmp	.+1140   	; 0xb0c <__stack+0x2ad>
				}
			}
			else
			{
				// Object detected in front, take a step back
				Rover_voidMOVBCWD(55);
     698:	87 e3       	ldi	r24, 0x37	; 55
     69a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <Rover_voidMOVBCWD>
     69e:	9f ef       	ldi	r25, 0xFF	; 255
     6a0:	e9 e6       	ldi	r30, 0x69	; 105
     6a2:	f8 e1       	ldi	r31, 0x18	; 24
     6a4:	91 50       	subi	r25, 0x01	; 1
     6a6:	e0 40       	sbci	r30, 0x00	; 0
     6a8:	f0 40       	sbci	r31, 0x00	; 0
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <main+0xe8>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <main+0xf2>
     6ae:	00 00       	nop
				_delay_ms(500); // Delay to move back for a short period
				Rover_voidStop();
     6b0:	0e 94 54 06 	call	0xca8	; 0xca8 <Rover_voidStop>
				
				Buzzer_voidToggle();
     6b4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Buzzer_voidToggle>

				// Re-check sensors after taking a step back
				IrSensor_GetDir();
     6b8:	0e 94 6d 07 	call	0xeda	; 0xeda <IrSensor_GetDir>
				UltraSonic_Sendpulse();
     6bc:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <UltraSonic_Sendpulse>
				Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
     6c0:	89 e7       	ldi	r24, 0x79	; 121
     6c2:	99 e0       	ldi	r25, 0x09	; 9
     6c4:	0e 94 9c 09 	call	0x1338	; 0x1338 <UltraSonic_Calc_Distance>
     6c8:	0a e9       	ldi	r16, 0x9A	; 154
     6ca:	10 e0       	ldi	r17, 0x00	; 0
     6cc:	f8 01       	movw	r30, r16
     6ce:	80 83       	st	Z, r24
				ROVER_LCD_PrintStatus(&Rover_state);
     6d0:	c8 01       	movw	r24, r16
     6d2:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
				RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     6d6:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
				// Decide whether to turn right or left based on sensor readings
				if (Rover_state.L_Obj != 1 && Rover_state.R_Obj == 1)
     6da:	f8 01       	movw	r30, r16
     6dc:	82 81       	ldd	r24, Z+2	; 0x02
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	c1 f0       	breq	.+48     	; 0x712 <main+0x156>
     6e2:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <Rover_state+0x3>
     6e6:	91 30       	cpi	r25, 0x01	; 1
     6e8:	a1 f4       	brne	.+40     	; 0x712 <main+0x156>
				{
					// Left is blocked, turn right
					Rover_voidMOVRW(85);
     6ea:	85 e5       	ldi	r24, 0x55	; 85
     6ec:	0e 94 18 06 	call	0xc30	; 0xc30 <Rover_voidMOVRW>
     6f0:	ff ef       	ldi	r31, 0xFF	; 255
     6f2:	22 e7       	ldi	r18, 0x72	; 114
     6f4:	85 e5       	ldi	r24, 0x55	; 85
     6f6:	f1 50       	subi	r31, 0x01	; 1
     6f8:	20 40       	sbci	r18, 0x00	; 0
     6fa:	80 40       	sbci	r24, 0x00	; 0
     6fc:	e1 f7       	brne	.-8      	; 0x6f6 <main+0x13a>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <main+0x144>
     700:	00 00       	nop
					_delay_ms(1750);
					
					Buzzer_voidToggle();
     702:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Buzzer_voidToggle>
					ROVER_LCD_PrintStatus(&Rover_state);
     706:	c8 01       	movw	r24, r16
     708:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
					RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     70c:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     710:	48 c0       	rjmp	.+144    	; 0x7a2 <main+0x1e6>
				}
				else if (Rover_state.R_Obj != 1 && Rover_state.L_Obj == 1)
     712:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <Rover_state+0x3>
     716:	91 30       	cpi	r25, 0x01	; 1
     718:	b9 f0       	breq	.+46     	; 0x748 <main+0x18c>
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	a9 f4       	brne	.+42     	; 0x748 <main+0x18c>
				{
					// Right is blocked, turn left
					Rover_voidMOVLF(85);
     71e:	85 e5       	ldi	r24, 0x55	; 85
     720:	0e 94 36 06 	call	0xc6c	; 0xc6c <Rover_voidMOVLF>
     724:	9f ef       	ldi	r25, 0xFF	; 255
     726:	e2 e7       	ldi	r30, 0x72	; 114
     728:	f5 e5       	ldi	r31, 0x55	; 85
     72a:	91 50       	subi	r25, 0x01	; 1
     72c:	e0 40       	sbci	r30, 0x00	; 0
     72e:	f0 40       	sbci	r31, 0x00	; 0
     730:	e1 f7       	brne	.-8      	; 0x72a <main+0x16e>
     732:	00 c0       	rjmp	.+0      	; 0x734 <main+0x178>
     734:	00 00       	nop
					_delay_ms(1750);
					Buzzer_voidToggle();
     736:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Buzzer_voidToggle>
					ROVER_LCD_PrintStatus(&Rover_state);
     73a:	8a e9       	ldi	r24, 0x9A	; 154
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
					RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     742:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     746:	2d c0       	rjmp	.+90     	; 0x7a2 <main+0x1e6>
				}
				else if (Rover_state.L_Obj == 1)
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	a9 f4       	brne	.+42     	; 0x776 <main+0x1ba>
				{
					// Prefer to turn left if both left and right are clear
					Rover_voidMOVLF(85);
     74c:	85 e5       	ldi	r24, 0x55	; 85
     74e:	0e 94 36 06 	call	0xc6c	; 0xc6c <Rover_voidMOVLF>
     752:	2f ef       	ldi	r18, 0xFF	; 255
     754:	82 e7       	ldi	r24, 0x72	; 114
     756:	95 e5       	ldi	r25, 0x55	; 85
     758:	21 50       	subi	r18, 0x01	; 1
     75a:	80 40       	sbci	r24, 0x00	; 0
     75c:	90 40       	sbci	r25, 0x00	; 0
     75e:	e1 f7       	brne	.-8      	; 0x758 <main+0x19c>
     760:	00 c0       	rjmp	.+0      	; 0x762 <main+0x1a6>
     762:	00 00       	nop
					_delay_ms(1750);
					Buzzer_voidToggle();
     764:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Buzzer_voidToggle>
					ROVER_LCD_PrintStatus(&Rover_state);
     768:	8a e9       	ldi	r24, 0x9A	; 154
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
					RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     770:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     774:	16 c0       	rjmp	.+44     	; 0x7a2 <main+0x1e6>
				}
				else if (Rover_state.R_Obj == 1)
     776:	91 30       	cpi	r25, 0x01	; 1
     778:	a1 f4       	brne	.+40     	; 0x7a2 <main+0x1e6>
				{
					// Turn right if left is blocked and right is clear
					Rover_voidMOVRW(85);
     77a:	85 e5       	ldi	r24, 0x55	; 85
     77c:	0e 94 18 06 	call	0xc30	; 0xc30 <Rover_voidMOVRW>
     780:	ef ef       	ldi	r30, 0xFF	; 255
     782:	f2 e7       	ldi	r31, 0x72	; 114
     784:	25 e5       	ldi	r18, 0x55	; 85
     786:	e1 50       	subi	r30, 0x01	; 1
     788:	f0 40       	sbci	r31, 0x00	; 0
     78a:	20 40       	sbci	r18, 0x00	; 0
     78c:	e1 f7       	brne	.-8      	; 0x786 <main+0x1ca>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <main+0x1d4>
     790:	00 00       	nop
					_delay_ms(1750);
					Buzzer_voidToggle();
     792:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Buzzer_voidToggle>
					ROVER_LCD_PrintStatus(&Rover_state);
     796:	8a e9       	ldi	r24, 0x9A	; 154
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
					RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     79e:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     7a2:	8f ef       	ldi	r24, 0xFF	; 255
     7a4:	99 e6       	ldi	r25, 0x69	; 105
     7a6:	e8 e1       	ldi	r30, 0x18	; 24
     7a8:	81 50       	subi	r24, 0x01	; 1
     7aa:	90 40       	sbci	r25, 0x00	; 0
     7ac:	e0 40       	sbci	r30, 0x00	; 0
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <main+0x1ec>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <main+0x1f6>
     7b2:	00 00       	nop
				}

				// After turning, move forward if the front is clear
				_delay_ms(500); // Allow time for the turn to complete
				Rover_voidStop();
     7b4:	0e 94 54 06 	call	0xca8	; 0xca8 <Rover_voidStop>
				IrSensor_GetDir();
     7b8:	0e 94 6d 07 	call	0xeda	; 0xeda <IrSensor_GetDir>
				UltraSonic_Sendpulse();
     7bc:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <UltraSonic_Sendpulse>
				Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
     7c0:	89 e7       	ldi	r24, 0x79	; 121
     7c2:	99 e0       	ldi	r25, 0x09	; 9
     7c4:	0e 94 9c 09 	call	0x1338	; 0x1338 <UltraSonic_Calc_Distance>
     7c8:	0a e9       	ldi	r16, 0x9A	; 154
     7ca:	10 e0       	ldi	r17, 0x00	; 0
     7cc:	f8 01       	movw	r30, r16
     7ce:	80 83       	st	Z, r24
				ROVER_LCD_PrintStatus(&Rover_state);
     7d0:	c8 01       	movw	r24, r16
     7d2:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
				RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     7d6:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     7da:	ff ef       	ldi	r31, 0xFF	; 255
     7dc:	20 e7       	ldi	r18, 0x70	; 112
     7de:	82 e0       	ldi	r24, 0x02	; 2
     7e0:	f1 50       	subi	r31, 0x01	; 1
     7e2:	20 40       	sbci	r18, 0x00	; 0
     7e4:	80 40       	sbci	r24, 0x00	; 0
     7e6:	e1 f7       	brne	.-8      	; 0x7e0 <main+0x224>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <main+0x22e>
     7ea:	00 00       	nop
				_delay_ms(50);

				if (Rover_state.F_Obj == 1 && Rover_state.Distance > 10)
     7ec:	f8 01       	movw	r30, r16
     7ee:	81 81       	ldd	r24, Z+1	; 0x01
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	b1 f4       	brne	.+44     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     7f4:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <Rover_state>
     7f8:	9b 30       	cpi	r25, 0x0B	; 11
     7fa:	90 f0       	brcs	.+36     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
				{
					Rover_voidMOVFWD(55);
     7fc:	87 e3       	ldi	r24, 0x37	; 55
     7fe:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Rover_voidMOVFWD>
					ROVER_LCD_PrintStatus(&Rover_state);
     802:	c8 01       	movw	r24, r16
     804:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
					RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     808:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     80c:	ff ef       	ldi	r31, 0xFF	; 255
     80e:	20 e7       	ldi	r18, 0x70	; 112
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	f1 50       	subi	r31, 0x01	; 1
     814:	20 40       	sbci	r18, 0x00	; 0
     816:	80 40       	sbci	r24, 0x00	; 0
     818:	e1 f7       	brne	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     81c:	00 00       	nop
     81e:	76 c1       	rjmp	.+748    	; 0xb0c <__stack+0x2ad>
					_delay_ms(50);
				}
				else
				{
					// If both forward and back are blocked, turn left or right based on availability
					if ((Rover_state.F_Obj != 1 || Rover_state.Distance < 10) && Rover_state.B_Obj != 1)
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	29 f4       	brne	.+10     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     824:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Rover_state>
     828:	8a 30       	cpi	r24, 0x0A	; 10
     82a:	08 f0       	brcs	.+2      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     82c:	fc c0       	rjmp	.+504    	; 0xa26 <__stack+0x1c7>
     82e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Rover_state+0x4>
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	09 f4       	brne	.+2      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     836:	f7 c0       	rjmp	.+494    	; 0xa26 <__stack+0x1c7>
					{
						Rover_voidStop();
     838:	0e 94 54 06 	call	0xca8	; 0xca8 <Rover_voidStop>
						Rover_voidMOVLF(85); // Turn left
     83c:	85 e5       	ldi	r24, 0x55	; 85
     83e:	0e 94 36 06 	call	0xc6c	; 0xc6c <Rover_voidMOVLF>
     842:	9f ef       	ldi	r25, 0xFF	; 255
     844:	e2 e7       	ldi	r30, 0x72	; 114
     846:	f5 e5       	ldi	r31, 0x55	; 85
     848:	91 50       	subi	r25, 0x01	; 1
     84a:	e0 40       	sbci	r30, 0x00	; 0
     84c:	f0 40       	sbci	r31, 0x00	; 0
     84e:	e1 f7       	brne	.-8      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     850:	00 c0       	rjmp	.+0      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     852:	00 00       	nop
						_delay_ms(1750);
						Radar_LCD_Sweep(&angle_1, &angle_2);
     854:	be 01       	movw	r22, r28
     856:	6e 5f       	subi	r22, 0xFE	; 254
     858:	7f 4f       	sbci	r23, 0xFF	; 255
     85a:	ce 01       	movw	r24, r28
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	0e 94 e7 06 	call	0xdce	; 0xdce <Radar_LCD_Sweep>
						Buzzer_voidToggle();
     862:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Buzzer_voidToggle>
						ROVER_LCD_PrintStatus(&Rover_state);
     866:	8a e9       	ldi	r24, 0x9A	; 154
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
						RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     86e:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     872:	2f ef       	ldi	r18, 0xFF	; 255
     874:	80 e7       	ldi	r24, 0x70	; 112
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	21 50       	subi	r18, 0x01	; 1
     87a:	80 40       	sbci	r24, 0x00	; 0
     87c:	90 40       	sbci	r25, 0x00	; 0
     87e:	e1 f7       	brne	.-8      	; 0x878 <__stack+0x19>
     880:	00 c0       	rjmp	.+0      	; 0x882 <__stack+0x23>
     882:	00 00       	nop
     884:	39 c0       	rjmp	.+114    	; 0x8f8 <__stack+0x99>
						_delay_ms(50);

						// Check if left is clear while turning
						while (Rover_state.L_Obj == 1)
						{
							IrSensor_GetDir();
     886:	0e 94 6d 07 	call	0xeda	; 0xeda <IrSensor_GetDir>
							ROVER_LCD_PrintStatus(&Rover_state);
     88a:	8a e9       	ldi	r24, 0x9A	; 154
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
							RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     892:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     896:	ef ef       	ldi	r30, 0xFF	; 255
     898:	f0 e7       	ldi	r31, 0x70	; 112
     89a:	22 e0       	ldi	r18, 0x02	; 2
     89c:	e1 50       	subi	r30, 0x01	; 1
     89e:	f0 40       	sbci	r31, 0x00	; 0
     8a0:	20 40       	sbci	r18, 0x00	; 0
     8a2:	e1 f7       	brne	.-8      	; 0x89c <__stack+0x3d>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <__stack+0x47>
     8a6:	00 00       	nop
							_delay_ms(50);
							// If left is blocked, stop turning left
							if (Rover_state.L_Obj == 1)
     8a8:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <Rover_state+0x2>
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	d9 f4       	brne	.+54     	; 0x8e6 <__stack+0x87>
							{
								Rover_voidStop();
     8b0:	0e 94 54 06 	call	0xca8	; 0xca8 <Rover_voidStop>
								Buzzer_voidToggle();
     8b4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Buzzer_voidToggle>
								Radar_LCD_Sweep(&angle_1, &angle_2);
     8b8:	be 01       	movw	r22, r28
     8ba:	6e 5f       	subi	r22, 0xFE	; 254
     8bc:	7f 4f       	sbci	r23, 0xFF	; 255
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	0e 94 e7 06 	call	0xdce	; 0xdce <Radar_LCD_Sweep>
								ROVER_LCD_PrintStatus(&Rover_state);
     8c6:	8a e9       	ldi	r24, 0x9A	; 154
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
								RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     8ce:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	90 e7       	ldi	r25, 0x70	; 112
     8d6:	e2 e0       	ldi	r30, 0x02	; 2
     8d8:	81 50       	subi	r24, 0x01	; 1
     8da:	90 40       	sbci	r25, 0x00	; 0
     8dc:	e0 40       	sbci	r30, 0x00	; 0
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <__stack+0x79>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <__stack+0x83>
     8e2:	00 00       	nop
     8e4:	0d c0       	rjmp	.+26     	; 0x900 <__stack+0xa1>
     8e6:	ff ef       	ldi	r31, 0xFF	; 255
     8e8:	21 ee       	ldi	r18, 0xE1	; 225
     8ea:	84 e0       	ldi	r24, 0x04	; 4
     8ec:	f1 50       	subi	r31, 0x01	; 1
     8ee:	20 40       	sbci	r18, 0x00	; 0
     8f0:	80 40       	sbci	r24, 0x00	; 0
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <__stack+0x8d>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <__stack+0x97>
     8f6:	00 00       	nop
						ROVER_LCD_PrintStatus(&Rover_state);
						RoverTransmitStatus(); // Sending Rover Status with Bluetooth
						_delay_ms(50);

						// Check if left is clear while turning
						while (Rover_state.L_Obj == 1)
     8f8:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <Rover_state+0x2>
     8fc:	81 30       	cpi	r24, 0x01	; 1
     8fe:	19 f2       	breq	.-122    	; 0x886 <__stack+0x27>

							_delay_ms(100); 
						}

						// If left is blocked, turn right instead
						if (Rover_state.L_Obj == 1)
     900:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <Rover_state+0x2>
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	09 f0       	breq	.+2      	; 0x90a <__stack+0xab>
     908:	01 c1       	rjmp	.+514    	; 0xb0c <__stack+0x2ad>
						{
							Rover_voidMOVRW(85); // Turn right if left is blocked
     90a:	85 e5       	ldi	r24, 0x55	; 85
     90c:	0e 94 18 06 	call	0xc30	; 0xc30 <Rover_voidMOVRW>
     910:	9f ef       	ldi	r25, 0xFF	; 255
     912:	e2 e7       	ldi	r30, 0x72	; 114
     914:	f5 e5       	ldi	r31, 0x55	; 85
     916:	91 50       	subi	r25, 0x01	; 1
     918:	e0 40       	sbci	r30, 0x00	; 0
     91a:	f0 40       	sbci	r31, 0x00	; 0
     91c:	e1 f7       	brne	.-8      	; 0x916 <__stack+0xb7>
     91e:	00 c0       	rjmp	.+0      	; 0x920 <__stack+0xc1>
     920:	00 00       	nop
							_delay_ms(1750);
							Radar_LCD_Sweep(&angle_1, &angle_2);
     922:	be 01       	movw	r22, r28
     924:	6e 5f       	subi	r22, 0xFE	; 254
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	ce 01       	movw	r24, r28
     92a:	01 96       	adiw	r24, 0x01	; 1
     92c:	0e 94 e7 06 	call	0xdce	; 0xdce <Radar_LCD_Sweep>
							ROVER_LCD_PrintStatus(&Rover_state);
     930:	8a e9       	ldi	r24, 0x9A	; 154
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
							RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     938:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     93c:	2f ef       	ldi	r18, 0xFF	; 255
     93e:	80 e7       	ldi	r24, 0x70	; 112
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	21 50       	subi	r18, 0x01	; 1
     944:	80 40       	sbci	r24, 0x00	; 0
     946:	90 40       	sbci	r25, 0x00	; 0
     948:	e1 f7       	brne	.-8      	; 0x942 <__stack+0xe3>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <__stack+0xed>
     94c:	00 00       	nop
     94e:	30 c0       	rjmp	.+96     	; 0x9b0 <__stack+0x151>
							_delay_ms(50);
							// Continue turning right until a path is clear
							while (Rover_state.R_Obj == 1)
							{
								IrSensor_GetDir();
     950:	0e 94 6d 07 	call	0xeda	; 0xeda <IrSensor_GetDir>
								ROVER_LCD_PrintStatus(&Rover_state);
     954:	8a e9       	ldi	r24, 0x9A	; 154
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
								RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     95c:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>

								// Stop turning right if the right path is clear
								if (Rover_state.R_Obj != 1)
     960:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Rover_state+0x3>
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	d9 f0       	breq	.+54     	; 0x99e <__stack+0x13f>
								{
									Rover_voidStop();
     968:	0e 94 54 06 	call	0xca8	; 0xca8 <Rover_voidStop>
									Buzzer_voidToggle();
     96c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Buzzer_voidToggle>
									Radar_LCD_Sweep(&angle_1, &angle_2);
     970:	be 01       	movw	r22, r28
     972:	6e 5f       	subi	r22, 0xFE	; 254
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	ce 01       	movw	r24, r28
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	0e 94 e7 06 	call	0xdce	; 0xdce <Radar_LCD_Sweep>
									ROVER_LCD_PrintStatus(&Rover_state);
     97e:	8a e9       	ldi	r24, 0x9A	; 154
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
									RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     986:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     98a:	ef ef       	ldi	r30, 0xFF	; 255
     98c:	f0 e7       	ldi	r31, 0x70	; 112
     98e:	22 e0       	ldi	r18, 0x02	; 2
     990:	e1 50       	subi	r30, 0x01	; 1
     992:	f0 40       	sbci	r31, 0x00	; 0
     994:	20 40       	sbci	r18, 0x00	; 0
     996:	e1 f7       	brne	.-8      	; 0x990 <__stack+0x131>
     998:	00 c0       	rjmp	.+0      	; 0x99a <__stack+0x13b>
     99a:	00 00       	nop
     99c:	0d c0       	rjmp	.+26     	; 0x9b8 <__stack+0x159>
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	91 ee       	ldi	r25, 0xE1	; 225
     9a2:	e4 e0       	ldi	r30, 0x04	; 4
     9a4:	81 50       	subi	r24, 0x01	; 1
     9a6:	90 40       	sbci	r25, 0x00	; 0
     9a8:	e0 40       	sbci	r30, 0x00	; 0
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <__stack+0x145>
     9ac:	00 c0       	rjmp	.+0      	; 0x9ae <__stack+0x14f>
     9ae:	00 00       	nop
							Radar_LCD_Sweep(&angle_1, &angle_2);
							ROVER_LCD_PrintStatus(&Rover_state);
							RoverTransmitStatus(); // Sending Rover Status with Bluetooth
							_delay_ms(50);
							// Continue turning right until a path is clear
							while (Rover_state.R_Obj == 1)
     9b0:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Rover_state+0x3>
     9b4:	81 30       	cpi	r24, 0x01	; 1
     9b6:	61 f2       	breq	.-104    	; 0x950 <__stack+0xf1>

								_delay_ms(100); 
							}

							// Move in the clear direction after turning right
							if (Rover_state.F_Obj == 1 || Rover_state.Distance > 10)
     9b8:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <Rover_state+0x1>
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	21 f0       	breq	.+8      	; 0x9c8 <__stack+0x169>
     9c0:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Rover_state>
     9c4:	8b 30       	cpi	r24, 0x0B	; 11
     9c6:	a8 f0       	brcs	.+42     	; 0x9f2 <__stack+0x193>
							{
								Rover_voidMOVFWD(55); // Move forward
     9c8:	87 e3       	ldi	r24, 0x37	; 55
     9ca:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Rover_voidMOVFWD>
								Buzzer_voidToggle();
     9ce:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Buzzer_voidToggle>
								ROVER_LCD_PrintStatus(&Rover_state);
     9d2:	8a e9       	ldi	r24, 0x9A	; 154
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
								RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     9da:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     9de:	ff ef       	ldi	r31, 0xFF	; 255
     9e0:	20 e7       	ldi	r18, 0x70	; 112
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	f1 50       	subi	r31, 0x01	; 1
     9e6:	20 40       	sbci	r18, 0x00	; 0
     9e8:	80 40       	sbci	r24, 0x00	; 0
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <__stack+0x185>
     9ec:	00 c0       	rjmp	.+0      	; 0x9ee <__stack+0x18f>
     9ee:	00 00       	nop
     9f0:	8d c0       	rjmp	.+282    	; 0xb0c <__stack+0x2ad>
								_delay_ms(50);
							}
							else if (Rover_state.B_Obj == 1)
     9f2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Rover_state+0x4>
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	09 f0       	breq	.+2      	; 0x9fc <__stack+0x19d>
     9fa:	88 c0       	rjmp	.+272    	; 0xb0c <__stack+0x2ad>
							{
								Rover_voidMOVBCWD(55); // Move backward
     9fc:	87 e3       	ldi	r24, 0x37	; 55
     9fe:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <Rover_voidMOVBCWD>
								Buzzer_voidToggle();
     a02:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Buzzer_voidToggle>
								ROVER_LCD_PrintStatus(&Rover_state);
     a06:	8a e9       	ldi	r24, 0x9A	; 154
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
								RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     a0e:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     a12:	9f ef       	ldi	r25, 0xFF	; 255
     a14:	e0 e7       	ldi	r30, 0x70	; 112
     a16:	f2 e0       	ldi	r31, 0x02	; 2
     a18:	91 50       	subi	r25, 0x01	; 1
     a1a:	e0 40       	sbci	r30, 0x00	; 0
     a1c:	f0 40       	sbci	r31, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <__stack+0x1b9>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <__stack+0x1c3>
     a22:	00 00       	nop
     a24:	73 c0       	rjmp	.+230    	; 0xb0c <__stack+0x2ad>
						}
					}
					else
					{
						// If only the front is blocked, move backward
						Rover_voidMOVBCWD(55);
     a26:	87 e3       	ldi	r24, 0x37	; 55
     a28:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <Rover_voidMOVBCWD>
						ROVER_LCD_PrintStatus(&Rover_state);
     a2c:	8a e9       	ldi	r24, 0x9A	; 154
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
						RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     a34:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     a38:	2f ef       	ldi	r18, 0xFF	; 255
     a3a:	80 e7       	ldi	r24, 0x70	; 112
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	21 50       	subi	r18, 0x01	; 1
     a40:	80 40       	sbci	r24, 0x00	; 0
     a42:	90 40       	sbci	r25, 0x00	; 0
     a44:	e1 f7       	brne	.-8      	; 0xa3e <__stack+0x1df>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <__stack+0x1e9>
     a48:	00 00       	nop
						_delay_ms(50);
						UltraSonic_Sendpulse();
     a4a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <UltraSonic_Sendpulse>
						Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
     a4e:	89 e7       	ldi	r24, 0x79	; 121
     a50:	99 e0       	ldi	r25, 0x09	; 9
     a52:	0e 94 9c 09 	call	0x1338	; 0x1338 <UltraSonic_Calc_Distance>
     a56:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Rover_state>
						ROVER_LCD_PrintStatus(&Rover_state);
     a5a:	8a e9       	ldi	r24, 0x9A	; 154
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
						RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     a62:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>

						// Continue moving Backwards while the path is blocked
						while ((Rover_state.F_Obj != 1 || Rover_state.Distance < 10) || Rover_state.B_Obj == 1)
     a66:	43 c0       	rjmp	.+134    	; 0xaee <__stack+0x28f>
						{
							IrSensor_GetDir();
     a68:	0e 94 6d 07 	call	0xeda	; 0xeda <IrSensor_GetDir>
							UltraSonic_Sendpulse();
     a6c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <UltraSonic_Sendpulse>
							Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
     a70:	89 e7       	ldi	r24, 0x79	; 121
     a72:	99 e0       	ldi	r25, 0x09	; 9
     a74:	0e 94 9c 09 	call	0x1338	; 0x1338 <UltraSonic_Calc_Distance>
     a78:	0a e9       	ldi	r16, 0x9A	; 154
     a7a:	10 e0       	ldi	r17, 0x00	; 0
     a7c:	f8 01       	movw	r30, r16
     a7e:	80 83       	st	Z, r24
							ROVER_LCD_PrintStatus(&Rover_state);
     a80:	c8 01       	movw	r24, r16
     a82:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
							RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     a86:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>

							// If both directions are clear  Prefered  Direction is forward
							if (Rover_state.F_Obj == 1 && Rover_state.B_Obj != 1 && Rover_state.Distance > 10)
     a8a:	f8 01       	movw	r30, r16
     a8c:	81 81       	ldd	r24, Z+1	; 0x01
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	29 f5       	brne	.+74     	; 0xadc <__stack+0x27d>
     a92:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Rover_state+0x4>
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	09 f1       	breq	.+66     	; 0xadc <__stack+0x27d>
     a9a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Rover_state>
     a9e:	8b 30       	cpi	r24, 0x0B	; 11
     aa0:	e8 f0       	brcs	.+58     	; 0xadc <__stack+0x27d>
							{
								Rover_voidStop();
     aa2:	0e 94 54 06 	call	0xca8	; 0xca8 <Rover_voidStop>
								Radar_LCD_Sweep(&angle_1, &angle_2);
     aa6:	be 01       	movw	r22, r28
     aa8:	6e 5f       	subi	r22, 0xFE	; 254
     aaa:	7f 4f       	sbci	r23, 0xFF	; 255
     aac:	ce 01       	movw	r24, r28
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	0e 94 e7 06 	call	0xdce	; 0xdce <Radar_LCD_Sweep>
								Rover_voidMOVFWD(55);
     ab4:	87 e3       	ldi	r24, 0x37	; 55
     ab6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Rover_voidMOVFWD>
								ROVER_LCD_PrintStatus(&Rover_state);
     aba:	c8 01       	movw	r24, r16
     abc:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
								RoverTransmitStatus(); // Sending Rover Status with Bluetooth
     ac0:	0e 94 06 08 	call	0x100c	; 0x100c <RoverTransmitStatus>
     ac4:	ff ef       	ldi	r31, 0xFF	; 255
     ac6:	20 e7       	ldi	r18, 0x70	; 112
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	f1 50       	subi	r31, 0x01	; 1
     acc:	20 40       	sbci	r18, 0x00	; 0
     ace:	80 40       	sbci	r24, 0x00	; 0
     ad0:	e1 f7       	brne	.-8      	; 0xaca <__stack+0x26b>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <__stack+0x275>
     ad4:	00 00       	nop
								_delay_ms(50);
								Buzzer_voidToggle();
     ad6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Buzzer_voidToggle>
								break;
     ada:	18 c0       	rjmp	.+48     	; 0xb0c <__stack+0x2ad>
     adc:	9f ef       	ldi	r25, 0xFF	; 255
     ade:	e1 ee       	ldi	r30, 0xE1	; 225
     ae0:	f4 e0       	ldi	r31, 0x04	; 4
     ae2:	91 50       	subi	r25, 0x01	; 1
     ae4:	e0 40       	sbci	r30, 0x00	; 0
     ae6:	f0 40       	sbci	r31, 0x00	; 0
     ae8:	e1 f7       	brne	.-8      	; 0xae2 <__stack+0x283>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <__stack+0x28d>
     aec:	00 00       	nop
						Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
						ROVER_LCD_PrintStatus(&Rover_state);
						RoverTransmitStatus(); // Sending Rover Status with Bluetooth

						// Continue moving Backwards while the path is blocked
						while ((Rover_state.F_Obj != 1 || Rover_state.Distance < 10) || Rover_state.B_Obj == 1)
     aee:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <Rover_state+0x1>
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	09 f0       	breq	.+2      	; 0xaf8 <__stack+0x299>
     af6:	b8 cf       	rjmp	.-144    	; 0xa68 <__stack+0x209>
     af8:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Rover_state>
     afc:	8a 30       	cpi	r24, 0x0A	; 10
     afe:	08 f4       	brcc	.+2      	; 0xb02 <__stack+0x2a3>
     b00:	b3 cf       	rjmp	.-154    	; 0xa68 <__stack+0x209>
     b02:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Rover_state+0x4>
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	09 f4       	brne	.+2      	; 0xb0c <__stack+0x2ad>
     b0a:	ae cf       	rjmp	.-164    	; 0xa68 <__stack+0x209>
     b0c:	2f ef       	ldi	r18, 0xFF	; 255
     b0e:	81 ee       	ldi	r24, 0xE1	; 225
     b10:	94 e0       	ldi	r25, 0x04	; 4
     b12:	21 50       	subi	r18, 0x01	; 1
     b14:	80 40       	sbci	r24, 0x00	; 0
     b16:	90 40       	sbci	r25, 0x00	; 0
     b18:	e1 f7       	brne	.-8      	; 0xb12 <__stack+0x2b3>
     b1a:	00 c0       	rjmp	.+0      	; 0xb1c <__stack+0x2bd>
     b1c:	00 00       	nop
     b1e:	62 cd       	rjmp	.-1340   	; 0x5e4 <main+0x28>

00000b20 <Radar_LCD_Init>:

/******************** Initialize Radar and LCD ********************/
/* Initializes the radar and LCD modules for operation. */
void Radar_LCD_Init(void){
	
			DIO_voidSetPinDir(LCD_DPORT,LCD_D4_PIN,OUTPUT);	
     b20:	41 e0       	ldi	r20, 0x01	; 1
     b22:	64 e0       	ldi	r22, 0x04	; 4
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(LCD_DPORT,LCD_D5_PIN,OUTPUT);	
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	65 e0       	ldi	r22, 0x05	; 5
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(LCD_DPORT,LCD_D6_PIN,OUTPUT);	
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	66 e0       	ldi	r22, 0x06	; 6
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(LCD_DPORT,LCD_D7_PIN,OUTPUT);	
     b3e:	41 e0       	ldi	r20, 0x01	; 1
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(LCD_CPORT,LCD_RS_PIN,OUTPUT);	
     b48:	41 e0       	ldi	r20, 0x01	; 1
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(LCD_CPORT,LCD_RW_PIN,OUTPUT);
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	62 e0       	ldi	r22, 0x02	; 2
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(LCD_CPORT,LCD_EN_PIN,OUTPUT);
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	63 e0       	ldi	r22, 0x03	; 3
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			Servo_Init();
     b66:	0e 94 49 08 	call	0x1092	; 0x1092 <Servo_Init>
			DIO_voidSetPinDir(TRIG_PORT,TRIG_PIN,OUTPUT);
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	64 e0       	ldi	r22, 0x04	; 4
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(ECHO_PORT,ECHO_PIN,INPUT);
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	65 e0       	ldi	r22, 0x05	; 5
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			LCD_voidInit();
     b7e:	0e 94 43 02 	call	0x486	; 0x486 <LCD_voidInit>
     b82:	08 95       	ret

00000b84 <Rover_voidMotorsInit>:
}

/***************** Initialize Rover Motor Control *****************/
/* Initializes the motor control system for the rover. */
void Rover_voidMotorsInit(void){
			DIO_voidSetPinDir(DIO_PORTC,DIO_PIN6,OUTPUT);
     b84:	41 e0       	ldi	r20, 0x01	; 1
     b86:	66 e0       	ldi	r22, 0x06	; 6
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(DIO_PORTC,DIO_PIN7,OUTPUT);
     b8e:	41 e0       	ldi	r20, 0x01	; 1
     b90:	67 e0       	ldi	r22, 0x07	; 7
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(DIO_PORTD,DIO_PIN2,OUTPUT);
     b98:	41 e0       	ldi	r20, 0x01	; 1
     b9a:	62 e0       	ldi	r22, 0x02	; 2
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(DIO_PORTD,DIO_PIN3,OUTPUT);
     ba2:	41 e0       	ldi	r20, 0x01	; 1
     ba4:	63 e0       	ldi	r22, 0x03	; 3
     ba6:	83 e0       	ldi	r24, 0x03	; 3
     ba8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(DIO_PORTD,DIO_PIN7,OUTPUT);
     bac:	41 e0       	ldi	r20, 0x01	; 1
     bae:	67 e0       	ldi	r22, 0x07	; 7
     bb0:	83 e0       	ldi	r24, 0x03	; 3
     bb2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
     bb6:	08 95       	ret

00000bb8 <Rover_voidMOVFWD>:
			
}

/****************** Move Rover Forward (Alternative) ******************/
/* Moves the rover forward at the specified speed (alternative function). */
void Rover_voidMOVFWD(u8 speed){
     bb8:	cf 93       	push	r28
     bba:	c8 2f       	mov	r28, r24
	
			
			DIO_voidSetPinVal(DIO_PORTC,DIO_PIN6,HIGH);
     bbc:	41 e0       	ldi	r20, 0x01	; 1
     bbe:	66 e0       	ldi	r22, 0x06	; 6
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
			DIO_voidSetPinVal(DIO_PORTC,DIO_PIN7,LOW);
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	67 e0       	ldi	r22, 0x07	; 7
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
			DIO_voidSetPinVal(DIO_PORTD,DIO_PIN2,HIGH);
     bd0:	41 e0       	ldi	r20, 0x01	; 1
     bd2:	62 e0       	ldi	r22, 0x02	; 2
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
			DIO_voidSetPinVal(DIO_PORTD,DIO_PIN3,LOW);
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	63 e0       	ldi	r22, 0x03	; 3
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
			TIMER2_voidFastPWM(speed);
     be4:	8c 2f       	mov	r24, r28
     be6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER2_voidFastPWM>
			Rover_state.Direction=1;
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <Rover_state+0x5>
}
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <Rover_voidMOVBCWD>:

/***************** Move Rover Backward at Given Speed *****************/
/* Moves the rover backward at the specified speed. */
void Rover_voidMOVBCWD(u8 speed){
     bf4:	cf 93       	push	r28
     bf6:	c8 2f       	mov	r28, r24
			
			DIO_voidSetPinVal(CTRL1_PORT,CTRL1_PIN1,LOW);
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	66 e0       	ldi	r22, 0x06	; 6
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
			DIO_voidSetPinVal(CTRL1_PORT,CTRL1_PIN2,HIGH);
     c02:	41 e0       	ldi	r20, 0x01	; 1
     c04:	67 e0       	ldi	r22, 0x07	; 7
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
			DIO_voidSetPinVal(CTRL2_PORT,CTRL2_PIN1,LOW);
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	62 e0       	ldi	r22, 0x02	; 2
     c10:	83 e0       	ldi	r24, 0x03	; 3
     c12:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
			DIO_voidSetPinVal(CTRL2_PORT,CTRL2_PIN2,HIGH);
     c16:	41 e0       	ldi	r20, 0x01	; 1
     c18:	63 e0       	ldi	r22, 0x03	; 3
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
			TIMER2_voidFastPWM(speed);
     c20:	8c 2f       	mov	r24, r28
     c22:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER2_voidFastPWM>
			Rover_state.Direction=2;
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <Rover_state+0x5>
}
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <Rover_voidMOVRW>:

/*************** Turn Rover Right at Given Speed ****************/
/* Turns the rover to the right at the specified speed. */
void Rover_voidMOVRW(u8 Rspeed){
     c30:	cf 93       	push	r28
     c32:	c8 2f       	mov	r28, r24
		   
		   DIO_voidSetPinVal(CTRL1_PORT,CTRL1_PIN1,LOW);
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	66 e0       	ldi	r22, 0x06	; 6
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
		   DIO_voidSetPinVal(CTRL1_PORT,CTRL1_PIN2,HIGH);
     c3e:	41 e0       	ldi	r20, 0x01	; 1
     c40:	67 e0       	ldi	r22, 0x07	; 7
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
		   DIO_voidSetPinVal(CTRL2_PORT,CTRL2_PIN1,HIGH);
     c48:	41 e0       	ldi	r20, 0x01	; 1
     c4a:	62 e0       	ldi	r22, 0x02	; 2
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
		   DIO_voidSetPinVal(CTRL2_PORT,CTRL2_PIN2,LOW);
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	63 e0       	ldi	r22, 0x03	; 3
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
		   TIMER2_voidFastPWM(Rspeed);
     c5c:	8c 2f       	mov	r24, r28
     c5e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER2_voidFastPWM>
		   Rover_state.Direction=3;
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <Rover_state+0x5>
}
     c68:	cf 91       	pop	r28
     c6a:	08 95       	ret

00000c6c <Rover_voidMOVLF>:

/*************** Turn Rover Left at Given Speed ****************/
/* Turns the rover to the left at the specified speed. */
void Rover_voidMOVLF(u8 Lspeed){
     c6c:	cf 93       	push	r28
     c6e:	c8 2f       	mov	r28, r24
		
		DIO_voidSetPinVal(CTRL1_PORT,CTRL1_PIN1,HIGH);
     c70:	41 e0       	ldi	r20, 0x01	; 1
     c72:	66 e0       	ldi	r22, 0x06	; 6
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
		DIO_voidSetPinVal(CTRL1_PORT,CTRL1_PIN2,LOW);
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	67 e0       	ldi	r22, 0x07	; 7
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
		DIO_voidSetPinVal(CTRL2_PORT,CTRL2_PIN1,LOW);
     c84:	40 e0       	ldi	r20, 0x00	; 0
     c86:	62 e0       	ldi	r22, 0x02	; 2
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
		DIO_voidSetPinVal(CTRL2_PORT,CTRL2_PIN2,HIGH);
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	63 e0       	ldi	r22, 0x03	; 3
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
		TIMER2_voidFastPWM(Lspeed);
     c98:	8c 2f       	mov	r24, r28
     c9a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER2_voidFastPWM>
		Rover_state.Direction=4;
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <Rover_state+0x5>
}
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <Rover_voidStop>:

/***************** Stop Rover Movement *****************/
/* Stops all movement of the rover. */
void Rover_voidStop(void){
			
			DIO_voidSetPinVal(CTRL1_PORT,CTRL1_PIN1,LOW);
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	66 e0       	ldi	r22, 0x06	; 6
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
			DIO_voidSetPinVal(CTRL1_PORT,CTRL1_PIN2,LOW);
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	67 e0       	ldi	r22, 0x07	; 7
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
			DIO_voidSetPinVal(CTRL2_PORT,CTRL2_PIN1,LOW);
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	62 e0       	ldi	r22, 0x02	; 2
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
			DIO_voidSetPinVal(CTRL2_PORT,CTRL2_PIN2,LOW);
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	63 e0       	ldi	r22, 0x03	; 3
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
			Rover_state.Direction=5;
     cd0:	85 e0       	ldi	r24, 0x05	; 5
     cd2:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <Rover_state+0x5>
			TIMER2_voidFastPWM(0);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER2_voidFastPWM>
     cdc:	08 95       	ret

00000cde <ROVER_LCD_PrintStatus>:
}

/*************** Display Rover Status on LCD ****************/
/* Prints the current status of the rover on the LCD.
   Takes a pointer to the Rover_Status structure. */
void ROVER_LCD_PrintStatus(Rover_Status *rover_state){
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	ec 01       	movw	r28, r24
	
			LCD_SetGridPos(0,0);
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_SetGridPos>
			LCD_voidSendString("Dist:");
     cec:	80 e6       	ldi	r24, 0x60	; 96
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_voidSendString>
			LCD_SetGridPos(6,0);
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	86 e0       	ldi	r24, 0x06	; 6
     cf8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_SetGridPos>
			LCD_voidSendNum(rover_state->Distance);
     cfc:	88 81       	ld	r24, Y
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_voidSendNum>
			// Print direction
			LCD_SetGridPos(9, 0);
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	89 e0       	ldi	r24, 0x09	; 9
     d08:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_SetGridPos>
			LCD_voidSendString("Dir:");
     d0c:	86 e6       	ldi	r24, 0x66	; 102
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_voidSendString>
			LCD_SetGridPos(13, 0);
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	8d e0       	ldi	r24, 0x0D	; 13
     d18:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_SetGridPos>
			switch(rover_state->Direction) {
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	83 30       	cpi	r24, 0x03	; 3
     d20:	a9 f0       	breq	.+42     	; 0xd4c <ROVER_LCD_PrintStatus+0x6e>
     d22:	28 f4       	brcc	.+10     	; 0xd2e <ROVER_LCD_PrintStatus+0x50>
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	41 f0       	breq	.+16     	; 0xd38 <ROVER_LCD_PrintStatus+0x5a>
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	59 f0       	breq	.+22     	; 0xd42 <ROVER_LCD_PrintStatus+0x64>
     d2c:	1e c0       	rjmp	.+60     	; 0xd6a <ROVER_LCD_PrintStatus+0x8c>
     d2e:	84 30       	cpi	r24, 0x04	; 4
     d30:	91 f0       	breq	.+36     	; 0xd56 <ROVER_LCD_PrintStatus+0x78>
     d32:	85 30       	cpi	r24, 0x05	; 5
     d34:	a9 f0       	breq	.+42     	; 0xd60 <ROVER_LCD_PrintStatus+0x82>
     d36:	19 c0       	rjmp	.+50     	; 0xd6a <ROVER_LCD_PrintStatus+0x8c>
				case 1:
				LCD_voidSendString("FWD");
     d38:	8b e6       	ldi	r24, 0x6B	; 107
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_voidSendString>
				break;
     d40:	18 c0       	rjmp	.+48     	; 0xd72 <ROVER_LCD_PrintStatus+0x94>
				case 2:
				LCD_voidSendString("BCW");
     d42:	8f e6       	ldi	r24, 0x6F	; 111
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_voidSendString>
				break;
     d4a:	13 c0       	rjmp	.+38     	; 0xd72 <ROVER_LCD_PrintStatus+0x94>
				case 3:
				LCD_voidSendString("RW");
     d4c:	83 e7       	ldi	r24, 0x73	; 115
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_voidSendString>
				break;
     d54:	0e c0       	rjmp	.+28     	; 0xd72 <ROVER_LCD_PrintStatus+0x94>
				case 4:
				LCD_voidSendString("LF");
     d56:	86 e7       	ldi	r24, 0x76	; 118
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_voidSendString>
				break;
     d5e:	09 c0       	rjmp	.+18     	; 0xd72 <ROVER_LCD_PrintStatus+0x94>
				case 5:
				LCD_voidSendString("Stop");
     d60:	89 e7       	ldi	r24, 0x79	; 121
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_voidSendString>
				break;
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <ROVER_LCD_PrintStatus+0x94>
				default:
				LCD_voidSendString("UNK"); // Unknown direction for safety
     d6a:	8e e7       	ldi	r24, 0x7E	; 126
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_voidSendString>
				break;
			}
			LCD_SetGridPos(0,1);
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_SetGridPos>
			LCD_voidSendString("OBJ");
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_voidSendString>
			LCD_SetGridPos(4,1);
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	84 e0       	ldi	r24, 0x04	; 4
     d86:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_SetGridPos>
			if (rover_state->F_Obj==0)
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	81 11       	cpse	r24, r1
     d8e:	05 c0       	rjmp	.+10     	; 0xd9a <ROVER_LCD_PrintStatus+0xbc>
			{
				LCD_voidSendString("F");
     d90:	87 e7       	ldi	r24, 0x77	; 119
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_voidSendString>
     d98:	17 c0       	rjmp	.+46     	; 0xdc8 <ROVER_LCD_PrintStatus+0xea>
			}else if(rover_state->B_Obj==0){
     d9a:	8c 81       	ldd	r24, Y+4	; 0x04
     d9c:	81 11       	cpse	r24, r1
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <ROVER_LCD_PrintStatus+0xcc>
				LCD_voidSendString("B");
     da0:	86 e8       	ldi	r24, 0x86	; 134
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_voidSendString>
     da8:	0f c0       	rjmp	.+30     	; 0xdc8 <ROVER_LCD_PrintStatus+0xea>
			}
			else if(rover_state->R_Obj==0){
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	81 11       	cpse	r24, r1
     dae:	05 c0       	rjmp	.+10     	; 0xdba <ROVER_LCD_PrintStatus+0xdc>
				LCD_voidSendString("R");
     db0:	88 e8       	ldi	r24, 0x88	; 136
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_voidSendString>
     db8:	07 c0       	rjmp	.+14     	; 0xdc8 <ROVER_LCD_PrintStatus+0xea>
				
			}
			else if(rover_state->L_Obj==0){
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	81 11       	cpse	r24, r1
     dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <ROVER_LCD_PrintStatus+0xea>
				
				LCD_voidSendString("L");
     dc0:	8a e8       	ldi	r24, 0x8A	; 138
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_voidSendString>
			}
	
	
}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <Radar_LCD_Sweep>:
}

/************** Sweep Radar and Display Angles on LCD **************/
/* Performs a radar sweep and updates the angles on the LCD.
   Takes pointers to store the angles swept. Returns the status. */
void Radar_LCD_Sweep(u8 *angle_1 , u8 *angle_2){
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	8c 01       	movw	r16, r24
     dd8:	eb 01       	movw	r28, r22
	
	
			UltraSonic_Sendpulse();
     dda:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <UltraSonic_Sendpulse>
			Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
     dde:	89 e7       	ldi	r24, 0x79	; 121
     de0:	99 e0       	ldi	r25, 0x09	; 9
     de2:	0e 94 9c 09 	call	0x1338	; 0x1338 <UltraSonic_Calc_Distance>
     de6:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Rover_state>
			ROVER_LCD_PrintStatus(&Rover_state);
     dea:	8a e9       	ldi	r24, 0x9A	; 154
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
			// Sweep from 0 to 180 degrees
			for(*angle_1=90 ; *angle_1 < 180; *angle_1 += 1) {
     df2:	8a e5       	ldi	r24, 0x5A	; 90
     df4:	f8 01       	movw	r30, r16
     df6:	80 83       	st	Z, r24
     df8:	0c c0       	rjmp	.+24     	; 0xe12 <Radar_LCD_Sweep+0x44>
				
				Servo_SetAngle(*angle_1);
     dfa:	0e 94 51 08 	call	0x10a2	; 0x10a2 <Servo_SetAngle>
     dfe:	8f e5       	ldi	r24, 0x5F	; 95
     e00:	9a ee       	ldi	r25, 0xEA	; 234
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <Radar_LCD_Sweep+0x34>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <Radar_LCD_Sweep+0x3a>
     e08:	00 00       	nop
	
			UltraSonic_Sendpulse();
			Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
			ROVER_LCD_PrintStatus(&Rover_state);
			// Sweep from 0 to 180 degrees
			for(*angle_1=90 ; *angle_1 < 180; *angle_1 += 1) {
     e0a:	f8 01       	movw	r30, r16
     e0c:	80 81       	ld	r24, Z
     e0e:	8f 5f       	subi	r24, 0xFF	; 255
     e10:	80 83       	st	Z, r24
     e12:	f8 01       	movw	r30, r16
     e14:	80 81       	ld	r24, Z
     e16:	84 3b       	cpi	r24, 0xB4	; 180
     e18:	80 f3       	brcs	.-32     	; 0xdfa <Radar_LCD_Sweep+0x2c>
				
				Servo_SetAngle(*angle_1);
				_delay_ms(15);
			}
			UltraSonic_Sendpulse();
     e1a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <UltraSonic_Sendpulse>
			Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
     e1e:	89 e7       	ldi	r24, 0x79	; 121
     e20:	99 e0       	ldi	r25, 0x09	; 9
     e22:	0e 94 9c 09 	call	0x1338	; 0x1338 <UltraSonic_Calc_Distance>
     e26:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Rover_state>
			ROVER_LCD_PrintStatus(&Rover_state);
     e2a:	8a e9       	ldi	r24, 0x9A	; 154
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
			// Sweep back from 180 to 0 degrees
			for(*angle_2 =*angle_1; *angle_2 >0; *angle_2 -= 1) {
     e32:	f8 01       	movw	r30, r16
     e34:	80 81       	ld	r24, Z
     e36:	88 83       	st	Y, r24
     e38:	0b c0       	rjmp	.+22     	; 0xe50 <Radar_LCD_Sweep+0x82>

				Servo_SetAngle(*angle_2);
     e3a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <Servo_SetAngle>
     e3e:	8f e5       	ldi	r24, 0x5F	; 95
     e40:	9a ee       	ldi	r25, 0xEA	; 234
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <Radar_LCD_Sweep+0x74>
     e46:	00 c0       	rjmp	.+0      	; 0xe48 <Radar_LCD_Sweep+0x7a>
     e48:	00 00       	nop
			}
			UltraSonic_Sendpulse();
			Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
			ROVER_LCD_PrintStatus(&Rover_state);
			// Sweep back from 180 to 0 degrees
			for(*angle_2 =*angle_1; *angle_2 >0; *angle_2 -= 1) {
     e4a:	88 81       	ld	r24, Y
     e4c:	81 50       	subi	r24, 0x01	; 1
     e4e:	88 83       	st	Y, r24
     e50:	88 81       	ld	r24, Y
     e52:	81 11       	cpse	r24, r1
     e54:	f2 cf       	rjmp	.-28     	; 0xe3a <Radar_LCD_Sweep+0x6c>

				Servo_SetAngle(*angle_2);
				_delay_ms(15);
			}
			UltraSonic_Sendpulse();
     e56:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <UltraSonic_Sendpulse>
			Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
     e5a:	89 e7       	ldi	r24, 0x79	; 121
     e5c:	99 e0       	ldi	r25, 0x09	; 9
     e5e:	0e 94 9c 09 	call	0x1338	; 0x1338 <UltraSonic_Calc_Distance>
     e62:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Rover_state>
			ROVER_LCD_PrintStatus(&Rover_state);
     e66:	8a e9       	ldi	r24, 0x9A	; 154
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
			for (*angle_2=0 ;*angle_2 <=90 ; *angle_2 +=1)
     e6e:	18 82       	st	Y, r1
     e70:	0b c0       	rjmp	.+22     	; 0xe88 <Radar_LCD_Sweep+0xba>
			{
				Servo_SetAngle(*angle_2);
     e72:	0e 94 51 08 	call	0x10a2	; 0x10a2 <Servo_SetAngle>
     e76:	ef e5       	ldi	r30, 0x5F	; 95
     e78:	fa ee       	ldi	r31, 0xEA	; 234
     e7a:	31 97       	sbiw	r30, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <Radar_LCD_Sweep+0xac>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <Radar_LCD_Sweep+0xb2>
     e80:	00 00       	nop
				_delay_ms(15);
			}
			UltraSonic_Sendpulse();
			Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
			ROVER_LCD_PrintStatus(&Rover_state);
			for (*angle_2=0 ;*angle_2 <=90 ; *angle_2 +=1)
     e82:	88 81       	ld	r24, Y
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	88 83       	st	Y, r24
     e88:	88 81       	ld	r24, Y
     e8a:	8b 35       	cpi	r24, 0x5B	; 91
     e8c:	90 f3       	brcs	.-28     	; 0xe72 <Radar_LCD_Sweep+0xa4>
			{
				Servo_SetAngle(*angle_2);
				_delay_ms(15);
			}
			UltraSonic_Sendpulse();
     e8e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <UltraSonic_Sendpulse>
			Rover_state.Distance = UltraSonic_Calc_Distance(UltraSonic_Read_Echo);
     e92:	89 e7       	ldi	r24, 0x79	; 121
     e94:	99 e0       	ldi	r25, 0x09	; 9
     e96:	0e 94 9c 09 	call	0x1338	; 0x1338 <UltraSonic_Calc_Distance>
     e9a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Rover_state>
			ROVER_LCD_PrintStatus(&Rover_state);
     e9e:	8a e9       	ldi	r24, 0x9A	; 154
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 6f 06 	call	0xcde	; 0xcde <ROVER_LCD_PrintStatus>
			
			
	
	
	
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret

00000eb0 <IrSensor_voidInit>:
/*************** Initialize IR Sensors ***************/
/* Initializes the IR sensors used for object detection. */
void IrSensor_voidInit(void){
	
	
			DIO_voidSetPinDir(IRF_PORT,IRF_PIN,INPUT);
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	63 e0       	ldi	r22, 0x03	; 3
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(IRB_PORT,IRB_PIN,INPUT);
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(IRR_PORT,IRR_PIN,INPUT);
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
			DIO_voidSetPinDir(IRL_PORT,IRL_PIN,INPUT);
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	62 e0       	ldi	r22, 0x02	; 2
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
     ed8:	08 95       	ret

00000eda <IrSensor_GetDir>:
	
}

/*************** Get Direction from IR Sensors ***************/
/* Reads the direction from the IR sensors to determine obstacles. */
void IrSensor_GetDir(void){
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
	
			// Update the Rover state based on IR sensor readings
			Rover_state.B_Obj = DIO_u8GetPinVal(IRB_PORT, IRB_PIN);
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
     ee6:	ca e9       	ldi	r28, 0x9A	; 154
     ee8:	d0 e0       	ldi	r29, 0x00	; 0
     eea:	8c 83       	std	Y+4, r24	; 0x04
			Rover_state.R_Obj = DIO_u8GetPinVal(IRR_PORT, IRR_PIN);
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
     ef4:	8b 83       	std	Y+3, r24	; 0x03
			Rover_state.L_Obj = DIO_u8GetPinVal(IRL_PORT, IRL_PIN);
     ef6:	62 e0       	ldi	r22, 0x02	; 2
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
     efe:	8a 83       	std	Y+2, r24	; 0x02
			Rover_state.F_Obj = DIO_u8GetPinVal(IRF_PORT, IRF_PIN);
     f00:	63 e0       	ldi	r22, 0x03	; 3
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
     f08:	89 83       	std	Y+1, r24	; 0x01

}
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	08 95       	ret

00000f10 <Buzzer_voidInit>:

/*************** Initialize Buzzer Module ***************/
/* Initializes the buzzer for sound alerts. */
void Buzzer_voidInit(void){
	
			DIO_voidSetPinDir(DIO_PORTA,DIO_PIN3,OUTPUT);
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	63 e0       	ldi	r22, 0x03	; 3
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
     f1a:	08 95       	ret

00000f1c <Buzzer_voidToggle>:

/************ Toggle Buzzer Sound for Alerts ************/
/* Toggles the buzzer sound on and off. */
void Buzzer_voidToggle(void){
	
			DIO_voidSetPinVal(DIO_PORTA,DIO_PIN3,HIGH);
     f1c:	41 e0       	ldi	r20, 0x01	; 1
     f1e:	63 e0       	ldi	r22, 0x03	; 3
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
     f26:	2f ef       	ldi	r18, 0xFF	; 255
     f28:	81 ee       	ldi	r24, 0xE1	; 225
     f2a:	94 e0       	ldi	r25, 0x04	; 4
     f2c:	21 50       	subi	r18, 0x01	; 1
     f2e:	80 40       	sbci	r24, 0x00	; 0
     f30:	90 40       	sbci	r25, 0x00	; 0
     f32:	e1 f7       	brne	.-8      	; 0xf2c <Buzzer_voidToggle+0x10>
     f34:	00 c0       	rjmp	.+0      	; 0xf36 <Buzzer_voidToggle+0x1a>
     f36:	00 00       	nop
			_delay_ms(100);
			DIO_voidSetPinVal(DIO_PORTA,DIO_PIN3,LOW);
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	63 e0       	ldi	r22, 0x03	; 3
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
     f42:	2f ef       	ldi	r18, 0xFF	; 255
     f44:	81 ee       	ldi	r24, 0xE1	; 225
     f46:	94 e0       	ldi	r25, 0x04	; 4
     f48:	21 50       	subi	r18, 0x01	; 1
     f4a:	80 40       	sbci	r24, 0x00	; 0
     f4c:	90 40       	sbci	r25, 0x00	; 0
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <Buzzer_voidToggle+0x2c>
     f50:	00 c0       	rjmp	.+0      	; 0xf52 <Buzzer_voidToggle+0x36>
     f52:	00 00       	nop
     f54:	08 95       	ret

00000f56 <RoverTransmit_Init>:
			_delay_ms(100);
}

/********** Function to Initialize Data Transmission From Rover ********/
void RoverTransmit_Init(void){
	UART_voidInit();
     f56:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <UART_voidInit>
     f5a:	08 95       	ret

00000f5c <SendNumber>:
}
void SendNumber(u16 num) {
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	00 d0       	rcall	.+0      	; 0xf64 <SendNumber+0x8>
     f64:	00 d0       	rcall	.+0      	; 0xf66 <SendNumber+0xa>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <SendNumber+0xc>
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	ac 01       	movw	r20, r24
	char buffer[6]; // Buffer to hold the string representation of the number
	u8 i = 0;
	if (num == 0) {
     f6e:	89 2b       	or	r24, r25
     f70:	91 f5       	brne	.+100    	; 0xfd6 <SendNumber+0x7a>
		UART_voidTX('0');
     f72:	80 e3       	ldi	r24, 0x30	; 48
     f74:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
     f78:	3f c0       	rjmp	.+126    	; 0xff8 <SendNumber+0x9c>
		return;
	}

	// Convert number to string manually
	while (num != 0) {
		buffer[i++] = (num % 10) + '0';
     f7a:	9a 01       	movw	r18, r20
     f7c:	ad ec       	ldi	r26, 0xCD	; 205
     f7e:	bc ec       	ldi	r27, 0xCC	; 204
     f80:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__umulhisi3>
     f84:	96 95       	lsr	r25
     f86:	87 95       	ror	r24
     f88:	96 95       	lsr	r25
     f8a:	87 95       	ror	r24
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
     f90:	9c 01       	movw	r18, r24
     f92:	22 0f       	add	r18, r18
     f94:	33 1f       	adc	r19, r19
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	9a 01       	movw	r18, r20
     fa8:	28 1b       	sub	r18, r24
     faa:	39 0b       	sbc	r19, r25
     fac:	c9 01       	movw	r24, r18
     fae:	e1 e0       	ldi	r30, 0x01	; 1
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	ec 0f       	add	r30, r28
     fb4:	fd 1f       	adc	r31, r29
     fb6:	e1 0f       	add	r30, r17
     fb8:	f1 1d       	adc	r31, r1
     fba:	80 5d       	subi	r24, 0xD0	; 208
     fbc:	80 83       	st	Z, r24
		num /= 10;
     fbe:	9a 01       	movw	r18, r20
     fc0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__umulhisi3>
     fc4:	ac 01       	movw	r20, r24
     fc6:	56 95       	lsr	r21
     fc8:	47 95       	ror	r20
     fca:	56 95       	lsr	r21
     fcc:	47 95       	ror	r20
     fce:	56 95       	lsr	r21
     fd0:	47 95       	ror	r20
		return;
	}

	// Convert number to string manually
	while (num != 0) {
		buffer[i++] = (num % 10) + '0';
     fd2:	1f 5f       	subi	r17, 0xFF	; 255
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <SendNumber+0x7c>
     fd6:	10 e0       	ldi	r17, 0x00	; 0
		UART_voidTX('0');
		return;
	}

	// Convert number to string manually
	while (num != 0) {
     fd8:	41 15       	cp	r20, r1
     fda:	51 05       	cpc	r21, r1
     fdc:	71 f6       	brne	.-100    	; 0xf7a <SendNumber+0x1e>
     fde:	0a c0       	rjmp	.+20     	; 0xff4 <SendNumber+0x98>
		num /= 10;
	}

	// Send the string in the correct order
	while (i > 0) {
		UART_voidTX(buffer[--i]);
     fe0:	11 50       	subi	r17, 0x01	; 1
     fe2:	e1 e0       	ldi	r30, 0x01	; 1
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	ec 0f       	add	r30, r28
     fe8:	fd 1f       	adc	r31, r29
     fea:	e1 0f       	add	r30, r17
     fec:	f1 1d       	adc	r31, r1
     fee:	80 81       	ld	r24, Z
     ff0:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
		buffer[i++] = (num % 10) + '0';
		num /= 10;
	}

	// Send the string in the correct order
	while (i > 0) {
     ff4:	11 11       	cpse	r17, r1
     ff6:	f4 cf       	rjmp	.-24     	; 0xfe0 <SendNumber+0x84>
		UART_voidTX(buffer[--i]);
	}
}
     ff8:	26 96       	adiw	r28, 0x06	; 6
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	08 95       	ret

0000100c <RoverTransmitStatus>:
/********** Function to Transmit Rover Status  ********/
void RoverTransmitStatus(void){
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
	
	UART_voidTX('D');
    1010:	84 e4       	ldi	r24, 0x44	; 68
    1012:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
	//UART_voidTX(':');
	SendNumber(Rover_state.Distance);  // Function to send number
    1016:	ca e9       	ldi	r28, 0x9A	; 154
    1018:	d0 e0       	ldi	r29, 0x00	; 0
    101a:	88 81       	ld	r24, Y
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <SendNumber>
	UART_voidTX('F');
    1022:	86 e4       	ldi	r24, 0x46	; 70
    1024:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
	//UART_voidTX(':');
	SendNumber(Rover_state.F_Obj);    // Function to send number
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <SendNumber>
	UART_voidTX('B');
    1030:	82 e4       	ldi	r24, 0x42	; 66
    1032:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
	UART_voidTX(':');
    1036:	8a e3       	ldi	r24, 0x3A	; 58
    1038:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
	SendNumber(Rover_state.B_Obj);    // Function to send number
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 ae 07 	call	0xf5c	; 0xf5c <SendNumber>
	UART_voidTX('R');
    1044:	82 e5       	ldi	r24, 0x52	; 82
    1046:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
	UART_voidTX(':');
    104a:	8a e3       	ldi	r24, 0x3A	; 58
    104c:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
	SendNumber(Rover_state.R_Obj);    // Function to send number
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 ae 07 	call	0xf5c	; 0xf5c <SendNumber>
	UART_voidTX('L');
    1058:	8c e4       	ldi	r24, 0x4C	; 76
    105a:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
	UART_voidTX(':');
    105e:	8a e3       	ldi	r24, 0x3A	; 58
    1060:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
	SendNumber(Rover_state.L_Obj);    // Function to send number
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 ae 07 	call	0xf5c	; 0xf5c <SendNumber>
	UART_voidTX('D');
    106c:	84 e4       	ldi	r24, 0x44	; 68
    106e:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
	UART_voidTX('i');
    1072:	89 e6       	ldi	r24, 0x69	; 105
    1074:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
	UART_voidTX('r');
    1078:	82 e7       	ldi	r24, 0x72	; 114
    107a:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
	UART_voidTX(':');
    107e:	8a e3       	ldi	r24, 0x3A	; 58
    1080:	0e 94 66 09 	call	0x12cc	; 0x12cc <UART_voidTX>
	SendNumber(Rover_state.Direction);  // Function to send number
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 ae 07 	call	0xf5c	; 0xf5c <SendNumber>
	
}
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <Servo_Init>:
    1092:	41 e0       	ldi	r20, 0x01	; 1
    1094:	65 e0       	ldi	r22, 0x05	; 5
    1096:	83 e0       	ldi	r24, 0x03	; 3
    1098:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
    109c:	0e 94 a8 08 	call	0x1150	; 0x1150 <TIMER1_voidFastPWMICR1>
    10a0:	08 95       	ret

000010a2 <Servo_SetAngle>:
    10a2:	27 e1       	ldi	r18, 0x17	; 23
    10a4:	82 9f       	mul	r24, r18
    10a6:	c0 01       	movw	r24, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	88 51       	subi	r24, 0x18	; 24
    10ac:	9c 4f       	sbci	r25, 0xFC	; 252
    10ae:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <TIMER1_voidSetOCRVal>
    10b2:	08 95       	ret

000010b4 <__vector_11>:
    10b4:	1f 92       	push	r1
    10b6:	0f 92       	push	r0
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	0f 92       	push	r0
    10bc:	11 24       	eor	r1, r1
    10be:	2f 93       	push	r18
    10c0:	3f 93       	push	r19
    10c2:	4f 93       	push	r20
    10c4:	5f 93       	push	r21
    10c6:	6f 93       	push	r22
    10c8:	7f 93       	push	r23
    10ca:	8f 93       	push	r24
    10cc:	9f 93       	push	r25
    10ce:	af 93       	push	r26
    10d0:	bf 93       	push	r27
    10d2:	ef 93       	push	r30
    10d4:	ff 93       	push	r31
    10d6:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <OVF_ptr>
    10da:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <OVF_ptr+0x1>
    10de:	09 95       	icall
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <__vector_10>:
    1102:	1f 92       	push	r1
    1104:	0f 92       	push	r0
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	2f 93       	push	r18
    110e:	3f 93       	push	r19
    1110:	4f 93       	push	r20
    1112:	5f 93       	push	r21
    1114:	6f 93       	push	r22
    1116:	7f 93       	push	r23
    1118:	8f 93       	push	r24
    111a:	9f 93       	push	r25
    111c:	af 93       	push	r26
    111e:	bf 93       	push	r27
    1120:	ef 93       	push	r30
    1122:	ff 93       	push	r31
    1124:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <CTC_ptr>
    1128:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <CTC_ptr+0x1>
    112c:	09 95       	icall
    112e:	ff 91       	pop	r31
    1130:	ef 91       	pop	r30
    1132:	bf 91       	pop	r27
    1134:	af 91       	pop	r26
    1136:	9f 91       	pop	r25
    1138:	8f 91       	pop	r24
    113a:	7f 91       	pop	r23
    113c:	6f 91       	pop	r22
    113e:	5f 91       	pop	r21
    1140:	4f 91       	pop	r20
    1142:	3f 91       	pop	r19
    1144:	2f 91       	pop	r18
    1146:	0f 90       	pop	r0
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	0f 90       	pop	r0
    114c:	1f 90       	pop	r1
    114e:	18 95       	reti

00001150 <TIMER1_voidFastPWMICR1>:
    1150:	8f b5       	in	r24, 0x2f	; 47
    1152:	90 b7       	in	r25, 0x30	; 48
    1154:	8e 7f       	andi	r24, 0xFE	; 254
    1156:	90 bf       	out	0x30, r25	; 48
    1158:	8f bd       	out	0x2f, r24	; 47
    115a:	8f b5       	in	r24, 0x2f	; 47
    115c:	90 b7       	in	r25, 0x30	; 48
    115e:	82 60       	ori	r24, 0x02	; 2
    1160:	90 bf       	out	0x30, r25	; 48
    1162:	8f bd       	out	0x2f, r24	; 47
    1164:	8e b5       	in	r24, 0x2e	; 46
    1166:	9f b5       	in	r25, 0x2f	; 47
    1168:	88 60       	ori	r24, 0x08	; 8
    116a:	9f bd       	out	0x2f, r25	; 47
    116c:	8e bd       	out	0x2e, r24	; 46
    116e:	8e b5       	in	r24, 0x2e	; 46
    1170:	9f b5       	in	r25, 0x2f	; 47
    1172:	80 61       	ori	r24, 0x10	; 16
    1174:	9f bd       	out	0x2f, r25	; 47
    1176:	8e bd       	out	0x2e, r24	; 46
    1178:	8f b5       	in	r24, 0x2f	; 47
    117a:	90 b7       	in	r25, 0x30	; 48
    117c:	80 68       	ori	r24, 0x80	; 128
    117e:	90 bf       	out	0x30, r25	; 48
    1180:	8f bd       	out	0x2f, r24	; 47
    1182:	8f b5       	in	r24, 0x2f	; 47
    1184:	90 b7       	in	r25, 0x30	; 48
    1186:	8f 7b       	andi	r24, 0xBF	; 191
    1188:	90 bf       	out	0x30, r25	; 48
    118a:	8f bd       	out	0x2f, r24	; 47
    118c:	8f b5       	in	r24, 0x2f	; 47
    118e:	90 b7       	in	r25, 0x30	; 48
    1190:	80 62       	ori	r24, 0x20	; 32
    1192:	90 bf       	out	0x30, r25	; 48
    1194:	8f bd       	out	0x2f, r24	; 47
    1196:	8f b5       	in	r24, 0x2f	; 47
    1198:	90 b7       	in	r25, 0x30	; 48
    119a:	8f 7e       	andi	r24, 0xEF	; 239
    119c:	90 bf       	out	0x30, r25	; 48
    119e:	8f bd       	out	0x2f, r24	; 47
    11a0:	8e b5       	in	r24, 0x2e	; 46
    11a2:	9f b5       	in	r25, 0x2f	; 47
    11a4:	8e 7f       	andi	r24, 0xFE	; 254
    11a6:	9f bd       	out	0x2f, r25	; 47
    11a8:	8e bd       	out	0x2e, r24	; 46
    11aa:	8e b5       	in	r24, 0x2e	; 46
    11ac:	9f b5       	in	r25, 0x2f	; 47
    11ae:	82 60       	ori	r24, 0x02	; 2
    11b0:	9f bd       	out	0x2f, r25	; 47
    11b2:	8e bd       	out	0x2e, r24	; 46
    11b4:	8e b5       	in	r24, 0x2e	; 46
    11b6:	9f b5       	in	r25, 0x2f	; 47
    11b8:	8b 7f       	andi	r24, 0xFB	; 251
    11ba:	9f bd       	out	0x2f, r25	; 47
    11bc:	8e bd       	out	0x2e, r24	; 46
    11be:	80 e4       	ldi	r24, 0x40	; 64
    11c0:	9c e9       	ldi	r25, 0x9C	; 156
    11c2:	97 bd       	out	0x27, r25	; 39
    11c4:	86 bd       	out	0x26, r24	; 38
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	99 bd       	out	0x29, r25	; 41
    11cc:	88 bd       	out	0x28, r24	; 40
    11ce:	08 95       	ret

000011d0 <TIMER1_voidSetOCRVal>:
    11d0:	9b bd       	out	0x2b, r25	; 43
    11d2:	8a bd       	out	0x2a, r24	; 42
    11d4:	08 95       	ret

000011d6 <TIMER2_voidFastPWM>:
    11d6:	95 b5       	in	r25, 0x25	; 37
    11d8:	98 7f       	andi	r25, 0xF8	; 248
    11da:	95 bd       	out	0x25, r25	; 37
    11dc:	95 b5       	in	r25, 0x25	; 37
    11de:	93 60       	ori	r25, 0x03	; 3
    11e0:	95 bd       	out	0x25, r25	; 37
    11e2:	95 b5       	in	r25, 0x25	; 37
    11e4:	98 60       	ori	r25, 0x08	; 8
    11e6:	95 bd       	out	0x25, r25	; 37
    11e8:	95 b5       	in	r25, 0x25	; 37
    11ea:	90 64       	ori	r25, 0x40	; 64
    11ec:	95 bd       	out	0x25, r25	; 37
    11ee:	95 b5       	in	r25, 0x25	; 37
    11f0:	90 62       	ori	r25, 0x20	; 32
    11f2:	95 bd       	out	0x25, r25	; 37
    11f4:	95 b5       	in	r25, 0x25	; 37
    11f6:	9f 7e       	andi	r25, 0xEF	; 239
    11f8:	95 bd       	out	0x25, r25	; 37
    11fa:	68 2f       	mov	r22, r24
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__floatsisf>
    1206:	23 e3       	ldi	r18, 0x33	; 51
    1208:	33 e3       	ldi	r19, 0x33	; 51
    120a:	43 e2       	ldi	r20, 0x23	; 35
    120c:	50 e4       	ldi	r21, 0x40	; 64
    120e:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
    1212:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fixunssfsi>
    1216:	63 bd       	out	0x23, r22	; 35
    1218:	08 95       	ret

0000121a <__vector_5>:
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	4f 93       	push	r20
    122a:	5f 93       	push	r21
    122c:	6f 93       	push	r22
    122e:	7f 93       	push	r23
    1230:	8f 93       	push	r24
    1232:	9f 93       	push	r25
    1234:	af 93       	push	r26
    1236:	bf 93       	push	r27
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
    123c:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <OVF_ptr>
    1240:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <OVF_ptr+0x1>
    1244:	09 95       	icall
    1246:	ff 91       	pop	r31
    1248:	ef 91       	pop	r30
    124a:	bf 91       	pop	r27
    124c:	af 91       	pop	r26
    124e:	9f 91       	pop	r25
    1250:	8f 91       	pop	r24
    1252:	7f 91       	pop	r23
    1254:	6f 91       	pop	r22
    1256:	5f 91       	pop	r21
    1258:	4f 91       	pop	r20
    125a:	3f 91       	pop	r19
    125c:	2f 91       	pop	r18
    125e:	0f 90       	pop	r0
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	0f 90       	pop	r0
    1264:	1f 90       	pop	r1
    1266:	18 95       	reti

00001268 <__vector_4>:
    1268:	1f 92       	push	r1
    126a:	0f 92       	push	r0
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	0f 92       	push	r0
    1270:	11 24       	eor	r1, r1
    1272:	2f 93       	push	r18
    1274:	3f 93       	push	r19
    1276:	4f 93       	push	r20
    1278:	5f 93       	push	r21
    127a:	6f 93       	push	r22
    127c:	7f 93       	push	r23
    127e:	8f 93       	push	r24
    1280:	9f 93       	push	r25
    1282:	af 93       	push	r26
    1284:	bf 93       	push	r27
    1286:	ef 93       	push	r30
    1288:	ff 93       	push	r31
    128a:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <CTC_ptr>
    128e:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <CTC_ptr+0x1>
    1292:	09 95       	icall
    1294:	ff 91       	pop	r31
    1296:	ef 91       	pop	r30
    1298:	bf 91       	pop	r27
    129a:	af 91       	pop	r26
    129c:	9f 91       	pop	r25
    129e:	8f 91       	pop	r24
    12a0:	7f 91       	pop	r23
    12a2:	6f 91       	pop	r22
    12a4:	5f 91       	pop	r21
    12a6:	4f 91       	pop	r20
    12a8:	3f 91       	pop	r19
    12aa:	2f 91       	pop	r18
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	0f 90       	pop	r0
    12b2:	1f 90       	pop	r1
    12b4:	18 95       	reti

000012b6 <UART_voidInit>:
    12b6:	86 e8       	ldi	r24, 0x86	; 134
    12b8:	80 bd       	out	0x20, r24	; 32
    12ba:	87 e6       	ldi	r24, 0x67	; 103
    12bc:	89 b9       	out	0x09, r24	; 9
    12be:	8a b1       	in	r24, 0x0a	; 10
    12c0:	88 60       	ori	r24, 0x08	; 8
    12c2:	8a b9       	out	0x0a, r24	; 10
    12c4:	8a b1       	in	r24, 0x0a	; 10
    12c6:	80 61       	ori	r24, 0x10	; 16
    12c8:	8a b9       	out	0x0a, r24	; 10
    12ca:	08 95       	ret

000012cc <UART_voidTX>:
    12cc:	8c b9       	out	0x0c, r24	; 12
    12ce:	5d 9b       	sbis	0x0b, 5	; 11
    12d0:	fe cf       	rjmp	.-4      	; 0x12ce <UART_voidTX+0x2>
    12d2:	08 95       	ret

000012d4 <UltraSonic_Sendpulse>:
    12d4:	41 e0       	ldi	r20, 0x01	; 1
    12d6:	64 e0       	ldi	r22, 0x04	; 4
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12de:	85 e3       	ldi	r24, 0x35	; 53
    12e0:	8a 95       	dec	r24
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <UltraSonic_Sendpulse+0xc>
    12e4:	00 00       	nop
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	64 e0       	ldi	r22, 0x04	; 4
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_voidSetPinVal>
    12f0:	08 95       	ret

000012f2 <UltraSonic_Read_Echo>:
    12f2:	cf 93       	push	r28
    12f4:	12 be       	out	0x32, r1	; 50
    12f6:	83 e0       	ldi	r24, 0x03	; 3
    12f8:	83 bf       	out	0x33, r24	; 51
    12fa:	65 e0       	ldi	r22, 0x05	; 5
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    1302:	88 23       	and	r24, r24
    1304:	d1 f3       	breq	.-12     	; 0x12fa <UltraSonic_Read_Echo+0x8>
    1306:	c0 e0       	ldi	r28, 0x00	; 0
    1308:	07 c0       	rjmp	.+14     	; 0x1318 <UltraSonic_Read_Echo+0x26>
    130a:	08 b6       	in	r0, 0x38	; 56
    130c:	00 fe       	sbrs	r0, 0
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <UltraSonic_Read_Echo+0x26>
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	88 bf       	out	0x38, r24	; 56
    1314:	cf 5f       	subi	r28, 0xFF	; 255
    1316:	12 be       	out	0x32, r1	; 50
    1318:	65 e0       	ldi	r22, 0x05	; 5
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinVal>
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	99 f3       	breq	.-26     	; 0x130a <UltraSonic_Read_Echo+0x18>
    1324:	8c 2f       	mov	r24, r28
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	98 2f       	mov	r25, r24
    132a:	88 27       	eor	r24, r24
    132c:	22 b7       	in	r18, 0x32	; 50
    132e:	13 be       	out	0x33, r1	; 51
    1330:	82 0f       	add	r24, r18
    1332:	91 1d       	adc	r25, r1
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <UltraSonic_Calc_Distance>:
    1338:	fc 01       	movw	r30, r24
    133a:	09 95       	icall
    133c:	9c 01       	movw	r18, r24
    133e:	a8 e2       	ldi	r26, 0x28	; 40
    1340:	b7 e8       	ldi	r27, 0x87	; 135
    1342:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__umulhisi3>
    1346:	20 e2       	ldi	r18, 0x20	; 32
    1348:	31 ea       	ldi	r19, 0xA1	; 161
    134a:	47 e0       	ldi	r20, 0x07	; 7
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__udivmodsi4>
    1352:	8f ee       	ldi	r24, 0xEF	; 239
    1354:	82 0f       	add	r24, r18
    1356:	08 95       	ret

00001358 <__fixunssfsi>:
    1358:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fp_splitA>
    135c:	88 f0       	brcs	.+34     	; 0x1380 <__fixunssfsi+0x28>
    135e:	9f 57       	subi	r25, 0x7F	; 127
    1360:	98 f0       	brcs	.+38     	; 0x1388 <__fixunssfsi+0x30>
    1362:	b9 2f       	mov	r27, r25
    1364:	99 27       	eor	r25, r25
    1366:	b7 51       	subi	r27, 0x17	; 23
    1368:	b0 f0       	brcs	.+44     	; 0x1396 <__fixunssfsi+0x3e>
    136a:	e1 f0       	breq	.+56     	; 0x13a4 <__fixunssfsi+0x4c>
    136c:	66 0f       	add	r22, r22
    136e:	77 1f       	adc	r23, r23
    1370:	88 1f       	adc	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	1a f0       	brmi	.+6      	; 0x137c <__fixunssfsi+0x24>
    1376:	ba 95       	dec	r27
    1378:	c9 f7       	brne	.-14     	; 0x136c <__fixunssfsi+0x14>
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <__fixunssfsi+0x4c>
    137c:	b1 30       	cpi	r27, 0x01	; 1
    137e:	91 f0       	breq	.+36     	; 0x13a4 <__fixunssfsi+0x4c>
    1380:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__fp_zero>
    1384:	b1 e0       	ldi	r27, 0x01	; 1
    1386:	08 95       	ret
    1388:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__fp_zero>
    138c:	67 2f       	mov	r22, r23
    138e:	78 2f       	mov	r23, r24
    1390:	88 27       	eor	r24, r24
    1392:	b8 5f       	subi	r27, 0xF8	; 248
    1394:	39 f0       	breq	.+14     	; 0x13a4 <__fixunssfsi+0x4c>
    1396:	b9 3f       	cpi	r27, 0xF9	; 249
    1398:	cc f3       	brlt	.-14     	; 0x138c <__fixunssfsi+0x34>
    139a:	86 95       	lsr	r24
    139c:	77 95       	ror	r23
    139e:	67 95       	ror	r22
    13a0:	b3 95       	inc	r27
    13a2:	d9 f7       	brne	.-10     	; 0x139a <__fixunssfsi+0x42>
    13a4:	3e f4       	brtc	.+14     	; 0x13b4 <__fixunssfsi+0x5c>
    13a6:	90 95       	com	r25
    13a8:	80 95       	com	r24
    13aa:	70 95       	com	r23
    13ac:	61 95       	neg	r22
    13ae:	7f 4f       	sbci	r23, 0xFF	; 255
    13b0:	8f 4f       	sbci	r24, 0xFF	; 255
    13b2:	9f 4f       	sbci	r25, 0xFF	; 255
    13b4:	08 95       	ret

000013b6 <__floatunsisf>:
    13b6:	e8 94       	clt
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <__floatsisf+0x12>

000013ba <__floatsisf>:
    13ba:	97 fb       	bst	r25, 7
    13bc:	3e f4       	brtc	.+14     	; 0x13cc <__floatsisf+0x12>
    13be:	90 95       	com	r25
    13c0:	80 95       	com	r24
    13c2:	70 95       	com	r23
    13c4:	61 95       	neg	r22
    13c6:	7f 4f       	sbci	r23, 0xFF	; 255
    13c8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ca:	9f 4f       	sbci	r25, 0xFF	; 255
    13cc:	99 23       	and	r25, r25
    13ce:	a9 f0       	breq	.+42     	; 0x13fa <__floatsisf+0x40>
    13d0:	f9 2f       	mov	r31, r25
    13d2:	96 e9       	ldi	r25, 0x96	; 150
    13d4:	bb 27       	eor	r27, r27
    13d6:	93 95       	inc	r25
    13d8:	f6 95       	lsr	r31
    13da:	87 95       	ror	r24
    13dc:	77 95       	ror	r23
    13de:	67 95       	ror	r22
    13e0:	b7 95       	ror	r27
    13e2:	f1 11       	cpse	r31, r1
    13e4:	f8 cf       	rjmp	.-16     	; 0x13d6 <__floatsisf+0x1c>
    13e6:	fa f4       	brpl	.+62     	; 0x1426 <__floatsisf+0x6c>
    13e8:	bb 0f       	add	r27, r27
    13ea:	11 f4       	brne	.+4      	; 0x13f0 <__floatsisf+0x36>
    13ec:	60 ff       	sbrs	r22, 0
    13ee:	1b c0       	rjmp	.+54     	; 0x1426 <__floatsisf+0x6c>
    13f0:	6f 5f       	subi	r22, 0xFF	; 255
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	8f 4f       	sbci	r24, 0xFF	; 255
    13f6:	9f 4f       	sbci	r25, 0xFF	; 255
    13f8:	16 c0       	rjmp	.+44     	; 0x1426 <__floatsisf+0x6c>
    13fa:	88 23       	and	r24, r24
    13fc:	11 f0       	breq	.+4      	; 0x1402 <__floatsisf+0x48>
    13fe:	96 e9       	ldi	r25, 0x96	; 150
    1400:	11 c0       	rjmp	.+34     	; 0x1424 <__floatsisf+0x6a>
    1402:	77 23       	and	r23, r23
    1404:	21 f0       	breq	.+8      	; 0x140e <__floatsisf+0x54>
    1406:	9e e8       	ldi	r25, 0x8E	; 142
    1408:	87 2f       	mov	r24, r23
    140a:	76 2f       	mov	r23, r22
    140c:	05 c0       	rjmp	.+10     	; 0x1418 <__floatsisf+0x5e>
    140e:	66 23       	and	r22, r22
    1410:	71 f0       	breq	.+28     	; 0x142e <__floatsisf+0x74>
    1412:	96 e8       	ldi	r25, 0x86	; 134
    1414:	86 2f       	mov	r24, r22
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	2a f0       	brmi	.+10     	; 0x1426 <__floatsisf+0x6c>
    141c:	9a 95       	dec	r25
    141e:	66 0f       	add	r22, r22
    1420:	77 1f       	adc	r23, r23
    1422:	88 1f       	adc	r24, r24
    1424:	da f7       	brpl	.-10     	; 0x141c <__floatsisf+0x62>
    1426:	88 0f       	add	r24, r24
    1428:	96 95       	lsr	r25
    142a:	87 95       	ror	r24
    142c:	97 f9       	bld	r25, 7
    142e:	08 95       	ret

00001430 <__fp_split3>:
    1430:	57 fd       	sbrc	r21, 7
    1432:	90 58       	subi	r25, 0x80	; 128
    1434:	44 0f       	add	r20, r20
    1436:	55 1f       	adc	r21, r21
    1438:	59 f0       	breq	.+22     	; 0x1450 <__fp_splitA+0x10>
    143a:	5f 3f       	cpi	r21, 0xFF	; 255
    143c:	71 f0       	breq	.+28     	; 0x145a <__fp_splitA+0x1a>
    143e:	47 95       	ror	r20

00001440 <__fp_splitA>:
    1440:	88 0f       	add	r24, r24
    1442:	97 fb       	bst	r25, 7
    1444:	99 1f       	adc	r25, r25
    1446:	61 f0       	breq	.+24     	; 0x1460 <__fp_splitA+0x20>
    1448:	9f 3f       	cpi	r25, 0xFF	; 255
    144a:	79 f0       	breq	.+30     	; 0x146a <__fp_splitA+0x2a>
    144c:	87 95       	ror	r24
    144e:	08 95       	ret
    1450:	12 16       	cp	r1, r18
    1452:	13 06       	cpc	r1, r19
    1454:	14 06       	cpc	r1, r20
    1456:	55 1f       	adc	r21, r21
    1458:	f2 cf       	rjmp	.-28     	; 0x143e <__fp_split3+0xe>
    145a:	46 95       	lsr	r20
    145c:	f1 df       	rcall	.-30     	; 0x1440 <__fp_splitA>
    145e:	08 c0       	rjmp	.+16     	; 0x1470 <__fp_splitA+0x30>
    1460:	16 16       	cp	r1, r22
    1462:	17 06       	cpc	r1, r23
    1464:	18 06       	cpc	r1, r24
    1466:	99 1f       	adc	r25, r25
    1468:	f1 cf       	rjmp	.-30     	; 0x144c <__fp_splitA+0xc>
    146a:	86 95       	lsr	r24
    146c:	71 05       	cpc	r23, r1
    146e:	61 05       	cpc	r22, r1
    1470:	08 94       	sec
    1472:	08 95       	ret

00001474 <__fp_zero>:
    1474:	e8 94       	clt

00001476 <__fp_szero>:
    1476:	bb 27       	eor	r27, r27
    1478:	66 27       	eor	r22, r22
    147a:	77 27       	eor	r23, r23
    147c:	cb 01       	movw	r24, r22
    147e:	97 f9       	bld	r25, 7
    1480:	08 95       	ret

00001482 <__mulsf3>:
    1482:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__mulsf3x>
    1486:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_round>
    148a:	0e 94 b7 0a 	call	0x156e	; 0x156e <__fp_pscA>
    148e:	38 f0       	brcs	.+14     	; 0x149e <__mulsf3+0x1c>
    1490:	0e 94 be 0a 	call	0x157c	; 0x157c <__fp_pscB>
    1494:	20 f0       	brcs	.+8      	; 0x149e <__mulsf3+0x1c>
    1496:	95 23       	and	r25, r21
    1498:	11 f0       	breq	.+4      	; 0x149e <__mulsf3+0x1c>
    149a:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__fp_inf>
    149e:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__fp_nan>
    14a2:	11 24       	eor	r1, r1
    14a4:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__fp_szero>

000014a8 <__mulsf3x>:
    14a8:	0e 94 18 0a 	call	0x1430	; 0x1430 <__fp_split3>
    14ac:	70 f3       	brcs	.-36     	; 0x148a <__mulsf3+0x8>

000014ae <__mulsf3_pse>:
    14ae:	95 9f       	mul	r25, r21
    14b0:	c1 f3       	breq	.-16     	; 0x14a2 <__mulsf3+0x20>
    14b2:	95 0f       	add	r25, r21
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	55 1f       	adc	r21, r21
    14b8:	62 9f       	mul	r22, r18
    14ba:	f0 01       	movw	r30, r0
    14bc:	72 9f       	mul	r23, r18
    14be:	bb 27       	eor	r27, r27
    14c0:	f0 0d       	add	r31, r0
    14c2:	b1 1d       	adc	r27, r1
    14c4:	63 9f       	mul	r22, r19
    14c6:	aa 27       	eor	r26, r26
    14c8:	f0 0d       	add	r31, r0
    14ca:	b1 1d       	adc	r27, r1
    14cc:	aa 1f       	adc	r26, r26
    14ce:	64 9f       	mul	r22, r20
    14d0:	66 27       	eor	r22, r22
    14d2:	b0 0d       	add	r27, r0
    14d4:	a1 1d       	adc	r26, r1
    14d6:	66 1f       	adc	r22, r22
    14d8:	82 9f       	mul	r24, r18
    14da:	22 27       	eor	r18, r18
    14dc:	b0 0d       	add	r27, r0
    14de:	a1 1d       	adc	r26, r1
    14e0:	62 1f       	adc	r22, r18
    14e2:	73 9f       	mul	r23, r19
    14e4:	b0 0d       	add	r27, r0
    14e6:	a1 1d       	adc	r26, r1
    14e8:	62 1f       	adc	r22, r18
    14ea:	83 9f       	mul	r24, r19
    14ec:	a0 0d       	add	r26, r0
    14ee:	61 1d       	adc	r22, r1
    14f0:	22 1f       	adc	r18, r18
    14f2:	74 9f       	mul	r23, r20
    14f4:	33 27       	eor	r19, r19
    14f6:	a0 0d       	add	r26, r0
    14f8:	61 1d       	adc	r22, r1
    14fa:	23 1f       	adc	r18, r19
    14fc:	84 9f       	mul	r24, r20
    14fe:	60 0d       	add	r22, r0
    1500:	21 1d       	adc	r18, r1
    1502:	82 2f       	mov	r24, r18
    1504:	76 2f       	mov	r23, r22
    1506:	6a 2f       	mov	r22, r26
    1508:	11 24       	eor	r1, r1
    150a:	9f 57       	subi	r25, 0x7F	; 127
    150c:	50 40       	sbci	r21, 0x00	; 0
    150e:	9a f0       	brmi	.+38     	; 0x1536 <__mulsf3_pse+0x88>
    1510:	f1 f0       	breq	.+60     	; 0x154e <__mulsf3_pse+0xa0>
    1512:	88 23       	and	r24, r24
    1514:	4a f0       	brmi	.+18     	; 0x1528 <__mulsf3_pse+0x7a>
    1516:	ee 0f       	add	r30, r30
    1518:	ff 1f       	adc	r31, r31
    151a:	bb 1f       	adc	r27, r27
    151c:	66 1f       	adc	r22, r22
    151e:	77 1f       	adc	r23, r23
    1520:	88 1f       	adc	r24, r24
    1522:	91 50       	subi	r25, 0x01	; 1
    1524:	50 40       	sbci	r21, 0x00	; 0
    1526:	a9 f7       	brne	.-22     	; 0x1512 <__mulsf3_pse+0x64>
    1528:	9e 3f       	cpi	r25, 0xFE	; 254
    152a:	51 05       	cpc	r21, r1
    152c:	80 f0       	brcs	.+32     	; 0x154e <__mulsf3_pse+0xa0>
    152e:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__fp_inf>
    1532:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__fp_szero>
    1536:	5f 3f       	cpi	r21, 0xFF	; 255
    1538:	e4 f3       	brlt	.-8      	; 0x1532 <__mulsf3_pse+0x84>
    153a:	98 3e       	cpi	r25, 0xE8	; 232
    153c:	d4 f3       	brlt	.-12     	; 0x1532 <__mulsf3_pse+0x84>
    153e:	86 95       	lsr	r24
    1540:	77 95       	ror	r23
    1542:	67 95       	ror	r22
    1544:	b7 95       	ror	r27
    1546:	f7 95       	ror	r31
    1548:	e7 95       	ror	r30
    154a:	9f 5f       	subi	r25, 0xFF	; 255
    154c:	c1 f7       	brne	.-16     	; 0x153e <__mulsf3_pse+0x90>
    154e:	fe 2b       	or	r31, r30
    1550:	88 0f       	add	r24, r24
    1552:	91 1d       	adc	r25, r1
    1554:	96 95       	lsr	r25
    1556:	87 95       	ror	r24
    1558:	97 f9       	bld	r25, 7
    155a:	08 95       	ret

0000155c <__fp_inf>:
    155c:	97 f9       	bld	r25, 7
    155e:	9f 67       	ori	r25, 0x7F	; 127
    1560:	80 e8       	ldi	r24, 0x80	; 128
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	08 95       	ret

00001568 <__fp_nan>:
    1568:	9f ef       	ldi	r25, 0xFF	; 255
    156a:	80 ec       	ldi	r24, 0xC0	; 192
    156c:	08 95       	ret

0000156e <__fp_pscA>:
    156e:	00 24       	eor	r0, r0
    1570:	0a 94       	dec	r0
    1572:	16 16       	cp	r1, r22
    1574:	17 06       	cpc	r1, r23
    1576:	18 06       	cpc	r1, r24
    1578:	09 06       	cpc	r0, r25
    157a:	08 95       	ret

0000157c <__fp_pscB>:
    157c:	00 24       	eor	r0, r0
    157e:	0a 94       	dec	r0
    1580:	12 16       	cp	r1, r18
    1582:	13 06       	cpc	r1, r19
    1584:	14 06       	cpc	r1, r20
    1586:	05 06       	cpc	r0, r21
    1588:	08 95       	ret

0000158a <__fp_round>:
    158a:	09 2e       	mov	r0, r25
    158c:	03 94       	inc	r0
    158e:	00 0c       	add	r0, r0
    1590:	11 f4       	brne	.+4      	; 0x1596 <__fp_round+0xc>
    1592:	88 23       	and	r24, r24
    1594:	52 f0       	brmi	.+20     	; 0x15aa <__fp_round+0x20>
    1596:	bb 0f       	add	r27, r27
    1598:	40 f4       	brcc	.+16     	; 0x15aa <__fp_round+0x20>
    159a:	bf 2b       	or	r27, r31
    159c:	11 f4       	brne	.+4      	; 0x15a2 <__fp_round+0x18>
    159e:	60 ff       	sbrs	r22, 0
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <__fp_round+0x20>
    15a2:	6f 5f       	subi	r22, 0xFF	; 255
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	8f 4f       	sbci	r24, 0xFF	; 255
    15a8:	9f 4f       	sbci	r25, 0xFF	; 255
    15aa:	08 95       	ret

000015ac <__udivmodsi4>:
    15ac:	a1 e2       	ldi	r26, 0x21	; 33
    15ae:	1a 2e       	mov	r1, r26
    15b0:	aa 1b       	sub	r26, r26
    15b2:	bb 1b       	sub	r27, r27
    15b4:	fd 01       	movw	r30, r26
    15b6:	0d c0       	rjmp	.+26     	; 0x15d2 <__udivmodsi4_ep>

000015b8 <__udivmodsi4_loop>:
    15b8:	aa 1f       	adc	r26, r26
    15ba:	bb 1f       	adc	r27, r27
    15bc:	ee 1f       	adc	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	a2 17       	cp	r26, r18
    15c2:	b3 07       	cpc	r27, r19
    15c4:	e4 07       	cpc	r30, r20
    15c6:	f5 07       	cpc	r31, r21
    15c8:	20 f0       	brcs	.+8      	; 0x15d2 <__udivmodsi4_ep>
    15ca:	a2 1b       	sub	r26, r18
    15cc:	b3 0b       	sbc	r27, r19
    15ce:	e4 0b       	sbc	r30, r20
    15d0:	f5 0b       	sbc	r31, r21

000015d2 <__udivmodsi4_ep>:
    15d2:	66 1f       	adc	r22, r22
    15d4:	77 1f       	adc	r23, r23
    15d6:	88 1f       	adc	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	1a 94       	dec	r1
    15dc:	69 f7       	brne	.-38     	; 0x15b8 <__udivmodsi4_loop>
    15de:	60 95       	com	r22
    15e0:	70 95       	com	r23
    15e2:	80 95       	com	r24
    15e4:	90 95       	com	r25
    15e6:	9b 01       	movw	r18, r22
    15e8:	ac 01       	movw	r20, r24
    15ea:	bd 01       	movw	r22, r26
    15ec:	cf 01       	movw	r24, r30
    15ee:	08 95       	ret

000015f0 <__umulhisi3>:
    15f0:	a2 9f       	mul	r26, r18
    15f2:	b0 01       	movw	r22, r0
    15f4:	b3 9f       	mul	r27, r19
    15f6:	c0 01       	movw	r24, r0
    15f8:	a3 9f       	mul	r26, r19
    15fa:	70 0d       	add	r23, r0
    15fc:	81 1d       	adc	r24, r1
    15fe:	11 24       	eor	r1, r1
    1600:	91 1d       	adc	r25, r1
    1602:	b2 9f       	mul	r27, r18
    1604:	70 0d       	add	r23, r0
    1606:	81 1d       	adc	r24, r1
    1608:	11 24       	eor	r1, r1
    160a:	91 1d       	adc	r25, r1
    160c:	08 95       	ret

0000160e <_exit>:
    160e:	f8 94       	cli

00001610 <__stop_program>:
    1610:	ff cf       	rjmp	.-2      	; 0x1610 <__stop_program>
